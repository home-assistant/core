{
  "title": "Group",
  "config": {
    "step": {
      "user": {
        "title": "Add Group",
        "description": "Groups allow you to create a new entity that represents multiple entities of the same type.",
        "menu_options": {
          "binary_sensor": "Binary sensor group",
          "button": "Button group",
          "cover": "Cover group",
          "event": "Event group",
          "fan": "Fan group",
          "light": "Light group",
          "lock": "Lock group",
          "media_player": "Media player group",
          "notify": "Notify group",
          "sensor": "Sensor group",
          "switch": "Switch group"
        }
      },
      "binary_sensor": {
        "title": "[%key:component::group::config::step::user::title%]",
        "description": "If \"all entities\" is enabled, the group's state is on only if all members are on. If \"all entities\" is disabled, the group's state is on if any member is on.",
        "data": {
          "all": "All entities",
          "entities": "Members",
          "hide_members": "Hide members",
          "name": "[%key:common::config_flow::data::name%]"
        }
      },
      "button": {
        "title": "[%key:component::group::config::step::user::title%]",
        "data": {
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]",
          "name": "[%key:common::config_flow::data::name%]"
        }
      },
      "cover": {
        "title": "[%key:component::group::config::step::user::title%]",
        "data": {
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]",
          "name": "[%key:common::config_flow::data::name%]"
        }
      },
      "event": {
        "title": "[%key:component::group::config::step::user::title%]",
        "data": {
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]",
          "name": "[%key:common::config_flow::data::name%]"
        }
      },
      "fan": {
        "title": "[%key:component::group::config::step::user::title%]",
        "data": {
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]",
          "name": "[%key:common::config_flow::data::name%]"
        }
      },
      "light": {
        "title": "[%key:component::group::config::step::user::title%]",
        "data": {
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]",
          "name": "[%key:common::config_flow::data::name%]"
        }
      },
      "lock": {
        "title": "[%key:component::group::config::step::user::title%]",
        "data": {
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]",
          "name": "[%key:common::config_flow::data::name%]"
        }
      },
      "media_player": {
        "title": "[%key:component::group::config::step::user::title%]",
        "data": {
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]",
          "name": "[%key:common::config_flow::data::name%]"
        }
      },
      "notify": {
        "title": "[%key:component::group::config::step::user::title%]",
        "data": {
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]",
          "name": "[%key:common::config_flow::data::name%]"
        }
      },
      "sensor": {
        "title": "[%key:component::group::config::step::user::title%]",
        "data": {
          "ignore_non_numeric": "Ignore non-numeric",
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]",
          "name": "[%key:common::config_flow::data::name%]",
          "type": "Type",
          "round_digits": "Round value to number of decimals",
          "device_class": "Device class",
          "state_class": "State class",
          "unit_of_measurement": "Unit of Measurement"
        }
      },
      "switch": {
        "title": "[%key:component::group::config::step::user::title%]",
        "data": {
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]",
          "name": "[%key:common::config_flow::data::name%]"
        }
      }
    }
  },
  "options": {
    "step": {
      "binary_sensor": {
        "description": "[%key:component::group::config::step::binary_sensor::description%]",
        "data": {
          "all": "[%key:component::group::config::step::binary_sensor::data::all%]",
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]"
        }
      },
      "button": {
        "data": {
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]"
        }
      },
      "cover": {
        "data": {
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]"
        }
      },
      "fan": {
        "data": {
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]"
        }
      },
      "light": {
        "description": "[%key:component::group::config::step::binary_sensor::description%]",
        "data": {
          "all": "[%key:component::group::config::step::binary_sensor::data::all%]",
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]"
        }
      },
      "lock": {
        "data": {
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]"
        }
      },
      "media_player": {
        "data": {
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]"
        }
      },
      "notify": {
        "data": {
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]"
        }
      },
      "sensor": {
        "description": "If \"ignore non-numeric\" is enabled, the group's state is calculated if at least one member has a numerical value. If \"ignore non-numeric\" is disabled, the group's state is calculated only if all group members have numerical values.",
        "data": {
          "ignore_non_numeric": "[%key:component::group::config::step::sensor::data::ignore_non_numeric%]",
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]",
          "type": "[%key:component::group::config::step::sensor::data::type%]",
          "round_digits": "[%key:component::group::config::step::sensor::data::round_digits%]",
          "device_class": "[%key:component::group::config::step::sensor::data::device_class%]",
          "state_class": "[%key:component::group::config::step::sensor::data::state_class%]",
          "unit_of_measurement": "[%key:component::group::config::step::sensor::data::unit_of_measurement%]"
        }
      },
      "switch": {
        "description": "[%key:component::group::config::step::binary_sensor::description%]",
        "data": {
          "all": "[%key:component::group::config::step::binary_sensor::data::all%]",
          "entities": "[%key:component::group::config::step::binary_sensor::data::entities%]",
          "hide_members": "[%key:component::group::config::step::binary_sensor::data::hide_members%]"
        }
      }
    }
  },
  "entity_component": {
    "_": {
      "name": "[%key:component::group::title%]",
      "state": {
        "off": "[%key:common::state::off%]",
        "on": "[%key:common::state::on%]",
        "home": "[%key:common::state::home%]",
        "not_home": "[%key:common::state::not_home%]",
        "open": "[%key:common::state::open%]",
        "closed": "[%key:common::state::closed%]",
        "locked": "[%key:common::state::locked%]",
        "unlocked": "[%key:common::state::unlocked%]",
        "ok": "[%key:component::binary_sensor::entity_component::problem::state::off%]",
        "problem": "[%key:component::binary_sensor::entity_component::problem::state::on%]"
      },
      "state_attributes": {
        "entity_id": {
          "name": "[%key:component::group::config::step::binary_sensor::data::entities%]"
        }
      }
    }
  },
  "selector": {
    "type": {
      "options": {
        "last": "Most recently updated",
        "max": "Maximum",
        "mean": "Arithmetic mean",
        "median": "Median",
        "min": "Minimum",
        "product": "Product",
        "range": "Statistical range",
        "stdev": "Standard deviation",
        "sum": "Sum"
      }
    }
  },
  "services": {
    "reload": {
      "name": "[%key:common::action::reload%]",
      "description": "Reloads group configuration, entities, and notify services from YAML-configuration."
    },
    "set": {
      "name": "Set",
      "description": "Creates/Updates a user group.",
      "fields": {
        "object_id": {
          "name": "Object ID",
          "description": "Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]."
        },
        "name": {
          "name": "[%key:common::config_flow::data::name%]",
          "description": "Name of the group."
        },
        "icon": {
          "name": "Icon",
          "description": "Name of the icon for the group."
        },
        "entities": {
          "name": "Entities",
          "description": "List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`."
        },
        "add_entities": {
          "name": "Add entities",
          "description": "List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`."
        },
        "remove_entities": {
          "name": "Remove entities",
          "description": "List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`."
        },
        "all": {
          "name": "All",
          "description": "Enable this option if the group should only be used when all entities are in state `on`."
        }
      }
    },
    "remove": {
      "name": "Remove",
      "description": "Removes a group.",
      "fields": {
        "object_id": {
          "name": "[%key:component::group::services::set::fields::object_id::name%]",
          "description": "[%key:component::group::services::set::fields::object_id::description%]"
        }
      }
    }
  },
  "issues": {
    "uoms_not_matching_device_class": {
      "title": "Unit of measurements are not correct",
      "description": "Unit of measurements `{uoms}` of input sensors `{source_entities}` are not compatible and can't be converted with the device class `{device_class}` of sensor group `{entity_id}`.\n\nPlease correct the unit of measurements on the source entities and reload the group sensor to fix this issue."
    },
    "uoms_not_matching_no_device_class": {
      "title": "Unit of measurements is not correct",
      "description": "Unit of measurements `{uoms}` of input sensors `{source_entities}` are not compatible when not using a device class on sensor group `{entity_id}`.\n\nPlease correct the unit of measurements on the source entities or set a proper device class on the sensor group and reload the group sensor to fix this issue."
    },
    "device_classes_not_matching": {
      "title": "Device classes is not correct",
      "description": "Device classes `{device_classes}` on source entities `{source_entities}` needs to be same for sensor group `{entity_id}`.\n\nPlease correct the device classes on the source entities and reload the group sensor to fix this issue."
    },
    "state_classes_not_matching": {
      "title": "State classes is not correct",
      "description": "State classes `{state_classes}` on source entities `{source_entities}` needs to be same for sensor group `{entity_id}`.\n\nPlease correct the state classes on the source entities and reload the group sensor to fix this issue."
    }
  }
}
