{
  "config": {
    "flow_title": "{name}",
    "step": {
      "user": {
        "description": "[%key:component::bluetooth::config::step::user::description%]",
        "data": {
          "address": "[%key:common::config_flow::data::device%]"
        }
      },
      "bluetooth_confirm": {
        "description": "[%key:component::bluetooth::config::step::bluetooth_confirm::description%]"
      },
      "confirm_slow": {
        "description": "There hasn't been a broadcast from this device in the last minute so we aren't sure if this device uses encryption or not. This may be because the device uses a slow broadcast interval. Confirm to add this device anyway, then the next time a broadcast is received you will be prompted to enter its bindkey if it's needed."
      },
      "get_encryption_key_legacy": {
        "description": "The sensor data broadcast by the sensor is encrypted. In order to decrypt it we need a 24 character hexadecimal bindkey.",
        "data": {
          "bindkey": "Bindkey"
        }
      },
      "get_encryption_key_4_5": {
        "description": "The sensor data broadcast by the sensor is encrypted. In order to decrypt it we need a 32 character hexadecimal bindkey.",
        "data": {
          "bindkey": "Bindkey"
        }
      }
    },
    "error": {
      "decryption_failed": "The provided bindkey did not work, sensor data could not be decrypted. Please check it and try again.",
      "expected_24_characters": "Expected a 24 character hexadecimal bindkey.",
      "expected_32_characters": "Expected a 32 character hexadecimal bindkey."
    },
    "abort": {
      "reauth_successful": "[%key:common::config_flow::abort::reauth_successful%]",
      "no_devices_found": "[%key:common::config_flow::abort::no_devices_found%]",
      "already_in_progress": "[%key:common::config_flow::abort::already_in_progress%]",
      "already_configured": "[%key:common::config_flow::abort::already_configured_device%]"
    }
  },
  "device_automation": {
    "trigger_subtype": {
      "press": "Press",
      "double_press": "Double Press",
      "long_press": "Long Press",
      "motion_detected": "Motion Detected",
      "rotate_left": "Rotate Left",
      "rotate_right": "Rotate Right",
      "rotate_left_pressed": "Rotate Left (Pressed)",
      "rotate_right_pressed": "Rotate Right (Pressed)",
      "match_successful": "Match successful",
      "match_failed": "Match failed",
      "low_quality_too_light_fuzzy": "Low quality (too light, fuzzy)",
      "insufficient_area": "Insufficient area",
      "skin_is_too_dry": "Skin is too dry",
      "skin_is_too_wet": "Skin is too wet",
      "lock_outside_the_door": "Lock outside the door",
      "unlock_outside_the_door": "Unlock outside the door",
      "lock_inside_the_door": "Lock inside the door",
      "unlock_inside_the_door": "Unlock outside the door",
      "locked": "Locked",
      "turn_on_antilock": "Turn on antilock",
      "release_the_antilock": "Release antilock",
      "turn_on_child_lock": "Turn on child lock",
      "turn_off_child_lock": "Turn off child lock",
      "abnormal": "Abnormal"
    },
    "trigger_type": {
      "button": "Button \"{subtype}\"",
      "button_left": "Button Left \"{subtype}\"",
      "button_middle": "Button Middle \"{subtype}\"",
      "button_right": "Button Right \"{subtype}\"",
      "button_on": "Button On \"{subtype}\"",
      "button_off": "Button Off \"{subtype}\"",
      "button_brightness": "Button Brightness \"{subtype}\"",
      "button_plus": "Button Plus \"{subtype}\"",
      "button_min": "Button Min \"{subtype}\"",
      "button_m": "Button M \"{subtype}\"",
      "button_heat": "Button Heat \"{subtype}\"",
      "button_air_exchange": "Button Air Exchange \"{subtype}\"",
      "button_dry": "Button Dry \"{subtype}\"",
      "button_fan": "Button Fan \"{subtype}\"",
      "button_swing": "Button Swing \"{subtype}\"",
      "button_decrease_speed": "Button Decrease Speed \"{subtype}\"",
      "button_increase_speed": "Button Increase Speed \"{subtype}\"",
      "button_stop": "Button Stop \"{subtype}\"",
      "button_light": "Button Light \"{subtype}\"",
      "button_wind_speed": "Button Wind Speed \"{subtype}\"",
      "button_wind_mode": "Button Wind Mode \"{subtype}\"",
      "button_color_temperature": "Button Color Temperature \"{subtype}\"",
      "button_power": "Button Power \"{subtype}\"",
      "button_timer_30_minutes": "Button Timer 30 Minutes \"{subtype}\"",
      "button_timer_60_minutes": "Button Timer 30 Minutes \"{subtype}\"",
      "button_increase_wind_speed": "Button Increase Wind Speed \"{subtype}\"",
      "button_decrease_wind_speed": "Button Decrease Wind Speed \"{subtype}\"",
      "dimmer": "{subtype}",
      "fingerprint": "{subtype}",
      "lock": "{subtype}",
      "motion": "{subtype}",
      "cube": "{subtype}"
    }
  },
  "entity": {
    "event": {
      "button": {
        "state_attributes": {
          "event_type": {
            "state": {
              "press": "Press",
              "double_press": "Double press",
              "long_press": "Long press"
            }
          }
        }
      },
      "cube": {
        "state_attributes": {
          "event_type": {
            "state": {
              "rotate_left": "Rotate left",
              "rotate_right": "Rotate right"
            }
          }
        }
      },
      "dimmer": {
        "state_attributes": {
          "event_type": {
            "state": {
              "press": "Press",
              "long_press": "Long press",
              "rotate_left": "Rotate left",
              "rotate_right": "Rotate right",
              "rotate_left_pressed": "Rotate left (pressed)",
              "rotate_right_pressed": "Rotate right (pressed)"
            }
          }
        }
      },
      "error": {
        "state_attributes": {
          "event_type": {
            "state": {
              "frequent_unlocking_with_incorrect_password": "Frequent unlocking with incorrect password",
              "frequent_unlocking_with_wrong_fingerprints": "Frequent unlocking with wrong fingerprints",
              "operation_timeout_password_input_timeout": "Operation timeout password input timeout",
              "lock_picking": "Lock picking",
              "reset_button_is_pressed": "Reset button is pressed",
              "the_wrong_key_is_frequently_unlocked": "The wrong key is frequently unlocked",
              "foreign_body_in_the_keyhole": "Foreign body in the keyhole",
              "the_key_has_not_been_taken_out": "The key has not been taken out",
              "error_nfc_frequently_unlocks": "Error NFC frequently unlocks",
              "timeout_is_not_locked_as_required": "Timeout is not locked as required",
              "failure_to_unlock_frequently_in_multiple_ways": "Failure to unlock frequently in multiple ways",
              "unlocking_the_face_frequently_fails": "Unlocking the face frequently fails",
              "failure_to_unlock_the_vein_frequently": "Failure to unlock the vein frequently",
              "hijacking_alarm": "Hijacking alarm",
              "unlock_inside_the_door_after_arming": "Unlock inside the door after arming",
              "palmprints_frequently_fail_to_unlock": "Palmprints frequently fail to unlock",
              "the_safe_was_moved": "The safe was moved",
              "the_battery_level_is_less_than_10_percent": "The battery level is less than 10%",
              "the_battery_level_is_less_than_5_percent": "The battery level is less than 5%",
              "the_fingerprint_sensor_is_abnormal": "The fingerprint sensor is abnormal",
              "the_accessory_battery_is_low": "The accessory battery is low",
              "mechanical_failure": "Mechanical failure",
              "the_lock_sensor_is_faulty": "The lock sensor is faulty"
            }
          }
        }
      },
      "fingerprint": {
        "state_attributes": {
          "event_type": {
            "state": {
              "match_successful": "[%key:component::xiaomi_ble::device_automation::trigger_subtype::match_successful%]",
              "match_failed": "[%key:component::xiaomi_ble::device_automation::trigger_subtype::match_failed%]",
              "low_quality_too_light_fuzzy": "[%key:component::xiaomi_ble::device_automation::trigger_subtype::low_quality_too_light_fuzzy%]",
              "insufficient_area": "[%key:component::xiaomi_ble::device_automation::trigger_subtype::insufficient_area%]",
              "skin_is_too_dry": "[%key:component::xiaomi_ble::device_automation::trigger_subtype::skin_is_too_dry%]",
              "skin_is_too_wet": "[%key:component::xiaomi_ble::device_automation::trigger_subtype::skin_is_too_wet%]"
            }
          }
        }
      },
      "lock": {
        "state_attributes": {
          "event_type": {
            "state": {
              "lock_outside_the_door": "[%key:component::xiaomi_ble::device_automation::trigger_subtype::lock_outside_the_door%]",
              "unlock_outside_the_door": "[%key:component::xiaomi_ble::device_automation::trigger_subtype::unlock_outside_the_door%]",
              "lock_inside_the_door": "[%key:component::xiaomi_ble::device_automation::trigger_subtype::lock_inside_the_door%]",
              "unlock_inside_the_door": "[%key:component::xiaomi_ble::device_automation::trigger_subtype::unlock_inside_the_door%]",
              "locked": "[%key:component::xiaomi_ble::device_automation::trigger_subtype::locked%]",
              "turn_on_antilock": "[%key:component::xiaomi_ble::device_automation::trigger_subtype::turn_on_antilock%]",
              "release_the_antilock": "[%key:component::xiaomi_ble::device_automation::trigger_subtype::release_the_antilock%]",
              "turn_on_child_lock": "[%key:component::xiaomi_ble::device_automation::trigger_subtype::turn_on_child_lock%]",
              "turn_off_child_lock": "[%key:component::xiaomi_ble::device_automation::trigger_subtype::turn_off_child_lock%]",
              "abnormal": "[%key:component::xiaomi_ble::device_automation::trigger_subtype::abnormal%]"
            }
          }
        }
      },
      "motion": {
        "state_attributes": {
          "event_type": {
            "state": {
              "motion_detected": "Motion Detected"
            }
          }
        }
      }
    }
  }
}
