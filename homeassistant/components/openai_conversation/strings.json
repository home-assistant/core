{
  "config": {
    "step": {
      "user": {
        "data": {
          "api_key": "[%key:common::config_flow::data::api_key%]"
        }
      }
    },
    "error": {
      "cannot_connect": "[%key:common::config_flow::error::cannot_connect%]",
      "invalid_auth": "[%key:common::config_flow::error::invalid_auth%]",
      "unknown": "[%key:common::config_flow::error::unknown%]"
    },
    "abort": {
      "already_configured": "[%key:common::config_flow::abort::already_configured_service%]"
    }
  },
  "config_subentries": {
    "conversation": {
      "initiate_flow": {
        "user": "Add conversation agent",
        "reconfigure": "Reconfigure conversation agent"
      },
      "entry_type": "Conversation agent",

      "step": {
        "init": {
          "data": {
            "name": "[%key:common::config_flow::data::name%]",
            "prompt": "Instructions",
            "llm_hass_api": "[%key:common::config_flow::data::llm_hass_api%]",
            "recommended": "Recommended model settings"
          },
          "data_description": {
            "prompt": "Instruct how the LLM should respond. This can be a template."
          }
        },
        "advanced": {
          "title": "Advanced settings",
          "data": {
            "chat_model": "[%key:common::generic::model%]",
            "max_tokens": "Maximum tokens to return in response",
            "temperature": "Temperature",
            "top_p": "Top P"
          }
        },
        "model": {
          "title": "Model-specific options",
          "data": {
            "reasoning_effort": "Reasoning effort",
            "web_search": "Enable web search",
            "search_context_size": "Search context size",
            "user_location": "Include home location"
          },
          "data_description": {
            "reasoning_effort": "How many reasoning tokens the model should generate before creating a response to the prompt",
            "web_search": "Allow the model to search the web for the latest information before generating a response",
            "search_context_size": "High level guidance for the amount of context window space to use for the search",
            "user_location": "Refine search results based on geography"
          }
        }
      },
      "abort": {
        "reconfigure_successful": "[%key:common::config_flow::abort::reconfigure_successful%]",
        "entry_not_loaded": "Cannot add things while the configuration is disabled."
      },
      "error": {
        "model_not_supported": "This model is not supported, please select a different model"
      }
    },
    "ai_task_data": {
      "initiate_flow": {
        "user": "Add Generate data with AI service",
        "reconfigure": "Reconfigure Generate data with AI service"
      },
      "entry_type": "Generate data with AI service",
      "step": {
        "init": {
          "data": {
            "name": "[%key:common::config_flow::data::name%]",
            "recommended": "[%key:component::openai_conversation::config_subentries::conversation::step::init::data::recommended%]"
          }
        },
        "advanced": {
          "title": "[%key:component::openai_conversation::config_subentries::conversation::step::advanced::title%]",
          "data": {
            "chat_model": "[%key:common::generic::model%]",
            "max_tokens": "[%key:component::openai_conversation::config_subentries::conversation::step::advanced::data::max_tokens%]",
            "temperature": "[%key:component::openai_conversation::config_subentries::conversation::step::advanced::data::temperature%]",
            "top_p": "[%key:component::openai_conversation::config_subentries::conversation::step::advanced::data::top_p%]"
          }
        },
        "model": {
          "title": "[%key:component::openai_conversation::config_subentries::conversation::step::model::title%]",
          "data": {
            "reasoning_effort": "[%key:component::openai_conversation::config_subentries::conversation::step::model::data::reasoning_effort%]",
            "web_search": "[%key:component::openai_conversation::config_subentries::conversation::step::model::data::web_search%]",
            "search_context_size": "[%key:component::openai_conversation::config_subentries::conversation::step::model::data::search_context_size%]",
            "user_location": "[%key:component::openai_conversation::config_subentries::conversation::step::model::data::user_location%]"
          },
          "data_description": {
            "reasoning_effort": "[%key:component::openai_conversation::config_subentries::conversation::step::model::data_description::reasoning_effort%]",
            "web_search": "[%key:component::openai_conversation::config_subentries::conversation::step::model::data_description::web_search%]",
            "search_context_size": "[%key:component::openai_conversation::config_subentries::conversation::step::model::data_description::search_context_size%]",
            "user_location": "[%key:component::openai_conversation::config_subentries::conversation::step::model::data_description::user_location%]"
          }
        }
      },
      "abort": {
        "reconfigure_successful": "[%key:common::config_flow::abort::reconfigure_successful%]",
        "entry_not_loaded": "[%key:component::openai_conversation::config_subentries::conversation::abort::entry_not_loaded%]"
      },
      "error": {
        "model_not_supported": "[%key:component::openai_conversation::config_subentries::conversation::error::model_not_supported%]"
      }
    }
  },
  "selector": {
    "reasoning_effort": {
      "options": {
        "low": "[%key:common::state::low%]",
        "medium": "[%key:common::state::medium%]",
        "high": "[%key:common::state::high%]"
      }
    },
    "search_context_size": {
      "options": {
        "low": "[%key:common::state::low%]",
        "medium": "[%key:common::state::medium%]",
        "high": "[%key:common::state::high%]"
      }
    }
  },
  "services": {
    "generate_image": {
      "name": "Generate image",
      "description": "Turns a prompt into an image",
      "fields": {
        "config_entry": {
          "name": "Config entry",
          "description": "The config entry to use for this action"
        },
        "prompt": {
          "name": "Prompt",
          "description": "The text to turn into an image",
          "example": "A photo of a dog"
        },
        "size": {
          "name": "Size",
          "description": "The size of the image to generate"
        },
        "quality": {
          "name": "Quality",
          "description": "The quality of the image that will be generated"
        },
        "style": {
          "name": "Style",
          "description": "The style of the generated image"
        }
      }
    },
    "generate_content": {
      "name": "Generate content",
      "description": "Sends a conversational query to ChatGPT including any attached image or PDF files",
      "fields": {
        "config_entry": {
          "name": "Config entry",
          "description": "The config entry to use for this action"
        },
        "prompt": {
          "name": "Prompt",
          "description": "The prompt to send"
        },
        "filenames": {
          "name": "Files",
          "description": "List of files to upload"
        }
      }
    }
  },
  "exceptions": {
    "invalid_config_entry": {
      "message": "Invalid config entry provided. Got {config_entry}"
    }
  }
}
