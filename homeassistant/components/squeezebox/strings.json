{
  "config": {
    "flow_title": "{host}",
    "step": {
      "user": {
        "data": {
          "host": "[%key:common::config_flow::data::host%]"
        },
        "data_description": {
          "host": "The hostname or IP address of your Lyrion Music Server."
        }
      },
      "edit": {
        "title": "Edit connection information",
        "data": {
          "host": "[%key:common::config_flow::data::host%]",
          "port": "[%key:common::config_flow::data::port%]",
          "username": "[%key:common::config_flow::data::username%]",
          "password": "[%key:common::config_flow::data::password%]",
          "https": "Connect over HTTPS (requires reverse proxy)"
        },
        "data_description": {
          "host": "[%key:component::squeezebox::config::step::user::data_description::host%]",
          "port": "The web interface port on the LMS. The default is 9000.",
          "username": "The username from LMS Advanced Security (if defined).",
          "password": "The password from LMS Advanced Security (if defined).",
          "https": "Connect to the LMS over HTTPS (requires reverse proxy)."
        }
      }
    },
    "error": {
      "cannot_connect": "[%key:common::config_flow::error::cannot_connect%]",
      "invalid_auth": "[%key:common::config_flow::error::invalid_auth%]",
      "unknown": "[%key:common::config_flow::error::unknown%]",
      "no_server_found": "Could not automatically discover server."
    },
    "abort": {
      "already_configured": "[%key:common::config_flow::abort::already_configured_device%]",
      "no_server_found": "No LMS found."
    }
  },
  "services": {
    "call_method": {
      "name": "Call method",
      "description": "Calls a custom Squeezebox JSONRPC API.",
      "fields": {
        "command": {
          "name": "Command",
          "description": "Command to pass to Lyrion Music Server (p0 in the CLI documentation)."
        },
        "parameters": {
          "name": "Parameters",
          "description": "Array of additional parameters to pass to Lyrion Music Server (p1, ..., pN in the CLI documentation)."
        }
      }
    },
    "call_query": {
      "name": "Call query",
      "description": "Calls a custom Squeezebox JSONRPC API. Result will be stored in 'query_result' attribute of the Squeezebox entity.",
      "fields": {
        "command": {
          "name": "Command",
          "description": "[%key:component::squeezebox::services::call_method::fields::command::description%]"
        },
        "parameters": {
          "name": "Parameters",
          "description": "[%key:component::squeezebox::services::call_method::fields::parameters::description%]"
        }
      }
    }
  },
  "entity": {
    "button": {
      "preset": {
        "name": "Preset {index}"
      },
      "brightness_up": {
        "name": "Brightness up"
      },
      "brightness_down": {
        "name": "Brightness down"
      },
      "bass_up": {
        "name": "Bass up"
      },
      "bass_down": {
        "name": "Bass down"
      },
      "treble_up": {
        "name": "Treble up"
      },
      "treble_down": {
        "name": "Treble down"
      }
    },
    "binary_sensor": {
      "rescan": {
        "name": "Library rescan"
      },
      "needsrestart": {
        "name": "Needs restart"
      }
    },
    "sensor": {
      "lastscan": {
        "name": "Last scan"
      },
      "info_total_albums": {
        "name": "Total albums",
        "unit_of_measurement": "albums"
      },
      "info_total_artists": {
        "name": "Total artists",
        "unit_of_measurement": "artists"
      },
      "info_total_duration": {
        "name": "Total duration"
      },
      "info_total_genres": {
        "name": "Total genres",
        "unit_of_measurement": "genres"
      },
      "info_total_songs": {
        "name": "Total songs",
        "unit_of_measurement": "songs"
      },
      "player_count": {
        "name": "Player count",
        "unit_of_measurement": "players"
      },
      "other_player_count": {
        "name": "Player count off service",
        "unit_of_measurement": "[%key:component::squeezebox::entity::sensor::player_count::unit_of_measurement%]"
      }
    },
    "switch": {
      "alarm": {
        "name": "Alarm ({alarm_id})"
      },
      "alarms_enabled": {
        "name": "Alarms enabled"
      }
    },
    "update": {
      "newversion": {
        "name": "Lyrion Music Server"
      },
      "newplugins": {
        "name": "Updated plugins"
      }
    }
  },
  "options": {
    "step": {
      "init": {
        "title": "LMS Configuration",
        "data": {
          "browse_limit": "Browse limit",
          "volume_step": "Volume step"
        },
        "data_description": {
          "browse_limit": "Maximum number of items when browsing or in a playlist.",
          "volume_step": "Amount to adjust the volume when turning volume up or down."
        }
      }
    }
  },
  "exceptions": {
    "init_timeout": {
      "message": "Timeout connecting to LMS {host}."
    },
    "init_auth_failed": {
      "message": "Authentication failed with {host}."
    },
    "init_get_status_failed": {
      "message": "Failed to get status from LMS {host} (HTTP status: {http_status}). Will retry."
    },
    "init_missing_uuid": {
      "message": "LMS {host} status response missing essential data (UUID)."
    },
    "invalid_announce_media_type": {
      "message": "Only type 'music' can be played as announcement (received type {media_type})."
    },
    "invalid_announce_volume": {
      "message": "{announce_volume} must be a number greater than 0 and less than or equal to 1."
    },
    "invalid_announce_timeout": {
      "message": "{announce_timeout} must be a number greater than 0."
    },
    "join_cannot_find_other_player": {
      "message": "Could not find player with entity_id {other_player_entity_id}."
    },
    "join_cannot_join_unknown_player": {
      "message": "Could not join unknown player {other_player_entity_id}."
    },
    "coordinator_no_data": {
      "message": "No data from status poll."
    },
    "browse_media_not_found": {
      "message": "Media not found: {type} / {id}."
    },
    "browse_media_type_not_supported": {
      "message": "Media type not supported: {media_type}."
    },
    "update_restart_failed": {
      "message": "Error trying to update LMS Plugins: Restart failed."
    },
    "invalid_search_media_content_type": {
      "message": "If specified, Media content type must be one of {media_content_type}"
    }
  }
}
