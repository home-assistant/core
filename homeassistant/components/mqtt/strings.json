{
  "issues": {
    "deprecated_color_handling": {
      "title": "Deprecated color handling used for MQTT light",
      "description": "An MQTT light config (with `json` schema) found in `configuration.yaml` uses deprecated color handling flags.\n\nConfiguration found:\n```yaml\n{config}\n```\nDeprecated flags: **{deprecated_flags}**.\n\nUse the `supported_color_modes` option instead and [reload](/developer-tools/yaml) the manually configured MQTT items or restart Home Assistant to fix this issue."
    },
    "deprecated_color_mode_flag": {
      "title": "Deprecated color_mode option flag used for MQTT light",
      "description": "An MQTT light config (with `json` schema) found in `configuration.yaml` uses a deprecated `color_mode` flag.\n\nConfiguration found:\n```yaml\n{config}\n```\n\nRemove the option from your config and [reload](/developer-tools/yaml) the manually configured MQTT items or restart Home Assistant to fix this issue."
    },
    "invalid_platform_config": {
      "title": "Invalid config found for mqtt {domain} item",
      "description": "Home Assistant detected an invalid config for a manually configured item.\n\nPlatform domain: **{domain}**\nConfiguration file: **{config_file}**\nNear line: **{line}**\nConfiguration found:\n```yaml\n{config}\n```\nError: **{error}**.\n\nMake sure the configuration is valid and [reload](/developer-tools/yaml) the manually configured MQTT items or restart Home Assistant to fix this issue."
    },
    "payload_template_deprecation": {
      "title": "Deprecated option used in mqtt publish action call",
      "description": "Deprecated `payload_template` option used in MQTT publish action call to topic `{topic}` from payload template `{payload_template}`. Use the `payload` option instead. In automations templates are supported natively. Update the automation or script to use the `payload` option instead and restart Home Assistant to fix this issue."
    },
    "topic_template_deprecation": {
      "title": "Deprecated option used in mqtt publish action call",
      "description": "Deprecated `topic_template` option used in MQTT publish action call to topic `{topic}` from topic template `{topic_template}`. Use the `topic` option instead. In automations templates are supported natively. Update the automation or script to use the `topic` option instead and restart Home Assistant to fix this issue."
    }
  },
  "config": {
    "step": {
      "user": {
        "description": "Please choose how you want to connect to the MQTT broker:",
        "menu_options": {
          "addon": "Use the official {addon} add-on.",
          "broker": "Manually enter the MQTT broker connection details"
        }
      },
      "broker": {
        "description": "Please enter the connection information of your MQTT broker.",
        "data": {
          "broker": "Broker",
          "port": "[%key:common::config_flow::data::port%]",
          "username": "[%key:common::config_flow::data::username%]",
          "password": "[%key:common::config_flow::data::password%]",
          "advanced_options": "Advanced options",
          "certificate": "Upload custom CA certificate file",
          "client_id": "Client ID (leave empty to randomly generated one)",
          "client_cert": "Upload client certificate file",
          "client_key": "Upload private key file",
          "keepalive": "The time between sending keep alive messages",
          "tls_insecure": "Ignore broker certificate validation",
          "protocol": "MQTT protocol",
          "set_ca_cert": "Broker certificate validation",
          "set_client_cert": "Use a client certificate",
          "transport": "MQTT transport",
          "ws_headers": "WebSocket headers in JSON format",
          "ws_path": "WebSocket path"
        },
        "data_description": {
          "broker": "The hostname or IP address of your MQTT broker.",
          "port": "The port your MQTT broker listens to. For example 1883.",
          "username": "The username to login to your MQTT broker.",
          "password": "The password to login to your MQTT broker.",
          "advanced_options": "Enable and select **Next** to set advanced options.",
          "certificate": "The custom CA certificate file to validate your MQTT brokers certificate.",
          "client_id": "The unique ID to identify the Home Assistant MQTT API as MQTT client. It is recommended to leave this option blank.",
          "client_cert": "The client certificate to authenticate against your MQTT broker.",
          "client_key": "The private key file that belongs to your client certificate.",
          "keepalive": "A value less than 90 seconds is advised.",
          "tls_insecure": "Option to ignore validation of your MQTT broker's certificate.",
          "protocol": "The MQTT protocol your broker operates at. For example 3.1.1.",
          "set_ca_cert": "Select **Auto** for automatic CA validation, or **Custom** and select **Next** to set a custom CA certificate, to allow validating your MQTT brokers certificate.",
          "set_client_cert": "Enable and select **Next** to set a client certificate and private key to authenticate against your MQTT broker.",
          "transport": "The transport to be used for the connection to your MQTT broker.",
          "ws_headers": "The WebSocket headers to pass through the WebSocket based connection to your MQTT broker.",
          "ws_path": "The WebSocket path to be used for the connection to your MQTT broker."
        }
      },
      "install_addon": {
        "title": "Installing add-on"
      },
      "start_addon": {
        "title": "Starting add-on"
      },
      "hassio_confirm": {
        "title": "MQTT Broker via Home Assistant add-on",
        "description": "Do you want to configure Home Assistant to connect to the MQTT broker provided by the add-on {addon}?"
      },
      "reauth_confirm": {
        "title": "Re-authentication required with the MQTT broker",
        "description": "The MQTT broker reported an authentication error. Please confirm the brokers correct username and password.",
        "data": {
          "username": "[%key:common::config_flow::data::username%]",
          "password": "[%key:common::config_flow::data::password%]"
        },
        "data_description": {
          "username": "[%key:component::mqtt::config::step::broker::data_description::username%]",
          "password": "[%key:component::mqtt::config::step::broker::data_description::password%]"
        }
      }
    },
    "abort": {
      "addon_info_failed": "Failed get info for the {addon} add-on.",
      "addon_install_failed": "Failed to install the {addon} add-on.",
      "addon_start_failed": "Failed to start the {addon} add-on.",
      "addon_connection_failed": "Failed to connect to the {addon} add-on. Check the add-on status and try again later.",
      "already_configured": "[%key:common::config_flow::abort::already_configured_service%]",
      "reauth_successful": "[%key:common::config_flow::abort::reauth_successful%]",
      "single_instance_allowed": "[%key:common::config_flow::abort::single_instance_allowed%]"
    },
    "error": {
      "bad_birth": "Invalid birth topic",
      "bad_will": "Invalid will topic",
      "bad_discovery_prefix": "Invalid discovery prefix",
      "bad_certificate": "The CA certificate is invalid",
      "bad_client_cert": "Invalid client certificate, ensure a PEM coded file is supplied",
      "bad_client_key": "Invalid private key, ensure a PEM coded file is supplied without password",
      "bad_client_cert_key": "Client certificate and private key are not a valid pair",
      "bad_ws_headers": "Supply valid HTTP headers as a JSON object",
      "cannot_connect": "[%key:common::config_flow::error::cannot_connect%]",
      "invalid_auth": "[%key:common::config_flow::error::invalid_auth%]",
      "invalid_inclusion": "The client certificate and private key must be configurered together"
    }
  },
  "device_automation": {
    "trigger_type": {
      "button_short_press": "\"{subtype}\" pressed",
      "button_short_release": "\"{subtype}\" released",
      "button_long_press": "\"{subtype}\" continuously pressed",
      "button_long_release": "\"{subtype}\" released after long press",
      "button_double_press": "\"{subtype}\" double clicked",
      "button_triple_press": "\"{subtype}\" triple clicked",
      "button_quadruple_press": "\"{subtype}\" quadruple clicked",
      "button_quintuple_press": "\"{subtype}\" quintuple clicked"
    },
    "trigger_subtype": {
      "turn_on": "[%key:common::action::turn_on%]",
      "turn_off": "[%key:common::action::turn_off%]",
      "button_1": "First button",
      "button_2": "Second button",
      "button_3": "Third button",
      "button_4": "Fourth button",
      "button_5": "Fifth button",
      "button_6": "Sixth button"
    }
  },
  "options": {
    "step": {
      "broker": {
        "title": "Broker options",
        "description": "[%key:component::mqtt::config::step::broker::description%]",
        "data": {
          "broker": "[%key:component::mqtt::config::step::broker::data::broker%]",
          "port": "[%key:common::config_flow::data::port%]",
          "username": "[%key:common::config_flow::data::username%]",
          "password": "[%key:common::config_flow::data::password%]",
          "advanced_options": "[%key:component::mqtt::config::step::broker::data::advanced_options%]",
          "certificate": "[%key:component::mqtt::config::step::broker::data::certificate%]",
          "client_id": "[%key:component::mqtt::config::step::broker::data::client_id%]",
          "client_cert": "[%key:component::mqtt::config::step::broker::data::client_cert%]",
          "client_key": "[%key:component::mqtt::config::step::broker::data::client_key%]",
          "keepalive": "[%key:component::mqtt::config::step::broker::data::keepalive%]",
          "tls_insecure": "[%key:component::mqtt::config::step::broker::data::tls_insecure%]",
          "protocol": "[%key:component::mqtt::config::step::broker::data::protocol%]",
          "set_ca_cert": "[%key:component::mqtt::config::step::broker::data::set_ca_cert%]",
          "set_client_cert": "[%key:component::mqtt::config::step::broker::data::set_client_cert%]",
          "transport": "[%key:component::mqtt::config::step::broker::data::transport%]",
          "ws_headers": "[%key:component::mqtt::config::step::broker::data::ws_headers%]",
          "ws_path": "[%key:component::mqtt::config::step::broker::data::ws_path%]"
        },
        "data_description": {
          "broker": "[%key:component::mqtt::config::step::broker::data_description::broker%]",
          "port": "[%key:component::mqtt::config::step::broker::data_description::port%]",
          "username": "[%key:component::mqtt::config::step::broker::data_description::username%]",
          "password": "[%key:component::mqtt::config::step::broker::data_description::password%]",
          "advanced_options": "[%key:component::mqtt::config::step::broker::data_description::advanced_options%]",
          "certificate": "[%key:component::mqtt::config::step::broker::data_description::certificate%]",
          "client_id": "[%key:component::mqtt::config::step::broker::data_description::client_id%]",
          "client_cert": "[%key:component::mqtt::config::step::broker::data_description::client_cert%]",
          "client_key": "[%key:component::mqtt::config::step::broker::data_description::client_key%]",
          "keepalive": "[%key:component::mqtt::config::step::broker::data_description::keepalive%]",
          "tls_insecure": "[%key:component::mqtt::config::step::broker::data_description::tls_insecure%]",
          "protocol": "[%key:component::mqtt::config::step::broker::data_description::protocol%]",
          "set_ca_cert": "[%key:component::mqtt::config::step::broker::data_description::set_ca_cert%]",
          "set_client_cert": "[%key:component::mqtt::config::step::broker::data_description::set_client_cert%]",
          "transport": "[%key:component::mqtt::config::step::broker::data_description::transport%]",
          "ws_headers": "[%key:component::mqtt::config::step::broker::data_description::ws_headers%]",
          "ws_path": "[%key:component::mqtt::config::step::broker::data_description::ws_path%]"
        }
      },
      "options": {
        "title": "MQTT options",
        "description": "Discovery - If discovery is enabled (recommended), Home Assistant will automatically discover devices and entities which publish their configuration on the MQTT broker. If discovery is disabled, all configuration must be done manually.\nDiscovery prefix - The prefix a configuration topic for automatic discovery must start with.\nBirth message - The birth message will be sent each time Home Assistant (re)connects to the MQTT broker.\nWill message - The will message will be sent each time Home Assistant loses its connection to the broker, both in case of a clean (e.g. Home Assistant shutting down) and in case of an unclean (e.g. Home Assistant crashing or losing its network connection) disconnect.",
        "data": {
          "discovery": "Enable discovery",
          "discovery_prefix": "Discovery prefix",
          "birth_enable": "Enable birth message",
          "birth_topic": "Birth message topic",
          "birth_payload": "Birth message payload",
          "birth_qos": "Birth message QoS",
          "birth_retain": "Birth message retain",
          "will_enable": "Enable will message",
          "will_topic": "Will message topic",
          "will_payload": "Will message payload",
          "will_qos": "Will message QoS",
          "will_retain": "Will message retain"
        },
        "data_description": {
          "discovery": "Option to enable MQTT automatic discovery.",
          "discovery_prefix": "The prefix of configuration topics the MQTT integration will subscribe to.",
          "birth_enable": "When set, Home Assistant will publish an online message to your MQTT broker when MQTT is ready.",
          "birth_topic": "The MQTT topic where Home Assistant will publish a `birth` message.",
          "birth_payload": "The `birth` message that is published when MQTT is ready and connected.",
          "birth_qos": "The quality of service of the `birth` message that is published when MQTT is ready and connected",
          "birth_retain": "When set, Home Assistant will retain the `birth` message published to your MQTT broker.",
          "will_enable": "When set, Home Assistant will ask your broker to publish a `will` message when MQTT is stopped or when it looses the connection to your broker.",
          "will_topic": "The MQTT topic your MQTT broker will publish a `will` message to.",
          "will_payload": "The message your MQTT broker `will` publish when the MQTT integration is stopped or when the connection is lost.",
          "will_qos": "The quality of service of the `will` message that is published by your MQTT broker.",
          "will_retain": "When set, your MQTT broker will retain the `will` message."
        }
      }
    },
    "error": {
      "bad_birth": "[%key:component::mqtt::config::error::bad_birth%]",
      "bad_will": "[%key:component::mqtt::config::error::bad_will%]",
      "bad_discovery_prefix": "[%key:component::mqtt::config::error::bad_discovery_prefix%]",
      "bad_certificate": "[%key:component::mqtt::config::error::bad_certificate%]",
      "bad_client_cert": "[%key:component::mqtt::config::error::bad_client_cert%]",
      "bad_client_key": "[%key:component::mqtt::config::error::bad_client_key%]",
      "bad_client_cert_key": "[%key:component::mqtt::config::error::bad_client_cert_key%]",
      "bad_ws_headers": "[%key:component::mqtt::config::error::bad_ws_headers%]",
      "cannot_connect": "[%key:common::config_flow::error::cannot_connect%]",
      "invalid_inclusion": "[%key:component::mqtt::config::error::invalid_inclusion%]"
    }
  },
  "selector": {
    "set_ca_cert": {
      "options": {
        "off": "[%key:common::state::off%]",
        "auto": "Auto",
        "custom": "Custom"
      }
    }
  },
  "services": {
    "publish": {
      "name": "Publish",
      "description": "Publishes a message to an MQTT topic.",
      "fields": {
        "evaluate_payload": {
          "name": "Evaluate payload",
          "description": "When `payload` is a Python bytes literal, evaluate the bytes literal and publish the raw data."
        },
        "topic": {
          "name": "Topic",
          "description": "Topic to publish to."
        },
        "payload": {
          "name": "Payload",
          "description": "The payload to publish."
        },
        "payload_template": {
          "name": "Payload template",
          "description": "Template to render as a payload value. If a payload is provided, the template is ignored."
        },
        "qos": {
          "name": "QoS",
          "description": "Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once."
        },
        "retain": {
          "name": "Retain",
          "description": "If the message should have the retain flag set. If set, the broker stores the most recent message on a topic."
        }
      }
    },
    "dump": {
      "name": "Export",
      "description": "Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.",
      "fields": {
        "topic": {
          "name": "[%key:component::mqtt::services::publish::fields::topic::name%]",
          "description": "Topic to listen to."
        },
        "duration": {
          "name": "Duration",
          "description": "How long we should listen for messages in seconds."
        }
      }
    },
    "reload": {
      "name": "[%key:common::action::reload%]",
      "description": "Reloads MQTT entities from the YAML-configuration."
    }
  },
  "exceptions": {
    "command_template_error": {
      "message": "Parsing template `{command_template}` for entity `{entity_id}` failed with error: {error}."
    },
    "invalid_platform_config": {
      "message": "Reloading YAML config for manually configured MQTT `{domain}` item failed. See logs for more details."
    },
    "invalid_publish_topic": {
      "message": "Unable to publish: topic template `{topic_template}` produced an invalid topic `{topic}` after rendering ({error})"
    },
    "mqtt_not_setup_cannot_subscribe": {
      "message": "Cannot subscribe to topic \"{topic}\", make sure MQTT is set up correctly."
    },
    "mqtt_not_setup_cannot_publish": {
      "message": "Cannot publish to topic \"{topic}\", make sure MQTT is set up correctly."
    }
  }
}
