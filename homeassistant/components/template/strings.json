{
  "common": {
    "advanced_options": "Advanced options",
    "availability": "Availability template",
    "availability_description": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed.",
    "code_format": "Code format",
    "device_class": "Device class",
    "device_id_description": "Select a device to link to this entity.",
    "state": "State",
    "turn_off": "Actions on turn off",
    "turn_on": "Actions on turn on",
    "unit_of_measurement": "Unit of measurement"
  },
  "config": {
    "step": {
      "alarm_control_panel": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "value_template": "[%key:component::template::common::state%]",
          "name": "[%key:common::config_flow::data::name%]",
          "disarm": "Actions on disarm",
          "arm_away": "Actions on arm away",
          "arm_custom_bypass": "Actions on arm custom bypass",
          "arm_home": "Actions on arm home",
          "arm_night": "Actions on arm night",
          "arm_vacation": "Actions on arm vacation",
          "trigger": "Actions on trigger",
          "code_arm_required": "Code arm required",
          "code_format": "[%key:component::template::common::code_format%]"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "value_template": "Defines a template to set the state of the alarm panel. Valid output values from the template are `armed_away`, `armed_home`, `armed_night`, `armed_vacation`, `arming`, `disarmed`, `pending`, and `triggered`.",
          "disarm": "Defines actions to run when the alarm control panel is disarmed. Receives variable `code`.",
          "arm_away": "Defines actions to run when the alarm control panel is armed to `arm_away`. Receives variable `code`.",
          "arm_custom_bypass": "Defines actions to run when the alarm control panel is armed to `arm_custom_bypass`. Receives variable `code`.",
          "arm_home": "Defines actions to run when the alarm control panel is armed to `arm_home`. Receives variable `code`.",
          "arm_night": "Defines actions to run when the alarm control panel is armed to `arm_night`. Receives variable `code`.",
          "arm_vacation": "Defines actions to run when the alarm control panel is armed to `arm_vacation`. Receives variable `code`.",
          "trigger": "Defines actions to run when the alarm control panel is triggered. Receives variable `code`.",
          "code_arm_required": "If true, the code is required to arm the alarm.",
          "code_format": "One of `number`, `text` or `no_code`. Format for the code used to arm/disarm the alarm."
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "Template alarm control panel"
      },
      "binary_sensor": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "device_class": "[%key:component::template::common::device_class%]",
          "name": "[%key:common::config_flow::data::name%]",
          "state": "[%key:component::template::common::state%]"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "state": "The sensor is `on` if the template evaluates as `True`, `yes`, `on`, `enable` or a positive number. Any other value will render it as `off`."
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "Template binary sensor"
      },
      "button": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "device_class": "[%key:component::template::common::device_class%]",
          "name": "[%key:common::config_flow::data::name%]",
          "press": "Actions on press"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "press": "Defines actions to run when button is pressed."
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "Template button"
      },
      "cover": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "device_class": "[%key:component::template::common::device_class%]",
          "name": "[%key:common::config_flow::data::name%]",
          "state": "[%key:component::template::common::state%]",
          "open_cover": "Actions on open",
          "close_cover": "Actions on close",
          "stop_cover": "Actions on stop",
          "position": "Position",
          "set_cover_position": "Actions on set position"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "state": "Defines a template to get the state of the cover. Valid output values from the template are `open`, `opening`, `closing` and `closed` which are directly mapped to the corresponding states.  If both a state and a position are specified, only `opening` and `closing` are set from the state template.",
          "open_cover": "Defines actions to run when the cover is opened.",
          "close_cover": "Defines actions to run when the cover is closed.",
          "stop_cover": "Defines actions to run when the cover is stopped.",
          "position": "Defines a template to get the position of the cover. Value values are numbers between `0` (`closed`) and `100` (`open`).",
          "set_cover_position": "Defines actions to run when the cover is given a `set_cover_position` command. Receives variable `position`."
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "Template cover"
      },
      "fan": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "name": "[%key:common::config_flow::data::name%]",
          "state": "[%key:component::template::common::state%]",
          "turn_off": "[%key:component::template::common::turn_off%]",
          "turn_on": "[%key:component::template::common::turn_on%]",
          "percentage": "Percentage",
          "set_percentage": "Actions on set percentage",
          "speed_count": "Speed count"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "state": "The fan is `on` if the template evaluates as `True`, `yes`, `on`, `enable` or a positive number. Any other value will render it as `off`.",
          "turn_off": "Defines actions to run when the fan is turned off.",
          "turn_on": "Defines actions to run when the fan is turned on. Receives variables `percentage` and/or `preset_mode`.",
          "percentage": "Defines a template to get the speed percentage of the fan.",
          "set_percentage": "Defines actions to run when the fan is given a speed percentage command.  Receives variable `percentage`.",
          "speed_count": "The number of speeds the fan supports. Used to calculate the percentage step for the `fan.increase_speed` and `fan.decrease_speed` actions."
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "Template fan"
      },
      "image": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "name": "[%key:common::config_flow::data::name%]",
          "url": "[%key:common::config_flow::data::url%]",
          "verify_ssl": "[%key:common::config_flow::data::verify_ssl%]"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "url": "Defines a template to get the URL on which the image is served.",
          "verify_ssl": "Enable or disable SSL certificate verification. Disable to use an http URL, or if you have a self-signed SSL certificate and haven’t installed the CA certificate to enable verification."
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "Template image"
      },
      "light": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "name": "[%key:common::config_flow::data::name%]",
          "state": "[%key:component::template::common::state%]",
          "turn_off": "[%key:component::template::common::turn_off%]",
          "turn_on": "[%key:component::template::common::turn_on%]",
          "level": "Brightness level",
          "set_level": "Actions on set level",
          "hs": "HS color",
          "set_hs": "Actions on set HS color",
          "temperature": "Color temperature",
          "set_temperature": "Actions on set color temperature"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "state": "The light is `on` if the template evaluates as `True`, `yes`, `on`, `enable` or a positive number. Any other value will render it as `off`.",
          "turn_off": "Defines actions to run when the light is turned off.",
          "turn_on": "Defines actions to run when the light is turned on.",
          "level": "Defines a template to get the brightness of the light. Valid values are 0 to 255.",
          "set_level": "Defines actions to run when the light is given a brightness command. The script will only be called if the `turn_on` call only has `brightness`, and optionally `transition`. Receives variables `brightness` and, optionally, `transition`.",
          "hs": "Defines a template to get the HS color of the light. Must render a tuple (hue, saturation).",
          "set_hs": "Defines actions to run when the light is given a hs color command. Available variables: `hs` as a tuple, `h` and `s`.",
          "temperature": "Defines a template to get the color temperature of the light.",
          "set_temperature": "Defines actions to run when the light is given a color temperature command. Receives variable `color_temp_kelvin`. May also receive variables `brightness` and/or `transition`."
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "Template light"
      },
      "lock": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "name": "[%key:common::config_flow::data::name%]",
          "state": "[%key:component::template::common::state%]",
          "lock": "Actions on lock",
          "unlock": "Actions on unlock",
          "code_format": "[%key:component::template::common::code_format%]",
          "open": "Actions on open"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "state": "Defines a template to set the state of the lock.  The lock is locked if the template evaluates to `True`, `true`, `on`, or `locked`.  The lock is unlocked if the template evaluates to `False`, `false`, `off`, or `unlocked`.  Other valid states are `jammed`, `opening`, `locking`, `open`, and `unlocking`.",
          "lock": "Defines actions to run when the lock is locked.",
          "unlock": "Defines actions to run when the lock is unlocked.",
          "code_format": "Defines a template to get the `code_format` attribute of the lock.",
          "open": "Defines actions to run when the lock is opened."
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "Template lock"
      },
      "number": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "name": "[%key:common::config_flow::data::name%]",
          "state": "[%key:component::template::common::state%]",
          "step": "Step value",
          "set_value": "Actions on set value",
          "max": "Maximum value",
          "min": "Minimum value",
          "unit_of_measurement": "[%key:component::template::common::unit_of_measurement%]"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "state": "Template for the number's current value.",
          "step": "Defines the number's increment/decrement step.",
          "set_value": "Defines actions to run when the number is set to a value. Receives variable `value`.",
          "max": "Defines the number's maximum value.",
          "min": "Defines the number's minimum value.",
          "unit_of_measurement": "Defines the unit of measurement of the number, if any."
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "Template number"
      },
      "select": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "name": "[%key:common::config_flow::data::name%]",
          "state": "[%key:component::template::common::state%]",
          "select_option": "Actions on select",
          "options": "Available options"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "state": "Template for the select’s current value.",
          "select_option": "Defines actions to run when an `option` from the `options` list is selected. Receives variable `option`.",
          "options": "Template for the select’s available options."
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "Template select"
      },
      "sensor": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "device_class": "[%key:component::template::common::device_class%]",
          "name": "[%key:common::config_flow::data::name%]",
          "state_class": "[%key:component::sensor::entity_component::_::state_attributes::state_class::name%]",
          "state": "[%key:component::template::common::state%]",
          "unit_of_measurement": "[%key:component::template::common::unit_of_measurement%]"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "state": "Defines a template to get the state of the sensor. If the sensor is numeric, i.e. it has a `state_class` or a `unit_of_measurement`, the state template must render to a number or to `none`. The state template must not render to a string, including `unknown` or `unavailable`. An `availability` template may be defined to suppress rendering of the state template.",
          "unit_of_measurement": "Defines the unit of measurement for the sensor, if any. This will also display the value based on the number format setting in the user profile and influence the graphical presentation in the history visualization as a continuous value."
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "Template sensor"
      },
      "user": {
        "description": "This helper allows you to create helper entities that define their state using a template.",
        "menu_options": {
          "alarm_control_panel": "Template an alarm control panel",
          "binary_sensor": "Template a binary sensor",
          "button": "Template a button",
          "cover": "Template a cover",
          "fan": "Template a fan",
          "image": "Template an image",
          "light": "Template a light",
          "lock": "Template a lock",
          "number": "Template a number",
          "select": "Template a select",
          "sensor": "Template a sensor",
          "switch": "Template a switch",
          "vacuum": "Template a vacuum"
        },
        "title": "Template helper"
      },
      "switch": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "name": "[%key:common::config_flow::data::name%]",
          "turn_off": "[%key:component::template::common::turn_off%]",
          "turn_on": "[%key:component::template::common::turn_on%]",
          "value_template": "[%key:component::template::common::state%]"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "value_template": "Defines a template to set the state of the switch. If not defined, the switch will optimistically assume all commands are successful.",
          "turn_off": "Defines actions to run when the switch is turned off.",
          "turn_on": "Defines actions to run when the switch is turned on."
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "Template switch"
      },
      "vacuum": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "name": "[%key:common::config_flow::data::name%]",
          "state": "[%key:component::template::common::state%]",
          "start": "Actions on start",
          "fan_speed": "Fan speed",
          "fan_speeds": "Fan speeds",
          "set_fan_speed": "Actions on set fan speed",
          "stop": "Actions on stop",
          "pause": "Actions on pause",
          "return_to_base": "Actions on return to dock",
          "clean_spot": "Actions on clean spot",
          "locate": "Actions on locate"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "state": "Defines a template to get the state of the vacuum. Valid values are `cleaning`, `docked`, `idle`, `paused`, `returning`, and `error`.",
          "start": "Defines actions to run when the vacuum is started.",
          "fan_speed": "Defines a template to get the fan speed of the vacuum.",
          "fan_speeds": "List of fan speeds supported by the vacuum.",
          "set_fan_speed": "Defines actions to run when the vacuum is given a command to set the fan speed. Receives variable `fan_speed`.",
          "stop": "Defines actions to run when the vacuum is stopped.",
          "pause": "Defines actions to run when the vacuum is paused.",
          "return_to_base": "Defines actions to run when the vacuum is given a 'Return to dock' command.",
          "clean_spot": "Defines actions to run when the vacuum is given a 'Clean spot' command.",
          "locate": "Defines actions to run when the vacuum is given a 'Locate' command."
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "Template vacuum"
      }
    }
  },
  "issues": {
    "deprecated_battery_level": {
      "title": "Deprecated battery level option in {entity_name}",
      "description": "The template vacuum options `battery_level` and `battery_level_template` are being removed in 2026.8.\n\nPlease remove the `battery_level` or `battery_level_template` option from the YAML configuration for {entity_id} ({entity_name})."
    }
  },
  "options": {
    "step": {
      "alarm_control_panel": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "value_template": "[%key:component::template::common::state%]",
          "disarm": "[%key:component::template::config::step::alarm_control_panel::data::disarm%]",
          "arm_away": "[%key:component::template::config::step::alarm_control_panel::data::arm_away%]",
          "arm_custom_bypass": "[%key:component::template::config::step::alarm_control_panel::data::arm_custom_bypass%]",
          "arm_home": "[%key:component::template::config::step::alarm_control_panel::data::arm_home%]",
          "arm_night": "[%key:component::template::config::step::alarm_control_panel::data::arm_night%]",
          "arm_vacation": "[%key:component::template::config::step::alarm_control_panel::data::arm_vacation%]",
          "trigger": "[%key:component::template::config::step::alarm_control_panel::data::trigger%]",
          "code_arm_required": "[%key:component::template::config::step::alarm_control_panel::data::code_arm_required%]",
          "code_format": "[%key:component::template::common::code_format%]"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "value_template": "[%key:component::template::config::step::alarm_control_panel::data_description::value_template%]",
          "disarm": "[%key:component::template::config::step::alarm_control_panel::data_description::disarm%]",
          "arm_away": "[%key:component::template::config::step::alarm_control_panel::data_description::arm_away%]",
          "arm_custom_bypass": "[%key:component::template::config::step::alarm_control_panel::data_description::arm_custom_bypass%]",
          "arm_home": "[%key:component::template::config::step::alarm_control_panel::data_description::arm_home%]",
          "arm_night": "[%key:component::template::config::step::alarm_control_panel::data_description::arm_night%]",
          "arm_vacation": "[%key:component::template::config::step::alarm_control_panel::data_description::arm_vacation%]",
          "trigger": "[%key:component::template::config::step::alarm_control_panel::data_description::trigger%]",
          "code_arm_required": "[%key:component::template::config::step::alarm_control_panel::data_description::code_arm_required%]",
          "code_format": "[%key:component::template::config::step::alarm_control_panel::data_description::code_format%]"
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "[%key:component::template::config::step::alarm_control_panel::title%]"
      },
      "binary_sensor": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "state": "[%key:component::template::common::state%]"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "state": "[%key:component::template::config::step::binary_sensor::data_description::state%]"
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "[%key:component::template::config::step::binary_sensor::title%]"
      },
      "button": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "press": "[%key:component::template::config::step::button::data::press%]"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "press": "[%key:component::template::config::step::button::data_description::press%]"
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "[%key:component::template::config::step::button::title%]"
      },

      "cover": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "state": "[%key:component::template::common::state%]",
          "open_cover": "[%key:component::template::config::step::cover::data::open_cover%]",
          "close_cover": "[%key:component::template::config::step::cover::data::close_cover%]",
          "stop_cover": "[%key:component::template::config::step::cover::data::stop_cover%]",
          "position": "[%key:component::template::config::step::cover::data::position%]",
          "set_cover_position": "[%key:component::template::config::step::cover::data::set_cover_position%]"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "state": "[%key:component::template::config::step::cover::data_description::state%]",
          "open_cover": "[%key:component::template::config::step::cover::data_description::open_cover%]",
          "close_cover": "[%key:component::template::config::step::cover::data_description::close_cover%]",
          "stop_cover": "[%key:component::template::config::step::cover::data_description::stop_cover%]",
          "position": "[%key:component::template::config::step::cover::data_description::position%]",
          "set_cover_position": "[%key:component::template::config::step::cover::data_description::set_cover_position%]"
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "[%key:component::template::config::step::cover::title%]"
      },
      "fan": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "state": "[%key:component::template::common::state%]",
          "turn_off": "[%key:component::template::common::turn_off%]",
          "turn_on": "[%key:component::template::common::turn_on%]",
          "percentage": "[%key:component::template::config::step::fan::data::percentage%]",
          "set_percentage": "[%key:component::template::config::step::fan::data::set_percentage%]",
          "speed_count": "[%key:component::template::config::step::fan::data::speed_count%]"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "state": "[%key:component::template::config::step::fan::data_description::state%]",
          "turn_off": "[%key:component::template::config::step::fan::data_description::turn_off%]",
          "turn_on": "[%key:component::template::config::step::fan::data_description::turn_on%]",
          "percentage": "[%key:component::template::config::step::fan::data_description::percentage%]",
          "set_percentage": "[%key:component::template::config::step::fan::data_description::set_percentage%]",
          "speed_count": "[%key:component::template::config::step::fan::data_description::speed_count%]"
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "[%key:component::template::config::step::fan::title%]"
      },
      "image": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "url": "[%key:common::config_flow::data::url%]",
          "verify_ssl": "[%key:common::config_flow::data::verify_ssl%]"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "url": "[%key:component::template::config::step::image::data_description::url%]",
          "verify_ssl": "[%key:component::template::config::step::image::data_description::verify_ssl%]"
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "[%key:component::template::config::step::image::title%]"
      },
      "light": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "name": "[%key:common::config_flow::data::name%]",
          "state": "[%key:component::template::common::state%]",
          "turn_off": "[%key:component::template::common::turn_off%]",
          "turn_on": "[%key:component::template::common::turn_on%]",
          "level": "[%key:component::template::config::step::light::data::level%]",
          "set_level": "[%key:component::template::config::step::light::data::set_level%]",
          "hs": "[%key:component::template::config::step::light::data::hs%]",
          "set_hs": "[%key:component::template::config::step::light::data::set_hs%]",
          "temperature": "[%key:component::template::config::step::light::data::temperature%]",
          "set_temperature": "[%key:component::template::config::step::light::data::set_temperature%]"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "state": "[%key:component::template::config::step::light::data_description::state%]",
          "turn_off": "[%key:component::template::config::step::light::data_description::turn_off%]",
          "turn_on": "[%key:component::template::config::step::light::data_description::turn_on%]",
          "level": "[%key:component::template::config::step::light::data_description::level%]",
          "set_level": "[%key:component::template::config::step::light::data_description::set_level%]",
          "hs": "[%key:component::template::config::step::light::data_description::hs%]",
          "set_hs": "[%key:component::template::config::step::light::data_description::set_hs%]",
          "temperature": "[%key:component::template::config::step::light::data_description::temperature%]",
          "set_temperature": "[%key:component::template::config::step::light::data_description::set_temperature%]"
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "[%key:component::template::config::step::light::title%]"
      },
      "lock": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "state": "[%key:component::template::common::state%]",
          "lock": "[%key:component::template::config::step::lock::data::lock%]",
          "unlock": "[%key:component::template::config::step::lock::data::unlock%]",
          "code_format": "[%key:component::template::common::code_format%]",
          "open": "[%key:component::template::config::step::lock::data::open%]"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "state": "[%key:component::template::config::step::lock::data_description::state%]",
          "lock": "[%key:component::template::config::step::lock::data_description::lock%]",
          "unlock": "[%key:component::template::config::step::lock::data_description::unlock%]",
          "code_format": "[%key:component::template::config::step::lock::data_description::code_format%]",
          "open": "[%key:component::template::config::step::lock::data_description::open%]"
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "[%key:component::template::config::step::lock::title%]"
      },
      "number": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "name": "[%key:common::config_flow::data::name%]",
          "state": "[%key:component::template::common::state%]",
          "step": "[%key:component::template::config::step::number::data::step%]",
          "set_value": "[%key:component::template::config::step::number::data::set_value%]",
          "max": "[%key:component::template::config::step::number::data::max%]",
          "min": "[%key:component::template::config::step::number::data::min%]"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "state": "[%key:component::template::config::step::number::data_description::state%]",
          "step": "[%key:component::template::config::step::number::data_description::step%]",
          "set_value": "[%key:component::template::config::step::number::data_description::set_value%]",
          "max": "[%key:component::template::config::step::number::data_description::max%]",
          "min": "[%key:component::template::config::step::number::data_description::min%]"
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "[%key:component::template::config::step::number::title%]"
      },
      "select": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "name": "[%key:common::config_flow::data::name%]",
          "state": "[%key:component::template::common::state%]",
          "select_option": "[%key:component::template::config::step::select::data::select_option%]",
          "options": "[%key:component::template::config::step::select::data::options%]"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "state": "[%key:component::template::config::step::select::data_description::state%]",
          "select_option": "[%key:component::template::config::step::select::data_description::select_option%]",
          "options": "[%key:component::template::config::step::select::data_description::options%]"
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "[%key:component::template::config::step::select::title%]"
      },
      "sensor": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "device_class": "[%key:component::template::common::device_class%]",
          "state_class": "[%key:component::sensor::entity_component::_::state_attributes::state_class::name%]",
          "state": "[%key:component::template::common::state%]",
          "unit_of_measurement": "[%key:component::template::common::unit_of_measurement%]"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "state": "[%key:component::template::config::step::sensor::data_description::state%]",
          "unit_of_measurement": "[%key:component::template::config::step::sensor::data_description::unit_of_measurement%]"
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "[%key:component::template::config::step::sensor::title%]"
      },
      "switch": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "name": "[%key:common::config_flow::data::name%]",
          "value_template": "[%key:component::template::common::state%]",
          "turn_off": "[%key:component::template::common::turn_off%]",
          "turn_on": "[%key:component::template::common::turn_on%]"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "value_template": "[%key:component::template::config::step::switch::data_description::value_template%]",
          "turn_off": "[%key:component::template::config::step::switch::data_description::turn_off%]",
          "turn_on": "[%key:component::template::config::step::switch::data_description::turn_on%]"
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "[%key:component::template::config::step::switch::title%]"
      },
      "vacuum": {
        "data": {
          "device_id": "[%key:common::config_flow::data::device%]",
          "name": "[%key:common::config_flow::data::name%]",
          "state": "[%key:component::template::common::state%]",
          "start": "[%key:component::template::config::step::vacuum::data::start%]",
          "fan_speed": "[%key:component::template::config::step::vacuum::data::fan_speed%]",
          "fan_speeds": "[%key:component::template::config::step::vacuum::data::fan_speeds%]",
          "set_fan_speed": "[%key:component::template::config::step::vacuum::data::set_fan_speed%]",
          "stop": "[%key:component::template::config::step::vacuum::data::stop%]",
          "pause": "[%key:component::template::config::step::vacuum::data::pause%]",
          "return_to_base": "[%key:component::template::config::step::vacuum::data::return_to_base%]",
          "clean_spot": "[%key:component::template::config::step::vacuum::data::clean_spot%]",
          "locate": "[%key:component::template::config::step::vacuum::data::locate%]"
        },
        "data_description": {
          "device_id": "[%key:component::template::common::device_id_description%]",
          "state": "[%key:component::template::config::step::vacuum::data_description::state%]",
          "start": "[%key:component::template::config::step::vacuum::data_description::start%]",
          "fan_speed": "[%key:component::template::config::step::vacuum::data_description::fan_speed%]",
          "fan_speeds": "[%key:component::template::config::step::vacuum::data_description::fan_speeds%]",
          "set_fan_speed": "[%key:component::template::config::step::vacuum::data_description::set_fan_speed%]",
          "stop": "[%key:component::template::config::step::vacuum::data_description::stop%]",
          "pause": "[%key:component::template::config::step::vacuum::data_description::pause%]",
          "return_to_base": "[%key:component::template::config::step::vacuum::data_description::return_to_base%]",
          "clean_spot": "[%key:component::template::config::step::vacuum::data_description::clean_spot%]",
          "locate": "[%key:component::template::config::step::vacuum::data_description::locate%]"
        },
        "sections": {
          "advanced_options": {
            "name": "[%key:component::template::common::advanced_options%]",
            "data": {
              "availability": "[%key:component::template::common::availability%]"
            },
            "data_description": {
              "availability": "[%key:component::template::common::availability_description%]"
            }
          }
        },
        "title": "[%key:component::template::config::step::vacuum::title%]"
      }
    }
  },
  "selector": {
    "alarm_control_panel_code_format": {
      "options": {
        "no_code": "No code format",
        "number": "Number",
        "text": "Text"
      }
    },
    "binary_sensor_device_class": {
      "options": {
        "battery": "[%key:component::binary_sensor::entity_component::battery::name%]",
        "battery_charging": "[%key:component::binary_sensor::entity_component::battery_charging::name%]",
        "carbon_monoxide": "[%key:component::binary_sensor::entity_component::carbon_monoxide::name%]",
        "cold": "[%key:component::binary_sensor::entity_component::cold::name%]",
        "connectivity": "[%key:component::binary_sensor::entity_component::connectivity::name%]",
        "door": "[%key:component::binary_sensor::entity_component::door::name%]",
        "garage_door": "[%key:component::binary_sensor::entity_component::garage_door::name%]",
        "gas": "[%key:component::binary_sensor::entity_component::gas::name%]",
        "heat": "[%key:component::binary_sensor::entity_component::heat::name%]",
        "light": "[%key:component::binary_sensor::entity_component::light::name%]",
        "lock": "[%key:component::binary_sensor::entity_component::lock::name%]",
        "moisture": "[%key:component::binary_sensor::entity_component::moisture::name%]",
        "motion": "[%key:component::binary_sensor::entity_component::motion::name%]",
        "moving": "[%key:component::binary_sensor::entity_component::moving::name%]",
        "occupancy": "[%key:component::binary_sensor::entity_component::occupancy::name%]",
        "opening": "[%key:component::binary_sensor::entity_component::opening::name%]",
        "plug": "[%key:component::binary_sensor::entity_component::plug::name%]",
        "power": "[%key:component::binary_sensor::entity_component::power::name%]",
        "presence": "[%key:component::binary_sensor::entity_component::presence::name%]",
        "problem": "[%key:component::binary_sensor::entity_component::problem::name%]",
        "running": "[%key:component::binary_sensor::entity_component::running::name%]",
        "safety": "[%key:component::binary_sensor::entity_component::safety::name%]",
        "smoke": "[%key:component::binary_sensor::entity_component::smoke::name%]",
        "sound": "[%key:component::binary_sensor::entity_component::sound::name%]",
        "tamper": "[%key:component::binary_sensor::entity_component::tamper::name%]",
        "update": "[%key:component::binary_sensor::entity_component::update::name%]",
        "vibration": "[%key:component::binary_sensor::entity_component::vibration::name%]",
        "window": "[%key:component::binary_sensor::entity_component::window::name%]"
      }
    },
    "button_device_class": {
      "options": {
        "identify": "[%key:component::button::entity_component::identify::name%]",
        "restart": "[%key:common::action::restart%]",
        "update": "[%key:component::button::entity_component::update::name%]"
      }
    },
    "cover_device_class": {
      "options": {
        "awning": "[%key:component::cover::entity_component::awning::name%]",
        "blind": "[%key:component::cover::entity_component::blind::name%]",
        "curtain": "[%key:component::cover::entity_component::curtain::name%]",
        "damper": "[%key:component::cover::entity_component::damper::name%]",
        "door": "[%key:component::cover::entity_component::door::name%]",
        "garage": "[%key:component::cover::entity_component::garage::name%]",
        "gate": "[%key:component::cover::entity_component::gate::name%]",
        "shade": "[%key:component::cover::entity_component::shade::name%]",
        "shutter": "[%key:component::cover::entity_component::shutter::name%]",
        "window": "[%key:component::cover::entity_component::window::name%]"
      }
    },
    "sensor_device_class": {
      "options": {
        "absolute_humidity": "[%key:component::sensor::entity_component::absolute_humidity::name%]",
        "apparent_power": "[%key:component::sensor::entity_component::apparent_power::name%]",
        "aqi": "[%key:component::sensor::entity_component::aqi::name%]",
        "area": "[%key:component::sensor::entity_component::area::name%]",
        "atmospheric_pressure": "[%key:component::sensor::entity_component::atmospheric_pressure::name%]",
        "battery": "[%key:component::sensor::entity_component::battery::name%]",
        "blood_glucose_concentration": "[%key:component::sensor::entity_component::blood_glucose_concentration::name%]",
        "carbon_dioxide": "[%key:component::sensor::entity_component::carbon_dioxide::name%]",
        "carbon_monoxide": "[%key:component::sensor::entity_component::carbon_monoxide::name%]",
        "conductivity": "[%key:component::sensor::entity_component::conductivity::name%]",
        "current": "[%key:component::sensor::entity_component::current::name%]",
        "data_rate": "[%key:component::sensor::entity_component::data_rate::name%]",
        "data_size": "[%key:component::sensor::entity_component::data_size::name%]",
        "date": "[%key:component::sensor::entity_component::date::name%]",
        "distance": "[%key:component::sensor::entity_component::distance::name%]",
        "duration": "[%key:component::sensor::entity_component::duration::name%]",
        "energy": "[%key:component::sensor::entity_component::energy::name%]",
        "energy_distance": "[%key:component::sensor::entity_component::energy_distance::name%]",
        "energy_storage": "[%key:component::sensor::entity_component::energy_storage::name%]",
        "frequency": "[%key:component::sensor::entity_component::frequency::name%]",
        "gas": "[%key:component::sensor::entity_component::gas::name%]",
        "humidity": "[%key:component::sensor::entity_component::humidity::name%]",
        "illuminance": "[%key:component::sensor::entity_component::illuminance::name%]",
        "irradiance": "[%key:component::sensor::entity_component::irradiance::name%]",
        "moisture": "[%key:component::sensor::entity_component::moisture::name%]",
        "monetary": "[%key:component::sensor::entity_component::monetary::name%]",
        "nitrogen_dioxide": "[%key:component::sensor::entity_component::nitrogen_dioxide::name%]",
        "nitrogen_monoxide": "[%key:component::sensor::entity_component::nitrogen_monoxide::name%]",
        "nitrous_oxide": "[%key:component::sensor::entity_component::nitrous_oxide::name%]",
        "ozone": "[%key:component::sensor::entity_component::ozone::name%]",
        "ph": "[%key:component::sensor::entity_component::ph::name%]",
        "pm1": "[%key:component::sensor::entity_component::pm1::name%]",
        "pm10": "[%key:component::sensor::entity_component::pm10::name%]",
        "pm25": "[%key:component::sensor::entity_component::pm25::name%]",
        "power": "[%key:component::sensor::entity_component::power::name%]",
        "power_factor": "[%key:component::sensor::entity_component::power_factor::name%]",
        "precipitation": "[%key:component::sensor::entity_component::precipitation::name%]",
        "precipitation_intensity": "[%key:component::sensor::entity_component::precipitation_intensity::name%]",
        "pressure": "[%key:component::sensor::entity_component::pressure::name%]",
        "reactive_energy": "[%key:component::sensor::entity_component::reactive_energy::name%]",
        "reactive_power": "[%key:component::sensor::entity_component::reactive_power::name%]",
        "signal_strength": "[%key:component::sensor::entity_component::signal_strength::name%]",
        "sound_pressure": "[%key:component::sensor::entity_component::sound_pressure::name%]",
        "speed": "[%key:component::sensor::entity_component::speed::name%]",
        "sulphur_dioxide": "[%key:component::sensor::entity_component::sulphur_dioxide::name%]",
        "temperature": "[%key:component::sensor::entity_component::temperature::name%]",
        "timestamp": "[%key:component::sensor::entity_component::timestamp::name%]",
        "volatile_organic_compounds": "[%key:component::sensor::entity_component::volatile_organic_compounds::name%]",
        "volatile_organic_compounds_parts": "[%key:component::sensor::entity_component::volatile_organic_compounds_parts::name%]",
        "voltage": "[%key:component::sensor::entity_component::voltage::name%]",
        "volume": "[%key:component::sensor::entity_component::volume::name%]",
        "volume_flow_rate": "[%key:component::sensor::entity_component::volume_flow_rate::name%]",
        "volume_storage": "[%key:component::sensor::entity_component::volume_storage::name%]",
        "water": "[%key:component::sensor::entity_component::water::name%]",
        "weight": "[%key:component::sensor::entity_component::weight::name%]",
        "wind_direction": "[%key:component::sensor::entity_component::wind_direction::name%]",
        "wind_speed": "[%key:component::sensor::entity_component::wind_speed::name%]"
      }
    },
    "sensor_state_class": {
      "options": {
        "measurement": "[%key:component::sensor::entity_component::_::state_attributes::state_class::state::measurement%]",
        "measurement_angle": "[%key:component::sensor::entity_component::_::state_attributes::state_class::state::measurement_angle%]",
        "total": "[%key:component::sensor::entity_component::_::state_attributes::state_class::state::total%]",
        "total_increasing": "[%key:component::sensor::entity_component::_::state_attributes::state_class::state::total_increasing%]"
      }
    },
    "sensor_unit_of_measurement": {
      "options": {
        "none": "No unit of measurement"
      }
    }
  },
  "services": {
    "reload": {
      "name": "[%key:common::action::reload%]",
      "description": "Reloads template entities from the YAML-configuration."
    }
  },
  "exceptions": {
    "code_format_template_error": {
      "message": "Error evaluating code format template \"{code_format_template}\" for {entity_id}: {cause}"
    }
  }
}
