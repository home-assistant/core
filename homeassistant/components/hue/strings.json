{
  "config": {
    "step": {
      "init": {
        "title": "Pick Hue bridge",
        "data": {
          "host": "[%key:common::config_flow::data::host%]"
        },
        "data_description": {
          "host": "The hostname or IP address of your Hue bridge."
        }
      },
      "manual": {
        "title": "Manual configure a Hue bridge",
        "data": {
          "host": "[%key:common::config_flow::data::host%]"
        },
        "data_description": {
          "host": "[%key:component::hue::config::step::init::data_description::host%]"
        }
      },
      "link": {
        "title": "Link Hub",
        "description": "Press the button on the bridge to register Philips Hue with Home Assistant.\n\n![Location of button on bridge](/static/images/config_philips_hue.jpg)"
      }
    },
    "error": {
      "register_failed": "Failed to register, please try again",
      "linking": "[%key:common::config_flow::error::unknown%]"
    },
    "abort": {
      "discover_timeout": "Unable to discover Hue bridges",
      "no_bridges": "No Philips Hue bridges discovered",
      "all_configured": "All Philips Hue bridges are already configured",
      "unknown": "[%key:common::config_flow::error::unknown%]",
      "cannot_connect": "[%key:common::config_flow::error::cannot_connect%]",
      "already_configured": "[%key:common::config_flow::abort::already_configured_device%]",
      "already_in_progress": "[%key:common::config_flow::abort::already_in_progress%]",
      "not_hue_bridge": "Not a Hue bridge",
      "invalid_host": "[%key:common::config_flow::error::invalid_host%]"
    }
  },
  "device_automation": {
    "trigger_subtype": {
      "button_1": "First button",
      "button_2": "Second button",
      "button_3": "Third button",
      "button_4": "Fourth button",
      "double_buttons_1_3": "First and Third buttons",
      "double_buttons_2_4": "Second and Fourth buttons",
      "dim_down": "Dim down",
      "dim_up": "Dim up",
      "turn_off": "[%key:common::action::turn_off%]",
      "turn_on": "[%key:common::action::turn_on%]",
      "1": "[%key:component::hue::device_automation::trigger_subtype::button_1%]",
      "2": "[%key:component::hue::device_automation::trigger_subtype::button_2%]",
      "3": "[%key:component::hue::device_automation::trigger_subtype::button_3%]",
      "4": "[%key:component::hue::device_automation::trigger_subtype::button_4%]",
      "clock_wise": "Rotation clockwise",
      "counter_clock_wise": "Rotation counter-clockwise"
    },
    "trigger_type": {
      "remote_button_long_release": "\"{subtype}\" released after long press",
      "remote_button_short_press": "\"{subtype}\" pressed",
      "remote_button_short_release": "\"{subtype}\" released",
      "remote_double_button_long_press": "Both \"{subtype}\" released after long press",
      "remote_double_button_short_press": "Both \"{subtype}\" released",
      "initial_press": "\"{subtype}\" pressed initially",
      "repeat": "\"{subtype}\" held down",
      "short_release": "\"{subtype}\" released after short press",
      "long_release": "[%key:component::hue::device_automation::trigger_type::remote_button_long_release%]",
      "double_short_release": "[%key:component::hue::device_automation::trigger_type::remote_double_button_short_press%]",
      "start": "[%key:component::hue::device_automation::trigger_type::initial_press%]"
    }
  },
  "entity": {
    "event": {
      "button": {
        "name": "Button {button_id}",
        "state_attributes": {
          "event_type": {
            "state": {
              "initial_press": "Initial press",
              "repeat": "Repeat",
              "short_release": "Short press",
              "long_press": "Long press",
              "long_release": "Long release",
              "double_short_release": "Double press"
            }
          }
        }
      },
      "rotary": {
        "name": "Rotary",
        "state_attributes": {
          "event_type": {
            "state": {
              "clock_wise": "Clockwise",
              "counter_clock_wise": "Counter clockwise"
            }
          }
        }
      }
    },
    "sensor": {
      "zigbee_connectivity": {
        "name": "Zigbee connectivity",
        "state": {
          "connected": "[%key:common::state::connected%]",
          "disconnected": "[%key:common::state::disconnected%]",
          "connectivity_issue": "Connectivity issue",
          "unidirectional_incoming": "Unidirectional incoming"
        }
      }
    },
    "switch": {
      "motion_sensor_enabled": {
        "name": "Motion sensor enabled"
      },
      "light_sensor_enabled": {
        "name": "Light sensor enabled"
      }
    }
  },
  "options": {
    "step": {
      "init": {
        "data": {
          "allow_hue_groups": "Allow Hue groups",
          "allow_hue_scenes": "Allow Hue scenes",
          "allow_unreachable": "Allow unreachable bulbs to report their state correctly",
          "ignore_availability": "Ignore connectivity status for the given devices"
        }
      }
    }
  },
  "services": {
    "hue_activate_scene": {
      "name": "Activate scene",
      "description": "Activates a hue scene stored in the hue hub.",
      "fields": {
        "group_name": {
          "name": "Group",
          "description": "Name of hue group/room from the hue app."
        },
        "scene_name": {
          "name": "Scene",
          "description": "Name of hue scene from the hue app."
        },
        "dynamic": {
          "name": "Dynamic",
          "description": "Enable dynamic mode of the scene (V2 bridges and supported scenes only)."
        }
      }
    },
    "activate_scene": {
      "name": "Activate Hue scene",
      "description": "Activates a Hue scene with more control over the options.",
      "fields": {
        "transition": {
          "name": "Transition",
          "description": "Transition duration it takes to bring devices to the state defined in the scene."
        },
        "dynamic": {
          "name": "[%key:component::hue::services::hue_activate_scene::fields::dynamic::name%]",
          "description": "Enable dynamic mode of the scene."
        },
        "speed": {
          "name": "Speed",
          "description": "Speed of dynamic palette for this scene."
        },
        "brightness": {
          "name": "Brightness",
          "description": "Set brightness for the scene."
        }
      }
    }
  }
}
