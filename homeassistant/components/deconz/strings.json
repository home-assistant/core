{
  "config": {
    "flow_title": "{host}",
    "step": {
      "user": {
        "data": {
          "host": "Select discovered deCONZ gateway"
        }
      },
      "manual_input": {
        "data": {
          "host": "[%key:common::config_flow::data::host%]",
          "port": "[%key:common::config_flow::data::port%]"
        },
        "data_description": {
          "host": "The hostname or IP address of your deCONZ host."
        }
      },
      "link": {
        "title": "Link with deCONZ",
        "description": "Unlock your deCONZ gateway to register with Home Assistant.\n\n1. Go to deCONZ Settings > Gateway > Advanced\n2. Press \"Authenticate app\" button"
      },
      "hassio_confirm": {
        "title": "deCONZ Zigbee gateway via Home Assistant add-on",
        "description": "Do you want to configure Home Assistant to connect to the deCONZ gateway provided by the add-on {addon}?"
      }
    },
    "error": {
      "linking_not_possible": "Couldn't link with the gateway",
      "no_key": "Couldn't get an API key"
    },
    "abort": {
      "already_configured": "Bridge is already configured",
      "already_in_progress": "[%key:common::config_flow::abort::already_in_progress%]",
      "no_bridges": "No deCONZ bridges discovered",
      "no_hardware_available": "No radio hardware connected to deCONZ",
      "updated_instance": "Updated deCONZ instance with new host address"
    }
  },
  "options": {
    "step": {
      "deconz_devices": {
        "data": {
          "allow_clip_sensor": "Allow deCONZ CLIP sensors",
          "allow_deconz_groups": "Allow deCONZ light groups",
          "allow_new_devices": "Allow automatic addition of new devices"
        },
        "description": "Configure visibility of deCONZ device types",
        "title": "deCONZ options"
      }
    }
  },
  "device_automation": {
    "trigger_type": {
      "remote_button_short_press": "\"{subtype}\" pressed",
      "remote_button_short_release": "\"{subtype}\" released",
      "remote_button_long_press": "\"{subtype}\" continuously pressed",
      "remote_button_long_release": "\"{subtype}\" released after long press",
      "remote_button_double_press": "\"{subtype}\" double clicked",
      "remote_button_triple_press": "\"{subtype}\" triple clicked",
      "remote_button_quadruple_press": "\"{subtype}\" quadruple clicked",
      "remote_button_quintuple_press": "\"{subtype}\" quintuple clicked",
      "remote_button_rotated": "Button rotated \"{subtype}\"",
      "remote_button_rotated_fast": "Button rotated fast \"{subtype}\"",
      "remote_button_rotation_stopped": "Button rotation \"{subtype}\" stopped",
      "remote_falling": "Device in free fall",
      "remote_awakened": "Device awakened",
      "remote_moved": "Device moved with \"{subtype}\" up",
      "remote_double_tap": "Device \"{subtype}\" double tapped",
      "remote_gyro_activated": "Device shaken",
      "remote_flip_90_degrees": "Device flipped 90 degrees",
      "remote_flip_180_degrees": "Device flipped 180 degrees",
      "remote_moved_any_side": "Device moved with any side up",
      "remote_double_tap_any_side": "Device double tapped on any side",
      "remote_turned_clockwise": "Device turned clockwise",
      "remote_turned_counter_clockwise": "Device turned counter clockwise",
      "remote_rotate_from_side_1": "Device rotated from \"side 1\" to \"{subtype}\"",
      "remote_rotate_from_side_2": "Device rotated from \"side 2\" to \"{subtype}\"",
      "remote_rotate_from_side_3": "Device rotated from \"side 3\" to \"{subtype}\"",
      "remote_rotate_from_side_4": "Device rotated from \"side 4\" to \"{subtype}\"",
      "remote_rotate_from_side_5": "Device rotated from \"side 5\" to \"{subtype}\"",
      "remote_rotate_from_side_6": "Device rotated from \"side 6\" to \"{subtype}\""
    },
    "trigger_subtype": {
      "turn_on": "[%key:common::action::turn_on%]",
      "turn_off": "[%key:common::action::turn_off%]",
      "dim_up": "Dim up",
      "dim_down": "Dim down",
      "left": "Left",
      "right": "Right",
      "open": "[%key:common::action::open%]",
      "close": "[%key:common::action::close%]",
      "both_buttons": "Both buttons",
      "top_buttons": "Top buttons",
      "bottom_buttons": "Bottom buttons",
      "button_1": "First button",
      "button_2": "Second button",
      "button_3": "Third button",
      "button_4": "Fourth button",
      "button_5": "Fifth button",
      "button_6": "Sixth button",
      "button_7": "Seventh button",
      "button_8": "Eighth button",
      "side_1": "Side 1",
      "side_2": "Side 2",
      "side_3": "Side 3",
      "side_4": "Side 4",
      "side_5": "Side 5",
      "side_6": "Side 6"
    }
  },
  "services": {
    "configure": {
      "name": "Configure",
      "description": "Configures attributes of either a device endpoint in deCONZ or the deCONZ service itself.",
      "fields": {
        "entity": {
          "name": "Entity",
          "description": "Represents a specific device endpoint in deCONZ."
        },
        "field": {
          "name": "[%key:common::config_flow::data::path%]",
          "description": "String representing a full path to deCONZ endpoint (when entity is not specified) or a subpath of the device path for the entity (when entity is specified)."
        },
        "data": {
          "name": "Configuration payload",
          "description": "JSON object with what data you want to alter."
        },
        "bridgeid": {
          "name": "Bridge identifier",
          "description": "Unique string for each deCONZ hardware. It can be found as part of the integration name. Useful if you run multiple deCONZ integrations."
        }
      }
    },
    "device_refresh": {
      "name": "Device refresh",
      "description": "Refreshes available devices from deCONZ.",
      "fields": {
        "bridgeid": {
          "name": "[%key:component::deconz::services::configure::fields::bridgeid::name%]",
          "description": "[%key:component::deconz::services::configure::fields::bridgeid::description%]"
        }
      }
    },
    "remove_orphaned_entries": {
      "name": "Remove orphaned entries",
      "description": "Cleans up device and entity registry entries orphaned by deCONZ.",
      "fields": {
        "bridgeid": {
          "name": "[%key:component::deconz::services::configure::fields::bridgeid::name%]",
          "description": "[%key:component::deconz::services::configure::fields::bridgeid::description%]"
        }
      }
    }
  }
}
