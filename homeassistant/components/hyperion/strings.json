{
  "config": {
    "step": {
      "user": {
        "data": {
          "host": "[%key:common::config_flow::data::host%]",
          "port": "[%key:common::config_flow::data::port%]"
        },
        "data_description": {
          "host": "The hostname or IP address of your Hyperion server."
        }
      },
      "auth": {
        "description": "Configure authorization to your Hyperion Ambilight server",
        "data": {
          "create_token": "Automatically create new token",
          "token": "Or provide pre-existing token"
        }
      },
      "create_token": {
        "description": "Choose **Submit** below to request a new authentication token. You will be redirected to the Hyperion UI to approve the request. Please verify the shown id is \"{auth_id}\"",
        "title": "Automatically create new authentication token"
      },
      "create_token_external": {
        "title": "Accept new token in Hyperion UI"
      },
      "confirm": {
        "description": "Do you want to add this Hyperion Ambilight to Home Assistant?\n\n**Host:** {host}\n**Port:** {port}\n**ID**: {id}",
        "title": "Confirm addition of Hyperion Ambilight service"
      }
    },
    "error": {
      "cannot_connect": "[%key:common::config_flow::error::cannot_connect%]",
      "invalid_access_token": "[%key:common::config_flow::error::invalid_access_token%]"
    },
    "abort": {
      "auth_required_error": "Failed to determine if authorization is required",
      "already_configured": "[%key:common::config_flow::abort::already_configured_service%]",
      "already_in_progress": "[%key:common::config_flow::abort::already_in_progress%]",
      "cannot_connect": "[%key:common::config_flow::error::cannot_connect%]",
      "auth_new_token_not_granted_error": "Newly created token was not approved on Hyperion UI",
      "auth_new_token_not_work_error": "Failed to authenticate using newly created token",
      "no_id": "The Hyperion Ambilight instance did not report its id",
      "reauth_successful": "[%key:common::config_flow::abort::reauth_successful%]"
    }
  },
  "options": {
    "step": {
      "init": {
        "data": {
          "priority": "Hyperion priority to use for colors and effects",
          "effect_show_list": "Hyperion effects to show"
        }
      }
    }
  },
  "entity": {
    "switch": {
      "all": {
        "name": "Component all"
      },
      "smoothing": {
        "name": "Component smoothing"
      },
      "blackbar_detection": {
        "name": "Component blackbar detection"
      },
      "forwarder": {
        "name": "Component forwarder"
      },
      "boblight_server": {
        "name": "Component boblight server"
      },
      "platform_capture": {
        "name": "Component platform capture"
      },
      "led_device": {
        "name": "Component LED device"
      },
      "usb_capture": {
        "name": "Component USB capture"
      }
    },
    "sensor": {
      "visible_priority": {
        "name": "Visible priority"
      }
    }
  }
}
