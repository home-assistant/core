name: CI
run-name: "${{ github.event_name == 'workflow_dispatch' && format('CI: {0}', github.ref_name) || '' }}"

# yamllint disable-line rule:truthy
on:
  push:
    branches:
      - dev
      - rc
      - master
  pull_request: ~
  workflow_dispatch:
    inputs:
      full:
        description: "Full run (regardless of changes)"
        default: false
        type: boolean
      lint-only:
        description: "Skip pytest"
        default: false
        type: boolean
      skip-coverage:
        description: "Skip coverage"
        default: false
        type: boolean
      pylint-only:
        description: "Only run pylint"
        default: false
        type: boolean
      mypy-only:
        description: "Only run mypy"
        default: false
        type: boolean
      audit-licenses-only:
        description: "Only run audit licenses"
        default: false
        type: boolean

env:
  CACHE_VERSION: 11
  UV_CACHE_VERSION: 1
  MYPY_CACHE_VERSION: 9
  HA_SHORT_VERSION: "2024.11"
  DEFAULT_PYTHON: "3.12"
  ALL_PYTHON_VERSIONS: "['3.12']"
  # 10.3 is the oldest supported version
  # - 10.3.32 is the version currently shipped with Synology (as of 17 Feb 2022)
  # 10.6 is the current long-term-support
  # - 10.6.10 is the version currently shipped with the Add-on (as of 31 Jan 2023)
  # 10.10 is the latest short-term-support
  # - 10.10.3 is the latest (as of 6 Feb 2023)
  # 10.11 is the latest long-term-support
  # - 10.11.2 is the version currently shipped with Synology (as of 11 Oct 2023)
  # mysql 8.0.32 does not always behave the same as MariaDB
  # and some queries that work on MariaDB do not work on MySQL
  MARIADB_VERSIONS: "['mariadb:10.3.32','mariadb:10.6.10','mariadb:10.10.3','mariadb:10.11.2','mysql:8.0.32']"
  # 12 is the oldest supported version
  # - 12.14 is the latest (as of 9 Feb 2023)
  # 15 is the latest version
  # - 15.2 is the latest (as of 9 Feb 2023)
  POSTGRESQL_VERSIONS: "['postgres:12.14','postgres:15.2']"
  PRE_COMMIT_CACHE: ~/.cache/pre-commit
  UV_CACHE_DIR: /tmp/uv-cache
  SQLALCHEMY_WARN_20: 1
  PYTHONASYNCIODEBUG: 1
  HASS_CI: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  info:
    name: Collect information & changes data
    outputs:
      # In case of issues with the partial run, use the following line instead:
      # test_full_suite: 'true'
      core: ${{ steps.core.outputs.changes }}
      integrations_glob: ${{ steps.info.outputs.integrations_glob }}
      integrations: ${{ steps.integrations.outputs.changes }}
      pre-commit_cache_key: ${{ steps.generate_pre-commit_cache_key.outputs.key }}
      python_cache_key: ${{ steps.generate_python_cache_key.outputs.key }}
      requirements: ${{ steps.core.outputs.requirements }}
      mariadb_groups: ${{ steps.info.outputs.mariadb_groups }}
      postgresql_groups: ${{ steps.info.outputs.postgresql_groups }}
      python_versions: ${{ steps.info.outputs.python_versions }}
      test_full_suite: ${{ steps.info.outputs.test_full_suite }}
      test_group_count: ${{ steps.info.outputs.test_group_count }}
      test_groups: ${{ steps.info.outputs.test_groups }}
      tests_glob: ${{ steps.info.outputs.tests_glob }}
      tests: ${{ steps.info.outputs.tests }}
      skip_coverage: ${{ steps.info.outputs.skip_coverage }}
    runs-on: ubuntu-24.04
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Generate partial Python venv restore key
        id: generate_python_cache_key
        run: |
          # Include HA_SHORT_VERSION to force the immediate creation
          # of a new uv cache entry after a version bump.
          echo "key=venv-${{ env.CACHE_VERSION }}-${{ env.HA_SHORT_VERSION }}-${{
            hashFiles('requirements_test.txt', 'requirements_test_pre_commit.txt') }}-${{
            hashFiles('requirements.txt') }}-${{
            hashFiles('requirements_all.txt') }}-${{
            hashFiles('homeassistant/package_constraints.txt') }}-${{
            hashFiles('script/gen_requirements_all.py') }}" >> $GITHUB_OUTPUT
      - name: Generate partial pre-commit restore key
        id: generate_pre-commit_cache_key
        run: >-
          echo "key=pre-commit-${{ env.CACHE_VERSION }}-${{
            hashFiles('.pre-commit-config.yaml') }}"  >> $GITHUB_OUTPUT
      - name: Filter for core changes
        uses: dorny/paths-filter@v3.0.2
        id: core
        with:
          filters: .core_files.yaml
      - name: Create a list of integrations to filter for changes
        run: |
          integrations=$(ls -Ad ./homeassistant/components/[!_]*  | xargs -n 1 basename)
          touch .integration_paths.yaml
          for integration in $integrations; do
            echo "${integration}: [homeassistant/components/${integration}/**, tests/components/${integration}/**]" \
              >> .integration_paths.yaml;
          done
          echo "Result:"
          cat .integration_paths.yaml
      - name: Filter for integration changes
        uses: dorny/paths-filter@v3.0.2
        id: integrations
        with:
          filters: .integration_paths.yaml
      - name: Collect additional information
        id: info
        run: |
          # Defaults
          integrations_glob=""
          mariadb_groups=${MARIADB_VERSIONS}
          postgresql_groups=${POSTGRESQL_VERSIONS}
          test_full_suite="true"
          test_groups="[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
          test_group_count=10
          tests="[]"
          tests_glob=""
          skip_coverage=""

          if [[ "${{ steps.integrations.outputs.changes }}" != "[]" ]];
          then
            # Create a file glob for the integrations
            integrations_glob=$(echo '${{ steps.integrations.outputs.changes }}' | jq -cSr '. | join(",")')
            [[ "${integrations_glob}" == *","* ]] && integrations_glob="{${integrations_glob}}"

            # Create list of testable integrations
            possible_integrations=$(echo '${{ steps.integrations.outputs.changes }}' | jq -cSr '.[]')
            tests=$(
              for integration in ${possible_integrations};
              do
                if [[ -d "tests/components/${integration}" ]]; then
                  echo -n "\"${integration}\",";
                fi;
              done
            )

            [[ ! -z "${tests}" ]] && tests="${tests::-1}"
            tests="[${tests}]"
            test_groups="${tests}"
            # Test group count should be 1, we don't split partial tests
            test_group_count=1

            # Create a file glob for the integrations tests
            tests_glob=$(echo "${tests}" | jq -cSr '. | join(",")')
            [[ "${tests_glob}" == *","* ]] && tests_glob="{${tests_glob}}"

            mariadb_groups="[]"
            postgresql_groups="[]"
            test_full_suite="false"
          fi

          # We need to run the full suite on certain branches.
          # Or, in case core files are touched, for the full suite as well.
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]] \
            || [[ "${{ github.ref }}" == "refs/heads/master" ]] \
            || [[ "${{ github.ref }}" == "refs/heads/rc" ]] \
            || [[ "${{ steps.core.outputs.any }}" == "true" ]] \
            || [[ "${{ github.event.inputs.full }}" == "true" ]] \
            || [[ "${{ contains(github.event.pull_request.labels.*.name, 'ci-full-run') }}" == "true" ]];
          then
            mariadb_groups=${MARIADB_VERSIONS}
            postgresql_groups=${POSTGRESQL_VERSIONS}
            test_groups="[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
            test_group_count=10
            test_full_suite="true"
          fi

          if [[ "${{ github.event.inputs.skip-coverage }}" == "true" ]] \
            || [[ "${{ contains(github.event.pull_request.labels.*.name, 'ci-skip-coverage') }}" == "true" ]];
          then
            skip_coverage="true"
          fi

          # Output & sent to GitHub Actions
          echo "mariadb_groups: ${mariadb_groups}"
          echo "mariadb_groups=${mariadb_groups}" >> $GITHUB_OUTPUT
          echo "postgresql_groups: ${postgresql_groups}"
          echo "postgresql_groups=${postgresql_groups}" >> $GITHUB_OUTPUT
          echo "python_versions: ${ALL_PYTHON_VERSIONS}"
          echo "python_versions=${ALL_PYTHON_VERSIONS}" >> $GITHUB_OUTPUT
          echo "test_full_suite: ${test_full_suite}"
          echo "test_full_suite=${test_full_suite}" >> $GITHUB_OUTPUT
          echo "integrations_glob: ${integrations_glob}"
          echo "integrations_glob=${integrations_glob}" >> $GITHUB_OUTPUT
          echo "test_group_count: ${test_group_count}"
          echo "test_group_count=${test_group_count}" >> $GITHUB_OUTPUT
          echo "test_groups: ${test_groups}"
          echo "test_groups=${test_groups}" >> $GITHUB_OUTPUT
          echo "tests: ${tests}"
          echo "tests=${tests}" >> $GITHUB_OUTPUT
          echo "tests_glob: ${tests_glob}"
          echo "tests_glob=${tests_glob}" >> $GITHUB_OUTPUT
          echo "skip_coverage: ${skip_coverage}"
          echo "skip_coverage=${skip_coverage}" >> $GITHUB_OUTPUT

  pre-commit:
    name: Prepare pre-commit base
    runs-on: ubuntu-24.04
    if: |
      github.event.inputs.pylint-only != 'true'
      && github.event.inputs.mypy-only != 'true'
      && github.event.inputs.audit-licenses-only != 'true'
    needs:
      - info
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          check-latest: true
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v4.1.1
        with:
          path: venv
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-venv-${{
              needs.info.outputs.pre-commit_cache_key }}
      - name: Create Python virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          . venv/bin/activate
          python --version
          pip install "$(grep '^uv' < requirements.txt)"
          uv pip install "$(cat requirements_test.txt | grep pre-commit)"
      - name: Restore pre-commit environment from cache
        id: cache-precommit
        uses: actions/cache@v4.1.1
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          lookup-only: true
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
              needs.info.outputs.pre-commit_cache_key }}
      - name: Install pre-commit dependencies
        if: steps.cache-precommit.outputs.cache-hit != 'true'
        run: |
          . venv/bin/activate
          pre-commit install-hooks

  lint-ruff-format:
    name: Check ruff-format
    runs-on: ubuntu-24.04
    needs:
      - info
      - pre-commit
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v5.2.0
        id: python
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          check-latest: true
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache/restore@v4.1.1
        with:
          path: venv
          fail-on-cache-miss: true
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-venv-${{
              needs.info.outputs.pre-commit_cache_key }}
      - name: Restore pre-commit environment from cache
        id: cache-precommit
        uses: actions/cache/restore@v4.1.1
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          fail-on-cache-miss: true
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
              needs.info.outputs.pre-commit_cache_key }}
      - name: Run ruff-format
        run: |
          . venv/bin/activate
          pre-commit run --hook-stage manual ruff-format --all-files --show-diff-on-failure
        env:
          RUFF_OUTPUT_FORMAT: github

  lint-ruff:
    name: Check ruff
    runs-on: ubuntu-24.04
    needs:
      - info
      - pre-commit
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v5.2.0
        id: python
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          check-latest: true
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache/restore@v4.1.1
        with:
          path: venv
          fail-on-cache-miss: true
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-venv-${{
              needs.info.outputs.pre-commit_cache_key }}
      - name: Restore pre-commit environment from cache
        id: cache-precommit
        uses: actions/cache/restore@v4.1.1
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          fail-on-cache-miss: true
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
              needs.info.outputs.pre-commit_cache_key }}
      - name: Run ruff
        run: |
          . venv/bin/activate
          pre-commit run --hook-stage manual ruff --all-files --show-diff-on-failure
        env:
          RUFF_OUTPUT_FORMAT: github

  lint-other:
    name: Check other linters
    runs-on: ubuntu-24.04
    needs:
      - info
      - pre-commit
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v5.2.0
        id: python
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          check-latest: true
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache/restore@v4.1.1
        with:
          path: venv
          fail-on-cache-miss: true
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-venv-${{
              needs.info.outputs.pre-commit_cache_key }}
      - name: Restore pre-commit environment from cache
        id: cache-precommit
        uses: actions/cache/restore@v4.1.1
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          fail-on-cache-miss: true
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
              needs.info.outputs.pre-commit_cache_key }}

      - name: Register yamllint problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/yamllint.json"
      - name: Run yamllint
        run: |
          . venv/bin/activate
          pre-commit run --hook-stage manual yamllint --all-files --show-diff-on-failure

      - name: Register check-json problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/check-json.json"
      - name: Run check-json
        run: |
          . venv/bin/activate
          pre-commit run --hook-stage manual check-json --all-files

      - name: Run prettier (fully)
        if: needs.info.outputs.test_full_suite == 'true'
        run: |
          . venv/bin/activate
          pre-commit run --hook-stage manual prettier --all-files

      - name: Run prettier (partially)
        if: needs.info.outputs.test_full_suite == 'false'
        shell: bash
        run: |
          . venv/bin/activate
          shopt -s globstar
          pre-commit run --hook-stage manual prettier --files {homeassistant,tests}/components/${{ needs.info.outputs.integrations_glob }}/{*,**/*}

      - name: Register check executables problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/check-executables-have-shebangs.json"
      - name: Run executables check
        run: |
          . venv/bin/activate
          pre-commit run --hook-stage manual check-executables-have-shebangs --all-files

      - name: Register codespell problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/codespell.json"
      - name: Run codespell
        run: |
          . venv/bin/activate
          pre-commit run --show-diff-on-failure --hook-stage manual codespell --all-files

  lint-hadolint:
    name: Check ${{ matrix.file }}
    runs-on: ubuntu-24.04
    needs:
      - info
    if: |
      github.event.inputs.pylint-only != 'true'
      && github.event.inputs.mypy-only != 'true'
      && github.event.inputs.audit-licenses-only != 'true'
    strategy:
      fail-fast: false
      matrix:
        file:
          - Dockerfile
          - Dockerfile.dev
          - script/hassfest/docker/Dockerfile
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Register hadolint problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/hadolint.json"
      - name: Check ${{ matrix.file }}
        uses: docker://hadolint/hadolint:v2.12.0
        with:
          args: hadolint ${{ matrix.file }}

  base:
    name: Prepare dependencies
    runs-on: ubuntu-24.04
    needs: info
    timeout-minutes: 60
    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.info.outputs.python_versions) }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
      - name: Generate partial uv restore key
        id: generate-uv-key
        run: |
          uv_version=$(cat requirements.txt | grep uv | cut -d '=' -f 3)
          echo "version=${uv_version}" >> $GITHUB_OUTPUT
          echo "key=uv-${{ env.UV_CACHE_VERSION }}-${uv_version}-${{
            env.HA_SHORT_VERSION }}-$(date -u '+%Y-%m-%dT%H:%M:%s')" >> $GITHUB_OUTPUT
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v4.1.1
        with:
          path: venv
          lookup-only: true
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            needs.info.outputs.python_cache_key }}
      - name: Restore uv wheel cache
        if: steps.cache-venv.outputs.cache-hit != 'true'
        uses: actions/cache@v4.1.1
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            steps.generate-uv-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-uv-${{
            env.UV_CACHE_VERSION }}-${{ steps.generate-uv-key.outputs.version }}-${{
            env.HA_SHORT_VERSION }}-
      - name: Install additional OS dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          sudo rm /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update
          sudo apt-get -y install \
            bluez \
            ffmpeg \
            libturbojpeg \
            libavcodec-dev \
            libavdevice-dev \
            libavfilter-dev \
            libavformat-dev \
            libavutil-dev \
            libgammu-dev \
            libswresample-dev \
            libswscale-dev \
            libudev-dev
      - name: Create Python virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          . venv/bin/activate
          python --version
          pip install "$(grep '^uv' < requirements.txt)"
          uv pip install -U "pip>=21.3.1" setuptools wheel
          uv pip install -r requirements.txt
          python -m script.gen_requirements_all ci
          uv pip install -r requirements_all_pytest.txt -r requirements_test.txt
          uv pip install -e . --config-settings editable_mode=compat

  hassfest:
    name: Check hassfest
    runs-on: ubuntu-24.04
    if: |
      github.event.inputs.pylint-only != 'true'
      && github.event.inputs.mypy-only != 'true'
      && github.event.inputs.audit-licenses-only != 'true'
    needs:
      - info
      - base
    steps:
      - name: Install additional OS dependencies
        run: |
          sudo rm /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update
          sudo apt-get -y install \
            libturbojpeg
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          check-latest: true
      - name: Restore full Python ${{ env.DEFAULT_PYTHON }} virtual environment
        id: cache-venv
        uses: actions/cache/restore@v4.1.1
        with:
          path: venv
          fail-on-cache-miss: true
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            needs.info.outputs.python_cache_key }}
      - name: Run hassfest
        run: |
          . venv/bin/activate
          python -m script.hassfest --requirements --action validate

  gen-requirements-all:
    name: Check all requirements
    runs-on: ubuntu-24.04
    if: |
      github.event.inputs.pylint-only != 'true'
      && github.event.inputs.mypy-only != 'true'
      && github.event.inputs.audit-licenses-only != 'true'
    needs:
      - info
      - base
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          check-latest: true
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache/restore@v4.1.1
        with:
          path: venv
          fail-on-cache-miss: true
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            needs.info.outputs.python_cache_key }}
      - name: Run gen_requirements_all.py
        run: |
          . venv/bin/activate
          python -m script.gen_requirements_all validate

  audit-licenses:
    name: Audit licenses
    runs-on: ubuntu-24.04
    needs:
      - info
      - base
    if: |
      (github.event.inputs.pylint-only != 'true'
        && github.event.inputs.mypy-only != 'true'
        || github.event.inputs.audit-licenses-only == 'true')
      && needs.info.outputs.requirements == 'true'
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          check-latest: true
      - name: Restore full Python ${{ env.DEFAULT_PYTHON }} virtual environment
        id: cache-venv
        uses: actions/cache/restore@v4.1.1
        with:
          path: venv
          fail-on-cache-miss: true
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            needs.info.outputs.python_cache_key }}
      - name: Run pip-licenses
        run: |
          . venv/bin/activate
          pip-licenses --format=json --output-file=licenses.json
      - name: Upload licenses
        uses: actions/upload-artifact@v4.4.3
        with:
          name: licenses
          path: licenses.json
      - name: Process licenses
        run: |
          . venv/bin/activate
          python -m script.licenses licenses.json

  pylint:
    name: Check pylint
    runs-on: ubuntu-24.04
    timeout-minutes: 20
    if: |
      github.event.inputs.mypy-only != 'true'
      && github.event.inputs.audit-licenses-only != 'true'
      || github.event.inputs.pylint-only == 'true'
    needs:
      - info
      - base
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          check-latest: true
      - name: Restore full Python ${{ env.DEFAULT_PYTHON }} virtual environment
        id: cache-venv
        uses: actions/cache/restore@v4.1.1
        with:
          path: venv
          fail-on-cache-miss: true
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            needs.info.outputs.python_cache_key }}
      - name: Register pylint problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/pylint.json"
      - name: Run pylint (fully)
        if: needs.info.outputs.test_full_suite == 'true'
        run: |
          . venv/bin/activate
          python --version
          pylint --ignore-missing-annotations=y homeassistant
      - name: Run pylint (partially)
        if: needs.info.outputs.test_full_suite == 'false'
        shell: bash
        run: |
          . venv/bin/activate
          python --version
          pylint --ignore-missing-annotations=y homeassistant/components/${{ needs.info.outputs.integrations_glob }}

  pylint-tests:
    name: Check pylint on tests
    runs-on: ubuntu-24.04
    timeout-minutes: 20
    if: |
      (github.event.inputs.mypy-only != 'true'
        && github.event.inputs.audit-licenses-only != 'true'
        || github.event.inputs.pylint-only == 'true')
      && (needs.info.outputs.tests_glob || needs.info.outputs.test_full_suite == 'true')
    needs:
      - info
      - base
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          check-latest: true
      - name: Restore full Python ${{ env.DEFAULT_PYTHON }} virtual environment
        id: cache-venv
        uses: actions/cache/restore@v4.1.1
        with:
          path: venv
          fail-on-cache-miss: true
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            needs.info.outputs.python_cache_key }}
      - name: Register pylint problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/pylint.json"
      - name: Run pylint (fully)
        if: needs.info.outputs.test_full_suite == 'true'
        run: |
          . venv/bin/activate
          python --version
          pylint tests
      - name: Run pylint (partially)
        if: needs.info.outputs.test_full_suite == 'false'
        shell: bash
        run: |
          . venv/bin/activate
          python --version
          pylint tests/components/${{ needs.info.outputs.tests_glob }}

  mypy:
    name: Check mypy
    runs-on: ubuntu-24.04
    if: |
      github.event.inputs.pylint-only != 'true'
      && github.event.inputs.audit-licenses-only != 'true'
      || github.event.inputs.mypy-only == 'true'
    needs:
      - info
      - base
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          check-latest: true
      - name: Generate partial mypy restore key
        id: generate-mypy-key
        run: |
          mypy_version=$(cat requirements_test.txt | grep mypy | cut -d '=' -f 3)
          echo "version=$mypy_version" >> $GITHUB_OUTPUT
          echo "key=mypy-${{ env.MYPY_CACHE_VERSION }}-$mypy_version-${{
            env.HA_SHORT_VERSION }}-$(date -u '+%Y-%m-%dT%H:%M:%s')" >> $GITHUB_OUTPUT
      - name: Restore full Python ${{ env.DEFAULT_PYTHON }} virtual environment
        id: cache-venv
        uses: actions/cache/restore@v4.1.1
        with:
          path: venv
          fail-on-cache-miss: true
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            needs.info.outputs.python_cache_key }}
      - name: Restore mypy cache
        uses: actions/cache@v4.1.1
        with:
          path: .mypy_cache
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            steps.generate-mypy-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-mypy-${{
            env.MYPY_CACHE_VERSION }}-${{ steps.generate-mypy-key.outputs.version }}-${{
            env.HA_SHORT_VERSION }}-
      - name: Register mypy problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/mypy.json"
      - name: Run mypy (fully)
        if: needs.info.outputs.test_full_suite == 'true'
        run: |
          . venv/bin/activate
          python --version
          mypy homeassistant pylint
      - name: Run mypy (partially)
        if: needs.info.outputs.test_full_suite == 'false'
        shell: bash
        run: |
          . venv/bin/activate
          python --version
          mypy homeassistant/components/${{ needs.info.outputs.integrations_glob }}

  prepare-pytest-full:
    runs-on: ubuntu-24.04
    if: |
      (github.event_name != 'push' || github.event.repository.full_name == 'home-assistant/core')
      && github.event.inputs.lint-only != 'true'
      && github.event.inputs.pylint-only != 'true'
      && github.event.inputs.mypy-only != 'true'
      && github.event.inputs.audit-licenses-only != 'true'
      && needs.info.outputs.test_full_suite == 'true'
    needs:
      - info
      - base
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.info.outputs.python_versions) }}
    name: Split tests for full run Python ${{ matrix.python-version }}
    steps:
      - name: Install additional OS dependencies
        run: |
          sudo rm /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update
          sudo apt-get -y install \
            bluez \
            ffmpeg \
            libturbojpeg \
            libgammu-dev
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache/restore@v4.1.1
        with:
          path: venv
          fail-on-cache-miss: true
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            needs.info.outputs.python_cache_key }}
      - name: Run split_tests.py
        run: |
          . venv/bin/activate
          python -m script.split_tests ${{ needs.info.outputs.test_group_count }} tests
      - name: Upload pytest_buckets
        uses: actions/upload-artifact@v4.4.3
        with:
          name: pytest_buckets
          path: pytest_buckets.txt
          overwrite: true

  pytest-full:
    runs-on: ubuntu-24.04
    if: |
      (github.event_name != 'push' || github.event.repository.full_name == 'home-assistant/core')
      && github.event.inputs.lint-only != 'true'
      && github.event.inputs.pylint-only != 'true'
      && github.event.inputs.mypy-only != 'true'
      && github.event.inputs.audit-licenses-only != 'true'
      && needs.info.outputs.test_full_suite == 'true'
    needs:
      - info
      - base
      - gen-requirements-all
      - hassfest
      - lint-other
      - lint-ruff
      - lint-ruff-format
      - mypy
      - prepare-pytest-full
    strategy:
      fail-fast: false
      matrix:
        group: ${{ fromJson(needs.info.outputs.test_groups) }}
        python-version: ${{ fromJson(needs.info.outputs.python_versions) }}
    name: >-
      Run tests Python ${{ matrix.python-version }} (${{ matrix.group }})
    steps:
      - name: Install additional OS dependencies
        run: |
          sudo rm /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update
          sudo apt-get -y install \
            bluez \
            ffmpeg \
            libturbojpeg \
            libgammu-dev
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
      - name: Restore full Python ${{ matrix.python-version }} virtual environment
        id: cache-venv
        uses: actions/cache/restore@v4.1.1
        with:
          path: venv
          fail-on-cache-miss: true
          key: ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            needs.info.outputs.python_cache_key }}
      - name: Register Python problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/python.json"
      - name: Register pytest slow test problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/pytest-slow.json"
      - name: Download pytest_buckets
        uses: actions/download-artifact@v4.1.8
        with:
          name: pytest_buckets
      - name: Compile English translations
        run: |
          . venv/bin/activate
          python3 -m script.translations develop --all
      - name: Run pytest
        timeout-minutes: 60
        id: pytest-full
        env:
          PYTHONDONTWRITEBYTECODE: 1
        run: |
          . venv/bin/activate
          python --version
          set -o pipefail
          cov_params=()
          if [[ "${{ needs.info.outputs.skip_coverage }}" != "true" ]]; then
            cov_params+=(--cov="homeassistant")
            cov_params+=(--cov-report=xml)
          fi

          echo "Test group ${{ matrix.group }}: $(sed -n "${{ matrix.group }},1p" pytest_buckets.txt)"
          python3 -b -X dev -m pytest \
            -qq \
            --timeout=9 \
            --durations=10 \
            -n auto \
            --dist=loadfile \
            ${cov_params[@]} \
            -o console_output_style=count \
            -p no:sugar \
            $(sed -n "${{ matrix.group }},1p" pytest_buckets.txt) \
              2>&1 | tee pytest-${{ matrix.python-version }}-${{ matrix.group }}.txt
      - name: Upload pytest output
        if: success() || failure() && steps.pytest-full.conclusion == 'failure'
        uses: actions/upload-artifact@v4.4.3
        with:
          name: pytest-${{ github.run_number }}-${{ matrix.python-version }}-${{ matrix.group }}
          path: pytest-*.txt
          overwrite: true
      - name: Upload coverage artifact
        if: needs.info.outputs.skip_coverage != 'true'
        uses: actions/upload-artifact@v4.4.3
        with:
          name: coverage-${{ matrix.python-version }}-${{ matrix.group }}
          path: coverage.xml
          overwrite: true
      - name: Remove pytest_buckets
        run: rm pytest_buckets.txt
      - name: Check dirty
        run: |
          ./script/check_dirty

  pytest-mariadb:
    runs-on: ubuntu-24.04
    services:
      mariadb:
        image: ${{ matrix.mariadb-group }}
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: password
        options: --health-cmd="mysqladmin ping -uroot -ppassword" --health-interval=5s --health-timeout=2s --health-retries=3
    if: |
      (github.event_name != 'push' || github.event.repository.full_name == 'home-assistant/core')
      && github.event.inputs.lint-only != 'true'
      && github.event.inputs.pylint-only != 'true'
      && github.event.inputs.mypy-only != 'true'
      && github.event.inputs.audit-licenses-only != 'true'
      && needs.info.outputs.mariadb_groups != '[]'
    needs:
      - info
      - base
      - gen-requirements-all
      - hassfest
      - lint-other
      - lint-ruff
      - lint-ruff-format
      - mypy
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.info.outputs.python_versions) }}
        mariadb-group: ${{ fromJson(needs.info.outputs.mariadb_groups) }}
    name: >-
      Run ${{ matrix.mariadb-group }} tests Python ${{ matrix.python-version }}
    steps:
      - name: Install additional OS dependencies
        run: |
          sudo rm /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update
          sudo apt-get -y install \
            bluez \
            ffmpeg \
            libturbojpeg \
            libmariadb-dev-compat
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
      - name: Restore full Python ${{ matrix.python-version }} virtual environment
        id: cache-venv
        uses: actions/cache/restore@v4.1.1
        with:
          path: venv
          fail-on-cache-miss: true
          key: ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            needs.info.outputs.python_cache_key }}
      - name: Register Python problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/python.json"
      - name: Register pytest slow test problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/pytest-slow.json"
      - name: Install SQL Python libraries
        run: |
          . venv/bin/activate
          uv pip install mysqlclient sqlalchemy_utils
      - name: Compile English translations
        run: |
          . venv/bin/activate
          python3 -m script.translations develop --all
      - name: Run pytest (partially)
        timeout-minutes: 20
        id: pytest-partial
        shell: bash
        env:
          PYTHONDONTWRITEBYTECODE: 1
        run: |
          . venv/bin/activate
          python --version
          set -o pipefail
          mariadb=$(echo "${{ matrix.mariadb-group }}" | sed "s/:/-/g")
          echo "mariadb=${mariadb}" >> $GITHUB_OUTPUT
          cov_params=()
          if [[ "${{ needs.info.outputs.skip_coverage }}" != "true" ]]; then
            cov_params+=(--cov="homeassistant.components.recorder")
            cov_params+=(--cov-report=xml)
            cov_params+=(--cov-report=term-missing)
          fi

          python3 -b -X dev -m pytest \
            -qq \
            --timeout=20 \
            -n 1 \
            ${cov_params[@]} \
            -o console_output_style=count \
            --durations=10 \
            -p no:sugar \
            --dburl=mysql://root:password@127.0.0.1/homeassistant-test \
            tests/components/history \
            tests/components/logbook \
            tests/components/recorder \
            tests/components/sensor \
              2>&1 | tee pytest-${{ matrix.python-version }}-${mariadb}.txt
      - name: Upload pytest output
        if: success() || failure() && steps.pytest-partial.conclusion == 'failure'
        uses: actions/upload-artifact@v4.4.3
        with:
          name: pytest-${{ github.run_number }}-${{ matrix.python-version }}-${{
            steps.pytest-partial.outputs.mariadb }}
          path: pytest-*.txt
          overwrite: true
      - name: Upload coverage artifact
        if: needs.info.outputs.skip_coverage != 'true'
        uses: actions/upload-artifact@v4.4.3
        with:
          name: coverage-${{ matrix.python-version }}-${{
            steps.pytest-partial.outputs.mariadb }}
          path: coverage.xml
          overwrite: true
      - name: Check dirty
        run: |
          ./script/check_dirty

  pytest-postgres:
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: ${{ matrix.postgresql-group }}
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: password
        options: --health-cmd="pg_isready -hlocalhost -Upostgres" --health-interval=5s --health-timeout=2s --health-retries=3
    if: |
      (github.event_name != 'push' || github.event.repository.full_name == 'home-assistant/core')
      && github.event.inputs.lint-only != 'true'
      && github.event.inputs.pylint-only != 'true'
      && github.event.inputs.mypy-only != 'true'
      && github.event.inputs.audit-licenses-only != 'true'
      && needs.info.outputs.postgresql_groups != '[]'
    needs:
      - info
      - base
      - gen-requirements-all
      - hassfest
      - lint-other
      - lint-ruff
      - lint-ruff-format
      - mypy
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.info.outputs.python_versions) }}
        postgresql-group: ${{ fromJson(needs.info.outputs.postgresql_groups) }}
    name: >-
      Run ${{ matrix.postgresql-group }} tests Python ${{ matrix.python-version }}
    steps:
      - name: Install additional OS dependencies
        run: |
          sudo rm /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update
          sudo apt-get -y install \
            bluez \
            ffmpeg \
            libturbojpeg \
            postgresql-server-dev-14
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
      - name: Restore full Python ${{ matrix.python-version }} virtual environment
        id: cache-venv
        uses: actions/cache/restore@v4.1.1
        with:
          path: venv
          fail-on-cache-miss: true
          key: ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            needs.info.outputs.python_cache_key }}
      - name: Register Python problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/python.json"
      - name: Register pytest slow test problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/pytest-slow.json"
      - name: Install SQL Python libraries
        run: |
          . venv/bin/activate
          uv pip install psycopg2 sqlalchemy_utils
      - name: Compile English translations
        run: |
          . venv/bin/activate
          python3 -m script.translations develop --all
      - name: Run pytest (partially)
        timeout-minutes: 20
        id: pytest-partial
        shell: bash
        env:
          PYTHONDONTWRITEBYTECODE: 1
        run: |
          . venv/bin/activate
          python --version
          set -o pipefail
          postgresql=$(echo "${{ matrix.postgresql-group }}" | sed "s/:/-/g")
          echo "postgresql=${postgresql}" >> $GITHUB_OUTPUT
          cov_params=()
          if [[ "${{ needs.info.outputs.skip_coverage }}" != "true" ]]; then
            cov_params+=(--cov="homeassistant.components.recorder")
            cov_params+=(--cov-report=xml)
            cov_params+=(--cov-report=term-missing)
          fi

          python3 -b -X dev -m pytest \
            -qq \
            --timeout=9 \
            -n 1 \
            ${cov_params[@]} \
            -o console_output_style=count \
            --durations=0 \
            --durations-min=10 \
            -p no:sugar \
            --dburl=postgresql://postgres:password@127.0.0.1/homeassistant-test \
            tests/components/history \
            tests/components/logbook \
            tests/components/recorder \
            tests/components/sensor \
              2>&1 | tee pytest-${{ matrix.python-version }}-${postgresql}.txt
      - name: Upload pytest output
        if: success() || failure() && steps.pytest-partial.conclusion == 'failure'
        uses: actions/upload-artifact@v4.4.3
        with:
          name: pytest-${{ github.run_number }}-${{ matrix.python-version }}-${{
            steps.pytest-partial.outputs.postgresql }}
          path: pytest-*.txt
          overwrite: true
      - name: Upload coverage artifact
        if: needs.info.outputs.skip_coverage != 'true'
        uses: actions/upload-artifact@v4.4.3
        with:
          name: coverage-${{ matrix.python-version }}-${{
            steps.pytest-partial.outputs.postgresql }}
          path: coverage.xml
          overwrite: true
      - name: Check dirty
        run: |
          ./script/check_dirty

  coverage-full:
    name: Upload test coverage to Codecov (full suite)
    if: needs.info.outputs.skip_coverage != 'true'
    runs-on: ubuntu-24.04
    needs:
      - info
      - pytest-full
      - pytest-postgres
      - pytest-mariadb
    timeout-minutes: 10
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          pattern: coverage-*
      - name: Upload coverage to Codecov
        if: needs.info.outputs.test_full_suite == 'true'
        uses: codecov/codecov-action@v4.6.0
        with:
          fail_ci_if_error: true
          flags: full-suite
          token: ${{ secrets.CODECOV_TOKEN }}
          version: v0.6.0

  pytest-partial:
    runs-on: ubuntu-24.04
    if: |
      (github.event_name != 'push' || github.event.repository.full_name == 'home-assistant/core')
      && github.event.inputs.lint-only != 'true'
      && github.event.inputs.pylint-only != 'true'
      && github.event.inputs.mypy-only != 'true'
      && github.event.inputs.audit-licenses-only != 'true'
      && needs.info.outputs.tests_glob
      && needs.info.outputs.test_full_suite == 'false'
    needs:
      - info
      - base
      - gen-requirements-all
      - hassfest
      - lint-other
      - lint-ruff
      - lint-ruff-format
      - mypy
    strategy:
      fail-fast: false
      matrix:
        group: ${{ fromJson(needs.info.outputs.test_groups) }}
        python-version: ${{ fromJson(needs.info.outputs.python_versions) }}
    name: >-
      Run tests Python ${{ matrix.python-version }} (${{ matrix.group }})
    steps:
      - name: Install additional OS dependencies
        run: |
          sudo rm /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update
          sudo apt-get -y install \
            bluez \
            ffmpeg \
            libturbojpeg \
            libgammu-dev
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
      - name: Restore full Python ${{ matrix.python-version }} virtual environment
        id: cache-venv
        uses: actions/cache/restore@v4.1.1
        with:
          path: venv
          fail-on-cache-miss: true
          key: ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            needs.info.outputs.python_cache_key }}
      - name: Register Python problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/python.json"
      - name: Register pytest slow test problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/pytest-slow.json"
      - name: Compile English translations
        run: |
          . venv/bin/activate
          python3 -m script.translations develop --all
      - name: Run pytest
        timeout-minutes: 10
        id: pytest-partial
        shell: bash
        env:
          PYTHONDONTWRITEBYTECODE: 1
        run: |
          . venv/bin/activate
          python --version
          set -o pipefail

          if [[ ! -f "tests/components/${{ matrix.group }}/__init__.py" ]]; then
            echo "::error:: missing file tests/components/${{ matrix.group }}/__init__.py"
            exit 1
          fi

          cov_params=()
          if [[ "${{ needs.info.outputs.skip_coverage }}" != "true" ]]; then
            cov_params+=(--cov="homeassistant.components.${{ matrix.group }}")
            cov_params+=(--cov-report=xml)
            cov_params+=(--cov-report=term-missing)
          fi

          python3 -b -X dev -m pytest \
            -qq \
            --timeout=9 \
            -n auto \
            ${cov_params[@]} \
            -o console_output_style=count \
            --durations=0 \
            --durations-min=1 \
            -p no:sugar \
            tests/components/${{ matrix.group }} \
              2>&1 | tee pytest-${{ matrix.python-version }}-${{ matrix.group }}.txt
      - name: Upload pytest output
        if: success() || failure() && steps.pytest-partial.conclusion == 'failure'
        uses: actions/upload-artifact@v4.4.3
        with:
          name: pytest-${{ github.run_number }}-${{ matrix.python-version }}-${{ matrix.group }}
          path: pytest-*.txt
          overwrite: true
      - name: Upload coverage artifact
        if: needs.info.outputs.skip_coverage != 'true'
        uses: actions/upload-artifact@v4.4.3
        with:
          name: coverage-${{ matrix.python-version }}-${{ matrix.group }}
          path: coverage.xml
          overwrite: true
      - name: Check dirty
        run: |
          ./script/check_dirty

  coverage-partial:
    name: Upload test coverage to Codecov (partial suite)
    if: needs.info.outputs.skip_coverage != 'true'
    runs-on: ubuntu-24.04
    needs:
      - info
      - pytest-partial
    timeout-minutes: 10
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.2.1
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          pattern: coverage-*
      - name: Upload coverage to Codecov
        if: needs.info.outputs.test_full_suite == 'false'
        uses: codecov/codecov-action@v4.6.0
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          version: v0.6.0
