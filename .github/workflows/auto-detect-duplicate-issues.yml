name: Auto-detect duplicate issues

# yamllint disable-line rule:truthy
on:
  issues:
    types: [labeled]

permissions:
  issues: write
  models: read

jobs:
  detect-duplicates:
    runs-on: ubuntu-latest

    steps:
      - name: Check if integration label was added and extract details
        id: extract
        uses: actions/github-script@v7
        with:
          script: |
            // Debug: Log the event payload
            console.log('Event name:', context.eventName);
            console.log('Event action:', context.payload.action);
            console.log('Event payload keys:', Object.keys(context.payload));

            // Check the specific label that was added
            const addedLabel = context.payload.label;
            if (!addedLabel) {
              console.log('No label found in labeled event payload');
              core.setOutput('should_continue', 'false');
              return;
            }

            console.log(`Label added: ${addedLabel.name}`);

            if (!addedLabel.name.startsWith('integration:')) {
              console.log('Added label is not an integration label, skipping duplicate detection');
              core.setOutput('should_continue', 'false');
              return;
            }

            console.log(`Integration label added: ${addedLabel.name}`);

            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number
            });

            const currentIssue = issue.data;
            const integrationLabels = currentIssue.labels
              .filter(label => label.name.startsWith('integration:'))
              .map(label => label.name);

            // Check if we've already posted a duplicate detection comment recently
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              per_page: 10
            });

            // Check if we've already posted a duplicate detection comment
            const recentDuplicateComment = comments.data.find(comment =>
              comment.user && comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('Potential Duplicate Detection')
            );

            if (recentDuplicateComment) {
              console.log('Already posted duplicate detection comment, skipping');
              core.setOutput('should_continue', 'false');
              return;
            }

            core.setOutput('should_continue', 'true');
            core.setOutput('current_number', currentIssue.number);
            core.setOutput('current_title', currentIssue.title);
            core.setOutput('current_body', currentIssue.body);
            core.setOutput('current_url', currentIssue.html_url);
            core.setOutput('integration_labels', JSON.stringify(integrationLabels));

            console.log(`Current issue: #${currentIssue.number}`);
            console.log(`Integration labels: ${integrationLabels.join(', ')}`);

      - name: Fetch similar issues
        id: fetch_similar
        if: steps.extract.outputs.should_continue == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const integrationLabels = JSON.parse('${{ steps.extract.outputs.integration_labels }}');
            const currentNumber = parseInt('${{ steps.extract.outputs.current_number }}');

            if (integrationLabels.length === 0) {
              console.log('No integration labels found, skipping duplicate detection');
              core.setOutput('has_similar', 'false');
              return;
            }

            // Use GitHub search API to find issues with matching integration labels
            console.log(`Searching for issues with integration labels: ${integrationLabels.join(', ')}`);

            // Build search query for issues with any of the current integration labels
            const labelQueries = integrationLabels.map(label => `label:"${label}"`);
            let searchQuery;

            if (labelQueries.length === 1) {
              searchQuery = `repo:${context.repo.owner}/${context.repo.repo} is:issue ${labelQueries[0]}`;
            } else {
              searchQuery = `repo:${context.repo.owner}/${context.repo.repo} is:issue (${labelQueries.join(' OR ')})`;
            }

            console.log(`Search query: ${searchQuery}`);

            const result = await github.rest.search.issuesAndPullRequests({
              q: searchQuery,
              per_page: 10,
              sort: 'created',
              order: 'desc'
            });

            // Filter out the current issue and pull requests
            const similarIssues = result.data.items
              .filter(item => item.number !== currentNumber && !item.pull_request) // Exclude current issue and PRs
              .map(item => ({
                number: item.number,
                title: item.title,
                body: item.body,
                url: item.html_url,
                createdAt: item.created_at,
                labels: item.labels.map(l => l.name)
              }));

            console.log(`Found ${similarIssues.length} issues with matching integration labels`);

            if (similarIssues.length === 0) {
              core.setOutput('has_similar', 'false');
              return;
            }

            core.setOutput('has_similar', 'true');

            // Clean the issue data to prevent JSON parsing issues
            const cleanedIssues = similarIssues.slice(0, 10).map(item => ({
              number: item.number,
              title: item.title.replace(/[\u0000-\u001F\u007F-\u009F]/g, ''), // Remove control characters
              body: item.body ? item.body.substring(0, 500).replace(/[\u0000-\u001F\u007F-\u009F]/g, '') : '', // Truncate and clean
              url: item.url,
              createdAt: item.createdAt,
              labels: item.labels
            }));

            core.setOutput('similar_issues', JSON.stringify(cleanedIssues));

      - name: Detect duplicates using AI
        id: ai_detection
        if: steps.extract.outputs.should_continue == 'true' && steps.fetch_similar.outputs.has_similar == 'true'
        uses: actions/ai-inference@v1
        with:
          model: openai/gpt-4o-mini
          system-prompt: |
            You are a Home Assistant issue duplicate detector. Your task is to identify potential duplicate issues based on their content.

            Rules:
            1. Compare the current issue with the provided similar issues
            2. Look for issues that report the same problem or request the same functionality
            3. Consider different wording but same underlying issue as duplicates
            4. Return ONLY a JSON array of issue numbers that are potential duplicates
            5. If no duplicates are found, return an empty array: []
            6. Maximum 5 potential duplicates
            7. Only include high-confidence matches (70%+ similarity in intent)

            Example response format:
            [1234, 5678, 9012]

          prompt: |
            Current issue:
            Title: ${{ steps.extract.outputs.current_title }}
            Body: ${{ steps.extract.outputs.current_body }}

            Similar issues to compare against:
            ${{ steps.fetch_similar.outputs.similar_issues }}

            Which of these similar issues are potential duplicates of the current issue?

          max-tokens: 100

      - name: Post duplicate detection results
        id: post_results
        if: steps.extract.outputs.should_continue == 'true' && steps.fetch_similar.outputs.has_similar == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const aiResponse = '${{ steps.ai_detection.outputs.response }}';

            console.log('Raw AI response:', JSON.stringify(aiResponse));

            let duplicateNumbers = [];
            try {
              // Clean the response of any potential control characters
              const cleanResponse = aiResponse.trim().replace(/[\u0000-\u001F\u007F-\u009F]/g, '');
              console.log('Cleaned AI response:', cleanResponse);

              duplicateNumbers = JSON.parse(cleanResponse);

              // Ensure it's an array and contains only numbers
              if (!Array.isArray(duplicateNumbers)) {
                console.log('AI response is not an array, trying to extract numbers');
                const numberMatches = cleanResponse.match(/\d+/g);
                duplicateNumbers = numberMatches ? numberMatches.map(n => parseInt(n)) : [];
              }

              // Filter to only valid numbers
              duplicateNumbers = duplicateNumbers.filter(n => typeof n === 'number' && !isNaN(n));

            } catch (error) {
              console.log('Failed to parse AI response as JSON:', error.message);
              console.log('Raw response:', aiResponse);

              // Fallback: try to extract numbers from the response
              const numberMatches = aiResponse.match(/\d+/g);
              duplicateNumbers = numberMatches ? numberMatches.map(n => parseInt(n)) : [];
              console.log('Extracted numbers as fallback:', duplicateNumbers);
            }

            if (!Array.isArray(duplicateNumbers) || duplicateNumbers.length === 0) {
              console.log('No duplicates detected by AI');
              return;
            }

            console.log(`AI detected ${duplicateNumbers.length} potential duplicates: ${duplicateNumbers.join(', ')}`);

            // Get details of detected duplicates
            const similarIssues = JSON.parse('${{ steps.fetch_similar.outputs.similar_issues }}');
            const duplicates = similarIssues.filter(issue => duplicateNumbers.includes(issue.number));

            if (duplicates.length === 0) {
              console.log('No matching issues found for detected numbers');
              return;
            }

            // Create comment with duplicate detection results
            const duplicateLinks = duplicates.map(issue => `- [#${issue.number}: ${issue.title}](${issue.url})`).join('\n');

            const commentBody = [
              '### 🔍 **Potential duplicate detection**',
              '',
              'I\'ve analyzed similar issues and found the following potential duplicates:',
              '',
              duplicateLinks,
              '',
              '**What to do next:**',
              '1. Please review these issues to see if they match your issue',
              '2. If you find an existing issue that covers your problem:',
              '   - Consider closing this issue',
              '   - Add your findings or 👍 on the existing issue instead',
              '3. If your issue is different or adds new aspects, please clarify how it differs',
              '',
              'This helps keep our issues organized and ensures similar issues are consolidated for better visibility.',
              '',
              '*This message was generated automatically by our duplicate detection system.*'
            ].join('\n');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: commentBody
            });

            console.log(`Posted duplicate detection comment with ${duplicates.length} potential duplicates`);
