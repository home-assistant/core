# serializer version: 1
# name: test_coffee_system_sensor_states[platforms0-coffee_system.json][sensor.coffee_system-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.coffee_system',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:coffee-maker',
    'original_name': None,
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'status',
    'unique_id': 'DummyAppliance_CoffeeSystem-state_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_coffee_system_sensor_states[platforms0-coffee_system.json][sensor.coffee_system-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Coffee system',
      'icon': 'mdi:coffee-maker',
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.coffee_system',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'in_use',
  })
# ---
# name: test_coffee_system_sensor_states[platforms0-coffee_system.json][sensor.coffee_system_program-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'appliance_rinse',
        'appliance_settings',
        'barista_assistant',
        'black_tea',
        'brewing_unit_degrease',
        'cafe_au_lait',
        'caffe_latte',
        'cappuccino',
        'cappuccino_italiano',
        'check_appliance',
        'coffee',
        'coffee_pot',
        'descaling',
        'espresso',
        'espresso_macchiato',
        'flat_white',
        'fruit_tea',
        'green_tea',
        'herbal_tea',
        'hot_milk',
        'hot_water',
        'japanese_tea',
        'latte_macchiato',
        'long_coffee',
        'milk_foam',
        'milk_pipework_clean',
        'milk_pipework_rinse',
        'no_program',
        'ristretto',
        'very_hot_water',
        'white_tea',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.coffee_system_program',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Program',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'program_id',
    'unique_id': 'DummyAppliance_CoffeeSystem-state_program_id',
    'unit_of_measurement': None,
  })
# ---
# name: test_coffee_system_sensor_states[platforms0-coffee_system.json][sensor.coffee_system_program-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Coffee system Program',
      'options': list([
        'appliance_rinse',
        'appliance_settings',
        'barista_assistant',
        'black_tea',
        'brewing_unit_degrease',
        'cafe_au_lait',
        'caffe_latte',
        'cappuccino',
        'cappuccino_italiano',
        'check_appliance',
        'coffee',
        'coffee_pot',
        'descaling',
        'espresso',
        'espresso_macchiato',
        'flat_white',
        'fruit_tea',
        'green_tea',
        'herbal_tea',
        'hot_milk',
        'hot_water',
        'japanese_tea',
        'latte_macchiato',
        'long_coffee',
        'milk_foam',
        'milk_pipework_clean',
        'milk_pipework_rinse',
        'no_program',
        'ristretto',
        'very_hot_water',
        'white_tea',
      ]),
      'profile': 'profile_1',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.coffee_system_program',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'espresso',
  })
# ---
# name: test_coffee_system_sensor_states[platforms0-coffee_system.json][sensor.coffee_system_program_phase-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        '2nd_espresso',
        '2nd_grinding',
        '2nd_pre_brewing',
        'dispensing',
        'espresso',
        'grinding',
        'heating_up',
        'hot_milk',
        'milk_foam',
        'not_running',
        'pre_brewing',
        'rinse',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.coffee_system_program_phase',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Program phase',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'program_phase',
    'unique_id': 'DummyAppliance_CoffeeSystem-state_program_phase',
    'unit_of_measurement': None,
  })
# ---
# name: test_coffee_system_sensor_states[platforms0-coffee_system.json][sensor.coffee_system_program_phase-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Coffee system Program phase',
      'options': list([
        '2nd_espresso',
        '2nd_grinding',
        '2nd_pre_brewing',
        'dispensing',
        'espresso',
        'grinding',
        'heating_up',
        'hot_milk',
        'milk_foam',
        'not_running',
        'pre_brewing',
        'rinse',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.coffee_system_program_phase',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'espresso',
  })
# ---
# name: test_coffee_system_sensor_states[platforms0-coffee_system.json][sensor.coffee_system_program_type-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'automatic_program',
        'cleaning_care_program',
        'maintenance_program',
        'normal_operation_mode',
        'own_program',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.coffee_system_program_type',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Program type',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'program_type',
    'unique_id': 'DummyAppliance_CoffeeSystem-state_program_type',
    'unit_of_measurement': None,
  })
# ---
# name: test_coffee_system_sensor_states[platforms0-coffee_system.json][sensor.coffee_system_program_type-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Coffee system Program type',
      'options': list([
        'automatic_program',
        'cleaning_care_program',
        'maintenance_program',
        'normal_operation_mode',
        'own_program',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.coffee_system_program_type',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'own_program',
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hob_with_extraction',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:pot-steam-outline',
    'original_name': None,
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'status',
    'unique_id': 'DummyAppliance_74-state_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hob with extraction',
      'icon': 'mdi:pot-steam-outline',
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hob_with_extraction',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'in_use',
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hob_with_extraction_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:pot-steam-outline',
    'original_name': None,
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'status',
    'unique_id': 'DummyAppliance_74_off-state_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hob with extraction',
      'icon': 'mdi:pot-steam-outline',
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hob_with_extraction_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_plate_1-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hob_with_extraction_plate_1',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Plate 1',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'plate',
    'unique_id': 'DummyAppliance_74-state_plate_step-1',
    'unit_of_measurement': None,
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_plate_1-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hob with extraction Plate 1',
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hob_with_extraction_plate_1',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'plate_step_0',
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_plate_1_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hob_with_extraction_plate_1_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Plate 1',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'plate',
    'unique_id': 'DummyAppliance_74_off-state_plate_step-1',
    'unit_of_measurement': None,
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_plate_1_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hob with extraction Plate 1',
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hob_with_extraction_plate_1_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'plate_step_0',
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_plate_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hob_with_extraction_plate_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Plate 2',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'plate',
    'unique_id': 'DummyAppliance_74-state_plate_step-2',
    'unit_of_measurement': None,
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_plate_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hob with extraction Plate 2',
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hob_with_extraction_plate_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'plate_step_3',
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_plate_2_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hob_with_extraction_plate_2_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Plate 2',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'plate',
    'unique_id': 'DummyAppliance_74_off-state_plate_step-2',
    'unit_of_measurement': None,
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_plate_2_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hob with extraction Plate 2',
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hob_with_extraction_plate_2_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'plate_step_0',
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_plate_3-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hob_with_extraction_plate_3',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Plate 3',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'plate',
    'unique_id': 'DummyAppliance_74-state_plate_step-3',
    'unit_of_measurement': None,
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_plate_3-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hob with extraction Plate 3',
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hob_with_extraction_plate_3',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'plate_step_7',
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_plate_3_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hob_with_extraction_plate_3_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Plate 3',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'plate',
    'unique_id': 'DummyAppliance_74_off-state_plate_step-3',
    'unit_of_measurement': None,
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_plate_3_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hob with extraction Plate 3',
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hob_with_extraction_plate_3_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'plate_step_0',
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_plate_4-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hob_with_extraction_plate_4',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Plate 4',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'plate',
    'unique_id': 'DummyAppliance_74-state_plate_step-4',
    'unit_of_measurement': None,
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_plate_4-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hob with extraction Plate 4',
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hob_with_extraction_plate_4',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'plate_step_15',
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_plate_4_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hob_with_extraction_plate_4_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Plate 4',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'plate',
    'unique_id': 'DummyAppliance_74_off-state_plate_step-4',
    'unit_of_measurement': None,
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_plate_4_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hob with extraction Plate 4',
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hob_with_extraction_plate_4_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'plate_step_0',
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_plate_5-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hob_with_extraction_plate_5',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Plate 5',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'plate',
    'unique_id': 'DummyAppliance_74-state_plate_step-5',
    'unit_of_measurement': None,
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hob_with_extraction_plate_5-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hob with extraction Plate 5',
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hob_with_extraction_plate_5',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'plate_step_boost',
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hood-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hood',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:turbine',
    'original_name': None,
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'status',
    'unique_id': 'DummyAppliance_18-state_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_fan_hob_sensor_states[platforms0-fan_devices.json][sensor.hood-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hood',
      'icon': 'mdi:turbine',
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hood',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_fridge_freezer_sensor_states[platforms0-fridge_freezer.json][sensor.fridge_freezer-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.fridge_freezer',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:fridge-outline',
    'original_name': None,
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'status',
    'unique_id': 'DummyAppliance_Fridge_Freezer-state_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_fridge_freezer_sensor_states[platforms0-fridge_freezer.json][sensor.fridge_freezer-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Fridge freezer',
      'icon': 'mdi:fridge-outline',
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.fridge_freezer',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'in_use',
  })
# ---
# name: test_fridge_freezer_sensor_states[platforms0-fridge_freezer.json][sensor.fridge_freezer_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.fridge_freezer_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:fridge-outline',
    'original_name': None,
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'status',
    'unique_id': 'DummyAppliance_Fridge_Freezer_Offline-state_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_fridge_freezer_sensor_states[platforms0-fridge_freezer.json][sensor.fridge_freezer_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Fridge freezer',
      'icon': 'mdi:fridge-outline',
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.fridge_freezer_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'not_connected',
  })
# ---
# name: test_fridge_freezer_sensor_states[platforms0-fridge_freezer.json][sensor.fridge_freezer_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.fridge_freezer_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'DummyAppliance_Fridge_Freezer-state_temperature_1',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_fridge_freezer_sensor_states[platforms0-fridge_freezer.json][sensor.fridge_freezer_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Fridge freezer Temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.fridge_freezer_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '4.0',
  })
# ---
# name: test_fridge_freezer_sensor_states[platforms0-fridge_freezer.json][sensor.fridge_freezer_temperature_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.fridge_freezer_temperature_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'DummyAppliance_Fridge_Freezer_Offline-state_temperature_1',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_fridge_freezer_sensor_states[platforms0-fridge_freezer.json][sensor.fridge_freezer_temperature_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Fridge freezer Temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.fridge_freezer_temperature_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_fridge_freezer_sensor_states[platforms0-fridge_freezer.json][sensor.fridge_freezer_temperature_zone_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.fridge_freezer_temperature_zone_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature zone 2',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'temperature_zone_2',
    'unique_id': 'DummyAppliance_Fridge_Freezer-state_temperature_2',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_fridge_freezer_sensor_states[platforms0-fridge_freezer.json][sensor.fridge_freezer_temperature_zone_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Fridge freezer Temperature zone 2',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.fridge_freezer_temperature_zone_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '-18.0',
  })
# ---
# name: test_hob_sensor_states[platforms0-hob.json][sensor.hob_with_extraction-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hob_with_extraction',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:pot-steam-outline',
    'original_name': None,
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'status',
    'unique_id': 'DummyAppliance_hob_w_extr-state_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_hob_sensor_states[platforms0-hob.json][sensor.hob_with_extraction-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hob with extraction',
      'icon': 'mdi:pot-steam-outline',
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hob_with_extraction',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'in_use',
  })
# ---
# name: test_hob_sensor_states[platforms0-hob.json][sensor.hob_with_extraction_plate_1-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hob_with_extraction_plate_1',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Plate 1',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'plate',
    'unique_id': 'DummyAppliance_hob_w_extr-state_plate_step-1',
    'unit_of_measurement': None,
  })
# ---
# name: test_hob_sensor_states[platforms0-hob.json][sensor.hob_with_extraction_plate_1-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hob with extraction Plate 1',
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hob_with_extraction_plate_1',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'plate_step_0',
  })
# ---
# name: test_hob_sensor_states[platforms0-hob.json][sensor.hob_with_extraction_plate_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hob_with_extraction_plate_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Plate 2',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'plate',
    'unique_id': 'DummyAppliance_hob_w_extr-state_plate_step-2',
    'unit_of_measurement': None,
  })
# ---
# name: test_hob_sensor_states[platforms0-hob.json][sensor.hob_with_extraction_plate_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hob with extraction Plate 2',
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hob_with_extraction_plate_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'plate_step_warming',
  })
# ---
# name: test_hob_sensor_states[platforms0-hob.json][sensor.hob_with_extraction_plate_3-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hob_with_extraction_plate_3',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Plate 3',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'plate',
    'unique_id': 'DummyAppliance_hob_w_extr-state_plate_step-3',
    'unit_of_measurement': None,
  })
# ---
# name: test_hob_sensor_states[platforms0-hob.json][sensor.hob_with_extraction_plate_3-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hob with extraction Plate 3',
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hob_with_extraction_plate_3',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'plate_step_8',
  })
# ---
# name: test_hob_sensor_states[platforms0-hob.json][sensor.hob_with_extraction_plate_4-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hob_with_extraction_plate_4',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Plate 4',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'plate',
    'unique_id': 'DummyAppliance_hob_w_extr-state_plate_step-4',
    'unit_of_measurement': None,
  })
# ---
# name: test_hob_sensor_states[platforms0-hob.json][sensor.hob_with_extraction_plate_4-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hob with extraction Plate 4',
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hob_with_extraction_plate_4',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'plate_step_15',
  })
# ---
# name: test_hob_sensor_states[platforms0-hob.json][sensor.hob_with_extraction_plate_5-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hob_with_extraction_plate_5',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Plate 5',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'plate',
    'unique_id': 'DummyAppliance_hob_w_extr-state_plate_step-5',
    'unit_of_measurement': None,
  })
# ---
# name: test_hob_sensor_states[platforms0-hob.json][sensor.hob_with_extraction_plate_5-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hob with extraction Plate 5',
      'options': list([
        'plate_step_0',
        'plate_step_1',
        'plate_step_10',
        'plate_step_11',
        'plate_step_12',
        'plate_step_13',
        'plate_step_14',
        'plate_step_15',
        'plate_step_16',
        'plate_step_17',
        'plate_step_18',
        'plate_step_2',
        'plate_step_3',
        'plate_step_4',
        'plate_step_5',
        'plate_step_6',
        'plate_step_7',
        'plate_step_8',
        'plate_step_9',
        'plate_step_boost',
        'plate_step_boost_2',
        'plate_step_warming',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hob_with_extraction_plate_5',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'plate_step_boost',
  })
# ---
# name: test_sensor_states[platforms0][sensor.freezer-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.freezer',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:fridge-industrial-outline',
    'original_name': None,
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'status',
    'unique_id': 'Dummy_Appliance_1-state_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[platforms0][sensor.freezer-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Freezer',
      'icon': 'mdi:fridge-industrial-outline',
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.freezer',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'in_use',
  })
# ---
# name: test_sensor_states[platforms0][sensor.freezer_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.freezer_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'Dummy_Appliance_1-state_temperature_1',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensor_states[platforms0][sensor.freezer_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Freezer Temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.freezer_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '-18.0',
  })
# ---
# name: test_sensor_states[platforms0][sensor.hood-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hood',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:turbine',
    'original_name': None,
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'status',
    'unique_id': 'DummyAppliance_18-state_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[platforms0][sensor.hood-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hood',
      'icon': 'mdi:turbine',
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hood',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.oven',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:chef-hat',
    'original_name': None,
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'status',
    'unique_id': 'DummyAppliance_12-state_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Oven',
      'icon': 'mdi:chef-hat',
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'in_use',
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven_core_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.oven_core_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Core temperature',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'core_temperature',
    'unique_id': 'DummyAppliance_12-state_core_temperature',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven_core_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Oven Core temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven_core_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '22.0',
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven_elapsed_time-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.oven_elapsed_time',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Elapsed time',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'elapsed_time',
    'unique_id': 'DummyAppliance_12-state_elapsed_time',
    'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven_elapsed_time-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'Oven Elapsed time',
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven_elapsed_time',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven_program-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'almond_macaroons_1_tray',
        'almond_macaroons_2_trays',
        'apple_pie',
        'apple_sponge',
        'auto_roast',
        'baguettes',
        'baiser_one_large',
        'baiser_several_small',
        'beef_fillet_low_temperature_cooking',
        'beef_fillet_roast',
        'beef_hash',
        'beef_wellington',
        'belgian_sponge_cake',
        'biscuits_short_crust_pastry_1_tray',
        'biscuits_short_crust_pastry_2_trays',
        'blueberry_muffins',
        'bottom_heat',
        'braised_beef',
        'braised_veal',
        'butter_cake',
        'carp',
        'cheese_souffle',
        'chicken_thighs',
        'chicken_whole',
        'chocolate_hazlenut_cake_one_large',
        'chocolate_hazlenut_cake_several_small',
        'choux_buns',
        'conventional_heat',
        'custom_program_1',
        'custom_program_10',
        'custom_program_11',
        'custom_program_12',
        'custom_program_13',
        'custom_program_14',
        'custom_program_15',
        'custom_program_16',
        'custom_program_17',
        'custom_program_18',
        'custom_program_19',
        'custom_program_2',
        'custom_program_20',
        'custom_program_3',
        'custom_program_4',
        'custom_program_5',
        'custom_program_6',
        'custom_program_7',
        'custom_program_8',
        'custom_program_9',
        'dark_mixed_grain_bread',
        'defrost',
        'descale',
        'drop_cookies_1_tray',
        'drop_cookies_2_trays',
        'drying',
        'duck',
        'eco_fan_heat',
        'economy_grill',
        'evaporate_water',
        'fan_grill',
        'fan_plus',
        'flat_bread',
        'fruit_flan_puff_pastry',
        'fruit_flan_short_crust_pastry',
        'fruit_streusel_cake',
        'full_grill',
        'ginger_loaf',
        'goose_stuffed',
        'goose_unstuffed',
        'ham_roast',
        'heat_crockery',
        'intensive_bake',
        'keeping_warm',
        'leg_of_lamb',
        'lemon_meringue_pie',
        'linzer_augen_1_tray',
        'linzer_augen_2_trays',
        'low_temperature_cooking',
        'madeira_cake',
        'marble_cake',
        'meat_loaf',
        'microwave',
        'mixed_rye_bread',
        'moisture_plus_auto_roast',
        'moisture_plus_conventional_heat',
        'moisture_plus_fan_plus',
        'moisture_plus_intensive_bake',
        'multigrain_rolls',
        'no_program',
        'osso_buco',
        'pikeperch_fillet_with_vegetables',
        'pizza_oil_cheese_dough_baking_tray',
        'pizza_oil_cheese_dough_round_baking_tine',
        'pizza_yeast_dough_baking_tray',
        'pizza_yeast_dough_round_baking_tine',
        'plaited_loaf',
        'plaited_swiss_loaf',
        'pork_belly',
        'pork_fillet_low_temperature_cooking',
        'pork_fillet_roast',
        'pork_smoked_ribs_low_temperature_cooking',
        'pork_smoked_ribs_roast',
        'pork_with_crackling',
        'potato_cheese_gratin',
        'potato_gratin',
        'prove_15_min',
        'prove_30_min',
        'prove_45_min',
        'pyrolytic',
        'quiche_lorraine',
        'rabbit',
        'rack_of_lamb_with_vegetables',
        'roast_beef_low_temperature_cooking',
        'roast_beef_roast',
        'rye_rolls',
        'sachertorte',
        'saddle_of_lamb_low_temperature_cooking',
        'saddle_of_lamb_roast',
        'saddle_of_roebuck',
        'saddle_of_veal_low_temperature_cooking',
        'saddle_of_veal_roast',
        'saddle_of_venison',
        'salmon_fillet',
        'salmon_trout',
        'savoury_flan_puff_pastry',
        'savoury_flan_short_crust_pastry',
        'seeded_loaf',
        'shabbat_program',
        'spelt_bread',
        'sponge_base',
        'springform_tin_15cm',
        'springform_tin_20cm',
        'springform_tin_25cm',
        'steam_bake',
        'steam_cooking',
        'stollen',
        'swiss_farmhouse_bread',
        'swiss_roll',
        'tart_flambe',
        'tiger_bread',
        'top_heat',
        'trout',
        'turkey_drumsticks',
        'turkey_whole',
        'vanilla_biscuits_1_tray',
        'vanilla_biscuits_2_trays',
        'veal_fillet_low_temperature_cooking',
        'veal_fillet_roast',
        'veal_knuckle',
        'viennese_apple_strudel',
        'walnut_bread',
        'walnut_muffins',
        'white_bread_baking_tin',
        'white_bread_on_tray',
        'white_rolls',
        'yom_tov',
        'yorkshire_pudding',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.oven_program',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Program',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'program_id',
    'unique_id': 'DummyAppliance_12-state_program_id',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven_program-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Oven Program',
      'options': list([
        'almond_macaroons_1_tray',
        'almond_macaroons_2_trays',
        'apple_pie',
        'apple_sponge',
        'auto_roast',
        'baguettes',
        'baiser_one_large',
        'baiser_several_small',
        'beef_fillet_low_temperature_cooking',
        'beef_fillet_roast',
        'beef_hash',
        'beef_wellington',
        'belgian_sponge_cake',
        'biscuits_short_crust_pastry_1_tray',
        'biscuits_short_crust_pastry_2_trays',
        'blueberry_muffins',
        'bottom_heat',
        'braised_beef',
        'braised_veal',
        'butter_cake',
        'carp',
        'cheese_souffle',
        'chicken_thighs',
        'chicken_whole',
        'chocolate_hazlenut_cake_one_large',
        'chocolate_hazlenut_cake_several_small',
        'choux_buns',
        'conventional_heat',
        'custom_program_1',
        'custom_program_10',
        'custom_program_11',
        'custom_program_12',
        'custom_program_13',
        'custom_program_14',
        'custom_program_15',
        'custom_program_16',
        'custom_program_17',
        'custom_program_18',
        'custom_program_19',
        'custom_program_2',
        'custom_program_20',
        'custom_program_3',
        'custom_program_4',
        'custom_program_5',
        'custom_program_6',
        'custom_program_7',
        'custom_program_8',
        'custom_program_9',
        'dark_mixed_grain_bread',
        'defrost',
        'descale',
        'drop_cookies_1_tray',
        'drop_cookies_2_trays',
        'drying',
        'duck',
        'eco_fan_heat',
        'economy_grill',
        'evaporate_water',
        'fan_grill',
        'fan_plus',
        'flat_bread',
        'fruit_flan_puff_pastry',
        'fruit_flan_short_crust_pastry',
        'fruit_streusel_cake',
        'full_grill',
        'ginger_loaf',
        'goose_stuffed',
        'goose_unstuffed',
        'ham_roast',
        'heat_crockery',
        'intensive_bake',
        'keeping_warm',
        'leg_of_lamb',
        'lemon_meringue_pie',
        'linzer_augen_1_tray',
        'linzer_augen_2_trays',
        'low_temperature_cooking',
        'madeira_cake',
        'marble_cake',
        'meat_loaf',
        'microwave',
        'mixed_rye_bread',
        'moisture_plus_auto_roast',
        'moisture_plus_conventional_heat',
        'moisture_plus_fan_plus',
        'moisture_plus_intensive_bake',
        'multigrain_rolls',
        'no_program',
        'osso_buco',
        'pikeperch_fillet_with_vegetables',
        'pizza_oil_cheese_dough_baking_tray',
        'pizza_oil_cheese_dough_round_baking_tine',
        'pizza_yeast_dough_baking_tray',
        'pizza_yeast_dough_round_baking_tine',
        'plaited_loaf',
        'plaited_swiss_loaf',
        'pork_belly',
        'pork_fillet_low_temperature_cooking',
        'pork_fillet_roast',
        'pork_smoked_ribs_low_temperature_cooking',
        'pork_smoked_ribs_roast',
        'pork_with_crackling',
        'potato_cheese_gratin',
        'potato_gratin',
        'prove_15_min',
        'prove_30_min',
        'prove_45_min',
        'pyrolytic',
        'quiche_lorraine',
        'rabbit',
        'rack_of_lamb_with_vegetables',
        'roast_beef_low_temperature_cooking',
        'roast_beef_roast',
        'rye_rolls',
        'sachertorte',
        'saddle_of_lamb_low_temperature_cooking',
        'saddle_of_lamb_roast',
        'saddle_of_roebuck',
        'saddle_of_veal_low_temperature_cooking',
        'saddle_of_veal_roast',
        'saddle_of_venison',
        'salmon_fillet',
        'salmon_trout',
        'savoury_flan_puff_pastry',
        'savoury_flan_short_crust_pastry',
        'seeded_loaf',
        'shabbat_program',
        'spelt_bread',
        'sponge_base',
        'springform_tin_15cm',
        'springform_tin_20cm',
        'springform_tin_25cm',
        'steam_bake',
        'steam_cooking',
        'stollen',
        'swiss_farmhouse_bread',
        'swiss_roll',
        'tart_flambe',
        'tiger_bread',
        'top_heat',
        'trout',
        'turkey_drumsticks',
        'turkey_whole',
        'vanilla_biscuits_1_tray',
        'vanilla_biscuits_2_trays',
        'veal_fillet_low_temperature_cooking',
        'veal_fillet_roast',
        'veal_knuckle',
        'viennese_apple_strudel',
        'walnut_bread',
        'walnut_muffins',
        'white_bread_baking_tin',
        'white_bread_on_tray',
        'white_rolls',
        'yom_tov',
        'yorkshire_pudding',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven_program',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'defrost',
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven_program_phase-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'energy_save',
        'heating_up',
        'not_running',
        'process_finished',
        'process_running',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.oven_program_phase',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Program phase',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'program_phase',
    'unique_id': 'DummyAppliance_12-state_program_phase',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven_program_phase-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Oven Program phase',
      'options': list([
        'energy_save',
        'heating_up',
        'not_running',
        'process_finished',
        'process_running',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven_program_phase',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'heating_up',
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven_program_type-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'automatic_program',
        'cleaning_care_program',
        'maintenance_program',
        'normal_operation_mode',
        'own_program',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.oven_program_type',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Program type',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'program_type',
    'unique_id': 'DummyAppliance_12-state_program_type',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven_program_type-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Oven Program type',
      'options': list([
        'automatic_program',
        'cleaning_care_program',
        'maintenance_program',
        'normal_operation_mode',
        'own_program',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven_program_type',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'own_program',
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven_remaining_time-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.oven_remaining_time',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Remaining time',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_time',
    'unique_id': 'DummyAppliance_12-state_remaining_time',
    'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven_remaining_time-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'Oven Remaining time',
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven_remaining_time',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven_start_in-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.oven_start_in',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Start in',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'start_time',
    'unique_id': 'DummyAppliance_12-state_start_time',
    'unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven_start_in-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'Oven Start in',
      'unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven_start_in',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven_target_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.oven_target_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Target temperature',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'target_temperature',
    'unique_id': 'DummyAppliance_12-state_target_temperature',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven_target_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Oven Target temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven_target_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '25.0',
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.oven_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'DummyAppliance_12-state_temperature_1',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensor_states[platforms0][sensor.oven_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Oven Temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '19.54',
  })
# ---
# name: test_sensor_states[platforms0][sensor.refrigerator-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.refrigerator',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:fridge-industrial-outline',
    'original_name': None,
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'status',
    'unique_id': 'Dummy_Appliance_2-state_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[platforms0][sensor.refrigerator-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Refrigerator',
      'icon': 'mdi:fridge-industrial-outline',
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.refrigerator',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'in_use',
  })
# ---
# name: test_sensor_states[platforms0][sensor.refrigerator_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.refrigerator_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'Dummy_Appliance_2-state_temperature_1',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensor_states[platforms0][sensor.refrigerator_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Refrigerator Temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.refrigerator_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '4.0',
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.washing_machine',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:washing-machine',
    'original_name': None,
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'status',
    'unique_id': 'Dummy_Appliance_3-state_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Washing machine',
      'icon': 'mdi:washing-machine',
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_elapsed_time-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.washing_machine_elapsed_time',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Elapsed time',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'elapsed_time',
    'unique_id': 'Dummy_Appliance_3-state_elapsed_time',
    'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_elapsed_time-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'Washing machine Elapsed time',
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_elapsed_time',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_energy_consumption-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.washing_machine_energy_consumption',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Energy consumption',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'energy_consumption',
    'unique_id': 'Dummy_Appliance_3-current_energy_consumption',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_energy_consumption-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Washing machine Energy consumption',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_energy_consumption',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_energy_forecast-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.washing_machine_energy_forecast',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Energy forecast',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'energy_forecast',
    'unique_id': 'Dummy_Appliance_3-energy_forecast',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_energy_forecast-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Washing machine Energy forecast',
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_energy_forecast',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '10.0',
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_program-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'automatic_plus',
        'clean_machine',
        'cool_air',
        'cottons',
        'cottons_eco',
        'cottons_hygiene',
        'curtains',
        'dark_garments',
        'delicates',
        'denim',
        'down_duvets',
        'down_filled_items',
        'drain_spin',
        'eco_40_60',
        'express_20',
        'first_wash',
        'freshen_up',
        'minimum_iron',
        'no_program',
        'outerwear',
        'pillows',
        'proofing',
        'quick_power_wash',
        'rinse',
        'rinse_out_lint',
        'separate_rinse_starch',
        'shirts',
        'silks',
        'sportswear',
        'starch',
        'steam_care',
        'trainers',
        'warm_air',
        'woollens',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.washing_machine_program',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Program',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'program_id',
    'unique_id': 'Dummy_Appliance_3-state_program_id',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_program-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Washing machine Program',
      'options': list([
        'automatic_plus',
        'clean_machine',
        'cool_air',
        'cottons',
        'cottons_eco',
        'cottons_hygiene',
        'curtains',
        'dark_garments',
        'delicates',
        'denim',
        'down_duvets',
        'down_filled_items',
        'drain_spin',
        'eco_40_60',
        'express_20',
        'first_wash',
        'freshen_up',
        'minimum_iron',
        'no_program',
        'outerwear',
        'pillows',
        'proofing',
        'quick_power_wash',
        'rinse',
        'rinse_out_lint',
        'separate_rinse_starch',
        'shirts',
        'silks',
        'sportswear',
        'starch',
        'steam_care',
        'trainers',
        'warm_air',
        'woollens',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_program',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'no_program',
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_program_phase-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'anti_crease',
        'cleaning',
        'cooling_down',
        'disinfecting',
        'drain',
        'drying',
        'finished',
        'freshen_up_and_moisten',
        'hygiene',
        'main_wash',
        'not_running',
        'pre_wash',
        'rinse',
        'rinse_hold',
        'soak',
        'spin',
        'starch_stop',
        'steam_smoothing',
        'venting',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.washing_machine_program_phase',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Program phase',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'program_phase',
    'unique_id': 'Dummy_Appliance_3-state_program_phase',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_program_phase-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Washing machine Program phase',
      'options': list([
        'anti_crease',
        'cleaning',
        'cooling_down',
        'disinfecting',
        'drain',
        'drying',
        'finished',
        'freshen_up_and_moisten',
        'hygiene',
        'main_wash',
        'not_running',
        'pre_wash',
        'rinse',
        'rinse_hold',
        'soak',
        'spin',
        'starch_stop',
        'steam_smoothing',
        'venting',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_program_phase',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'not_running',
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_program_type-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'automatic_program',
        'cleaning_care_program',
        'maintenance_program',
        'normal_operation_mode',
        'own_program',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.washing_machine_program_type',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Program type',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'program_type',
    'unique_id': 'Dummy_Appliance_3-state_program_type',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_program_type-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Washing machine Program type',
      'options': list([
        'automatic_program',
        'cleaning_care_program',
        'maintenance_program',
        'normal_operation_mode',
        'own_program',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_program_type',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'normal_operation_mode',
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_remaining_time-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.washing_machine_remaining_time',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Remaining time',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_time',
    'unique_id': 'Dummy_Appliance_3-state_remaining_time',
    'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_remaining_time-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'Washing machine Remaining time',
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_remaining_time',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_spin_speed-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.washing_machine_spin_speed',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Spin speed',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'spin_speed',
    'unique_id': 'Dummy_Appliance_3-state_spinning_speed',
    'unit_of_measurement': 'rpm',
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_spin_speed-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Washing machine Spin speed',
      'unit_of_measurement': 'rpm',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_spin_speed',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_start_in-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.washing_machine_start_in',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Start in',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'start_time',
    'unique_id': 'Dummy_Appliance_3-state_start_time',
    'unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_start_in-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'Washing machine Start in',
      'unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_start_in',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_target_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.washing_machine_target_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Target temperature',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'target_temperature',
    'unique_id': 'Dummy_Appliance_3-state_target_temperature',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_target_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Washing machine Target temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_target_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_water_consumption-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.washing_machine_water_consumption',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WATER: 'water'>,
    'original_icon': None,
    'original_name': 'Water consumption',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'water_consumption',
    'unique_id': 'Dummy_Appliance_3-current_water_consumption',
    'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_water_consumption-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'water',
      'friendly_name': 'Washing machine Water consumption',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_water_consumption',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_water_forecast-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.washing_machine_water_forecast',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Water forecast',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'water_forecast',
    'unique_id': 'Dummy_Appliance_3-water_forecast',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensor_states[platforms0][sensor.washing_machine_water_forecast-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Washing machine Water forecast',
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_water_forecast',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.freezer-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.freezer',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:fridge-industrial-outline',
    'original_name': None,
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'status',
    'unique_id': 'Dummy_Appliance_1-state_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.freezer-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Freezer',
      'icon': 'mdi:fridge-industrial-outline',
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.freezer',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'in_use',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.freezer_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.freezer_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'Dummy_Appliance_1-state_temperature_1',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.freezer_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Freezer Temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.freezer_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '-18.0',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.hood-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.hood',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:turbine',
    'original_name': None,
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'status',
    'unique_id': 'DummyAppliance_18-state_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.hood-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Hood',
      'icon': 'mdi:turbine',
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.hood',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.oven',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:chef-hat',
    'original_name': None,
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'status',
    'unique_id': 'DummyAppliance_12-state_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Oven',
      'icon': 'mdi:chef-hat',
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'in_use',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven_core_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.oven_core_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Core temperature',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'core_temperature',
    'unique_id': 'DummyAppliance_12-state_core_temperature',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven_core_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Oven Core temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven_core_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '22.0',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven_elapsed_time-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.oven_elapsed_time',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Elapsed time',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'elapsed_time',
    'unique_id': 'DummyAppliance_12-state_elapsed_time',
    'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven_elapsed_time-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'Oven Elapsed time',
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven_elapsed_time',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven_program-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'almond_macaroons_1_tray',
        'almond_macaroons_2_trays',
        'apple_pie',
        'apple_sponge',
        'auto_roast',
        'baguettes',
        'baiser_one_large',
        'baiser_several_small',
        'beef_fillet_low_temperature_cooking',
        'beef_fillet_roast',
        'beef_hash',
        'beef_wellington',
        'belgian_sponge_cake',
        'biscuits_short_crust_pastry_1_tray',
        'biscuits_short_crust_pastry_2_trays',
        'blueberry_muffins',
        'bottom_heat',
        'braised_beef',
        'braised_veal',
        'butter_cake',
        'carp',
        'cheese_souffle',
        'chicken_thighs',
        'chicken_whole',
        'chocolate_hazlenut_cake_one_large',
        'chocolate_hazlenut_cake_several_small',
        'choux_buns',
        'conventional_heat',
        'custom_program_1',
        'custom_program_10',
        'custom_program_11',
        'custom_program_12',
        'custom_program_13',
        'custom_program_14',
        'custom_program_15',
        'custom_program_16',
        'custom_program_17',
        'custom_program_18',
        'custom_program_19',
        'custom_program_2',
        'custom_program_20',
        'custom_program_3',
        'custom_program_4',
        'custom_program_5',
        'custom_program_6',
        'custom_program_7',
        'custom_program_8',
        'custom_program_9',
        'dark_mixed_grain_bread',
        'defrost',
        'descale',
        'drop_cookies_1_tray',
        'drop_cookies_2_trays',
        'drying',
        'duck',
        'eco_fan_heat',
        'economy_grill',
        'evaporate_water',
        'fan_grill',
        'fan_plus',
        'flat_bread',
        'fruit_flan_puff_pastry',
        'fruit_flan_short_crust_pastry',
        'fruit_streusel_cake',
        'full_grill',
        'ginger_loaf',
        'goose_stuffed',
        'goose_unstuffed',
        'ham_roast',
        'heat_crockery',
        'intensive_bake',
        'keeping_warm',
        'leg_of_lamb',
        'lemon_meringue_pie',
        'linzer_augen_1_tray',
        'linzer_augen_2_trays',
        'low_temperature_cooking',
        'madeira_cake',
        'marble_cake',
        'meat_loaf',
        'microwave',
        'mixed_rye_bread',
        'moisture_plus_auto_roast',
        'moisture_plus_conventional_heat',
        'moisture_plus_fan_plus',
        'moisture_plus_intensive_bake',
        'multigrain_rolls',
        'no_program',
        'osso_buco',
        'pikeperch_fillet_with_vegetables',
        'pizza_oil_cheese_dough_baking_tray',
        'pizza_oil_cheese_dough_round_baking_tine',
        'pizza_yeast_dough_baking_tray',
        'pizza_yeast_dough_round_baking_tine',
        'plaited_loaf',
        'plaited_swiss_loaf',
        'pork_belly',
        'pork_fillet_low_temperature_cooking',
        'pork_fillet_roast',
        'pork_smoked_ribs_low_temperature_cooking',
        'pork_smoked_ribs_roast',
        'pork_with_crackling',
        'potato_cheese_gratin',
        'potato_gratin',
        'prove_15_min',
        'prove_30_min',
        'prove_45_min',
        'pyrolytic',
        'quiche_lorraine',
        'rabbit',
        'rack_of_lamb_with_vegetables',
        'roast_beef_low_temperature_cooking',
        'roast_beef_roast',
        'rye_rolls',
        'sachertorte',
        'saddle_of_lamb_low_temperature_cooking',
        'saddle_of_lamb_roast',
        'saddle_of_roebuck',
        'saddle_of_veal_low_temperature_cooking',
        'saddle_of_veal_roast',
        'saddle_of_venison',
        'salmon_fillet',
        'salmon_trout',
        'savoury_flan_puff_pastry',
        'savoury_flan_short_crust_pastry',
        'seeded_loaf',
        'shabbat_program',
        'spelt_bread',
        'sponge_base',
        'springform_tin_15cm',
        'springform_tin_20cm',
        'springform_tin_25cm',
        'steam_bake',
        'steam_cooking',
        'stollen',
        'swiss_farmhouse_bread',
        'swiss_roll',
        'tart_flambe',
        'tiger_bread',
        'top_heat',
        'trout',
        'turkey_drumsticks',
        'turkey_whole',
        'vanilla_biscuits_1_tray',
        'vanilla_biscuits_2_trays',
        'veal_fillet_low_temperature_cooking',
        'veal_fillet_roast',
        'veal_knuckle',
        'viennese_apple_strudel',
        'walnut_bread',
        'walnut_muffins',
        'white_bread_baking_tin',
        'white_bread_on_tray',
        'white_rolls',
        'yom_tov',
        'yorkshire_pudding',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.oven_program',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Program',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'program_id',
    'unique_id': 'DummyAppliance_12-state_program_id',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven_program-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Oven Program',
      'options': list([
        'almond_macaroons_1_tray',
        'almond_macaroons_2_trays',
        'apple_pie',
        'apple_sponge',
        'auto_roast',
        'baguettes',
        'baiser_one_large',
        'baiser_several_small',
        'beef_fillet_low_temperature_cooking',
        'beef_fillet_roast',
        'beef_hash',
        'beef_wellington',
        'belgian_sponge_cake',
        'biscuits_short_crust_pastry_1_tray',
        'biscuits_short_crust_pastry_2_trays',
        'blueberry_muffins',
        'bottom_heat',
        'braised_beef',
        'braised_veal',
        'butter_cake',
        'carp',
        'cheese_souffle',
        'chicken_thighs',
        'chicken_whole',
        'chocolate_hazlenut_cake_one_large',
        'chocolate_hazlenut_cake_several_small',
        'choux_buns',
        'conventional_heat',
        'custom_program_1',
        'custom_program_10',
        'custom_program_11',
        'custom_program_12',
        'custom_program_13',
        'custom_program_14',
        'custom_program_15',
        'custom_program_16',
        'custom_program_17',
        'custom_program_18',
        'custom_program_19',
        'custom_program_2',
        'custom_program_20',
        'custom_program_3',
        'custom_program_4',
        'custom_program_5',
        'custom_program_6',
        'custom_program_7',
        'custom_program_8',
        'custom_program_9',
        'dark_mixed_grain_bread',
        'defrost',
        'descale',
        'drop_cookies_1_tray',
        'drop_cookies_2_trays',
        'drying',
        'duck',
        'eco_fan_heat',
        'economy_grill',
        'evaporate_water',
        'fan_grill',
        'fan_plus',
        'flat_bread',
        'fruit_flan_puff_pastry',
        'fruit_flan_short_crust_pastry',
        'fruit_streusel_cake',
        'full_grill',
        'ginger_loaf',
        'goose_stuffed',
        'goose_unstuffed',
        'ham_roast',
        'heat_crockery',
        'intensive_bake',
        'keeping_warm',
        'leg_of_lamb',
        'lemon_meringue_pie',
        'linzer_augen_1_tray',
        'linzer_augen_2_trays',
        'low_temperature_cooking',
        'madeira_cake',
        'marble_cake',
        'meat_loaf',
        'microwave',
        'mixed_rye_bread',
        'moisture_plus_auto_roast',
        'moisture_plus_conventional_heat',
        'moisture_plus_fan_plus',
        'moisture_plus_intensive_bake',
        'multigrain_rolls',
        'no_program',
        'osso_buco',
        'pikeperch_fillet_with_vegetables',
        'pizza_oil_cheese_dough_baking_tray',
        'pizza_oil_cheese_dough_round_baking_tine',
        'pizza_yeast_dough_baking_tray',
        'pizza_yeast_dough_round_baking_tine',
        'plaited_loaf',
        'plaited_swiss_loaf',
        'pork_belly',
        'pork_fillet_low_temperature_cooking',
        'pork_fillet_roast',
        'pork_smoked_ribs_low_temperature_cooking',
        'pork_smoked_ribs_roast',
        'pork_with_crackling',
        'potato_cheese_gratin',
        'potato_gratin',
        'prove_15_min',
        'prove_30_min',
        'prove_45_min',
        'pyrolytic',
        'quiche_lorraine',
        'rabbit',
        'rack_of_lamb_with_vegetables',
        'roast_beef_low_temperature_cooking',
        'roast_beef_roast',
        'rye_rolls',
        'sachertorte',
        'saddle_of_lamb_low_temperature_cooking',
        'saddle_of_lamb_roast',
        'saddle_of_roebuck',
        'saddle_of_veal_low_temperature_cooking',
        'saddle_of_veal_roast',
        'saddle_of_venison',
        'salmon_fillet',
        'salmon_trout',
        'savoury_flan_puff_pastry',
        'savoury_flan_short_crust_pastry',
        'seeded_loaf',
        'shabbat_program',
        'spelt_bread',
        'sponge_base',
        'springform_tin_15cm',
        'springform_tin_20cm',
        'springform_tin_25cm',
        'steam_bake',
        'steam_cooking',
        'stollen',
        'swiss_farmhouse_bread',
        'swiss_roll',
        'tart_flambe',
        'tiger_bread',
        'top_heat',
        'trout',
        'turkey_drumsticks',
        'turkey_whole',
        'vanilla_biscuits_1_tray',
        'vanilla_biscuits_2_trays',
        'veal_fillet_low_temperature_cooking',
        'veal_fillet_roast',
        'veal_knuckle',
        'viennese_apple_strudel',
        'walnut_bread',
        'walnut_muffins',
        'white_bread_baking_tin',
        'white_bread_on_tray',
        'white_rolls',
        'yom_tov',
        'yorkshire_pudding',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven_program',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'defrost',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven_program_phase-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'energy_save',
        'heating_up',
        'not_running',
        'process_finished',
        'process_running',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.oven_program_phase',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Program phase',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'program_phase',
    'unique_id': 'DummyAppliance_12-state_program_phase',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven_program_phase-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Oven Program phase',
      'options': list([
        'energy_save',
        'heating_up',
        'not_running',
        'process_finished',
        'process_running',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven_program_phase',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'heating_up',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven_program_type-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'automatic_program',
        'cleaning_care_program',
        'maintenance_program',
        'normal_operation_mode',
        'own_program',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.oven_program_type',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Program type',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'program_type',
    'unique_id': 'DummyAppliance_12-state_program_type',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven_program_type-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Oven Program type',
      'options': list([
        'automatic_program',
        'cleaning_care_program',
        'maintenance_program',
        'normal_operation_mode',
        'own_program',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven_program_type',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'own_program',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven_remaining_time-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.oven_remaining_time',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Remaining time',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_time',
    'unique_id': 'DummyAppliance_12-state_remaining_time',
    'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven_remaining_time-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'Oven Remaining time',
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven_remaining_time',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '5',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven_start_in-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.oven_start_in',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Start in',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'start_time',
    'unique_id': 'DummyAppliance_12-state_start_time',
    'unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven_start_in-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'Oven Start in',
      'unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven_start_in',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven_target_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.oven_target_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Target temperature',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'target_temperature',
    'unique_id': 'DummyAppliance_12-state_target_temperature',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven_target_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Oven Target temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven_target_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '25.0',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.oven_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'DummyAppliance_12-state_temperature_1',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.oven_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Oven Temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.oven_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '19.54',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.refrigerator-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.refrigerator',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:fridge-industrial-outline',
    'original_name': None,
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'status',
    'unique_id': 'Dummy_Appliance_2-state_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.refrigerator-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Refrigerator',
      'icon': 'mdi:fridge-industrial-outline',
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.refrigerator',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'in_use',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.refrigerator_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.refrigerator_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'Dummy_Appliance_2-state_temperature_1',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.refrigerator_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Refrigerator Temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.refrigerator_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '4.0',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.washing_machine',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:washing-machine',
    'original_name': None,
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'status',
    'unique_id': 'Dummy_Appliance_3-state_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Washing machine',
      'icon': 'mdi:washing-machine',
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_elapsed_time-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.washing_machine_elapsed_time',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Elapsed time',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'elapsed_time',
    'unique_id': 'Dummy_Appliance_3-state_elapsed_time',
    'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_elapsed_time-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'Washing machine Elapsed time',
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_elapsed_time',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_energy_consumption-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.washing_machine_energy_consumption',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Energy consumption',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'energy_consumption',
    'unique_id': 'Dummy_Appliance_3-current_energy_consumption',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_energy_consumption-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Washing machine Energy consumption',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_energy_consumption',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_energy_forecast-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.washing_machine_energy_forecast',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Energy forecast',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'energy_forecast',
    'unique_id': 'Dummy_Appliance_3-energy_forecast',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_energy_forecast-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Washing machine Energy forecast',
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_energy_forecast',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '10.0',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_program-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'automatic_plus',
        'clean_machine',
        'cool_air',
        'cottons',
        'cottons_eco',
        'cottons_hygiene',
        'curtains',
        'dark_garments',
        'delicates',
        'denim',
        'down_duvets',
        'down_filled_items',
        'drain_spin',
        'eco_40_60',
        'express_20',
        'first_wash',
        'freshen_up',
        'minimum_iron',
        'no_program',
        'outerwear',
        'pillows',
        'proofing',
        'quick_power_wash',
        'rinse',
        'rinse_out_lint',
        'separate_rinse_starch',
        'shirts',
        'silks',
        'sportswear',
        'starch',
        'steam_care',
        'trainers',
        'warm_air',
        'woollens',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.washing_machine_program',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Program',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'program_id',
    'unique_id': 'Dummy_Appliance_3-state_program_id',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_program-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Washing machine Program',
      'options': list([
        'automatic_plus',
        'clean_machine',
        'cool_air',
        'cottons',
        'cottons_eco',
        'cottons_hygiene',
        'curtains',
        'dark_garments',
        'delicates',
        'denim',
        'down_duvets',
        'down_filled_items',
        'drain_spin',
        'eco_40_60',
        'express_20',
        'first_wash',
        'freshen_up',
        'minimum_iron',
        'no_program',
        'outerwear',
        'pillows',
        'proofing',
        'quick_power_wash',
        'rinse',
        'rinse_out_lint',
        'separate_rinse_starch',
        'shirts',
        'silks',
        'sportswear',
        'starch',
        'steam_care',
        'trainers',
        'warm_air',
        'woollens',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_program',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'no_program',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_program_phase-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'anti_crease',
        'cleaning',
        'cooling_down',
        'disinfecting',
        'drain',
        'drying',
        'finished',
        'freshen_up_and_moisten',
        'hygiene',
        'main_wash',
        'not_running',
        'pre_wash',
        'rinse',
        'rinse_hold',
        'soak',
        'spin',
        'starch_stop',
        'steam_smoothing',
        'venting',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.washing_machine_program_phase',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Program phase',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'program_phase',
    'unique_id': 'Dummy_Appliance_3-state_program_phase',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_program_phase-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Washing machine Program phase',
      'options': list([
        'anti_crease',
        'cleaning',
        'cooling_down',
        'disinfecting',
        'drain',
        'drying',
        'finished',
        'freshen_up_and_moisten',
        'hygiene',
        'main_wash',
        'not_running',
        'pre_wash',
        'rinse',
        'rinse_hold',
        'soak',
        'spin',
        'starch_stop',
        'steam_smoothing',
        'venting',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_program_phase',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'not_running',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_program_type-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'automatic_program',
        'cleaning_care_program',
        'maintenance_program',
        'normal_operation_mode',
        'own_program',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.washing_machine_program_type',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Program type',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'program_type',
    'unique_id': 'Dummy_Appliance_3-state_program_type',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_program_type-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Washing machine Program type',
      'options': list([
        'automatic_program',
        'cleaning_care_program',
        'maintenance_program',
        'normal_operation_mode',
        'own_program',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_program_type',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'normal_operation_mode',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_remaining_time-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.washing_machine_remaining_time',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Remaining time',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_time',
    'unique_id': 'Dummy_Appliance_3-state_remaining_time',
    'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_remaining_time-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'Washing machine Remaining time',
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_remaining_time',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_spin_speed-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.washing_machine_spin_speed',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Spin speed',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'spin_speed',
    'unique_id': 'Dummy_Appliance_3-state_spinning_speed',
    'unit_of_measurement': 'rpm',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_spin_speed-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Washing machine Spin speed',
      'unit_of_measurement': 'rpm',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_spin_speed',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_start_in-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.washing_machine_start_in',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Start in',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'start_time',
    'unique_id': 'Dummy_Appliance_3-state_start_time',
    'unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_start_in-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'Washing machine Start in',
      'unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_start_in',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_target_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.washing_machine_target_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Target temperature',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'target_temperature',
    'unique_id': 'Dummy_Appliance_3-state_target_temperature',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_target_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Washing machine Target temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_target_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_water_consumption-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.washing_machine_water_consumption',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WATER: 'water'>,
    'original_icon': None,
    'original_name': 'Water consumption',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'water_consumption',
    'unique_id': 'Dummy_Appliance_3-current_water_consumption',
    'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_water_consumption-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'water',
      'friendly_name': 'Washing machine Water consumption',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_water_consumption',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_water_forecast-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.washing_machine_water_forecast',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Water forecast',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'water_forecast',
    'unique_id': 'Dummy_Appliance_3-water_forecast',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensor_states_api_push[platforms0][sensor.washing_machine_water_forecast-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Washing machine Water forecast',
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.washing_machine_water_forecast',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_vacuum_sensor_states[platforms0-vacuum_device.json][sensor.robot_vacuum_cleaner-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.robot_vacuum_cleaner',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:robot-vacuum',
    'original_name': None,
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'status',
    'unique_id': 'Dummy_Vacuum_1-state_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_vacuum_sensor_states[platforms0-vacuum_device.json][sensor.robot_vacuum_cleaner-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Robot vacuum cleaner',
      'icon': 'mdi:robot-vacuum',
      'options': list([
        'autocleaning',
        'failure',
        'idle',
        'in_use',
        'not_connected',
        'off',
        'on',
        'pause',
        'program_ended',
        'program_interrupted',
        'programmed',
        'rinse_hold',
        'service',
        'supercooling',
        'supercooling_superfreezing',
        'superfreezing',
        'superheating',
        'waiting_to_start',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.robot_vacuum_cleaner',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on',
  })
# ---
# name: test_vacuum_sensor_states[platforms0-vacuum_device.json][sensor.robot_vacuum_cleaner_battery-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.robot_vacuum_cleaner_battery',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Battery',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'Dummy_Vacuum_1-state_battery',
    'unit_of_measurement': '%',
  })
# ---
# name: test_vacuum_sensor_states[platforms0-vacuum_device.json][sensor.robot_vacuum_cleaner_battery-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Robot vacuum cleaner Battery',
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.robot_vacuum_cleaner_battery',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '65',
  })
# ---
# name: test_vacuum_sensor_states[platforms0-vacuum_device.json][sensor.robot_vacuum_cleaner_elapsed_time-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.robot_vacuum_cleaner_elapsed_time',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Elapsed time',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'elapsed_time',
    'unique_id': 'Dummy_Vacuum_1-state_elapsed_time',
    'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
  })
# ---
# name: test_vacuum_sensor_states[platforms0-vacuum_device.json][sensor.robot_vacuum_cleaner_elapsed_time-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'Robot vacuum cleaner Elapsed time',
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.robot_vacuum_cleaner_elapsed_time',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_vacuum_sensor_states[platforms0-vacuum_device.json][sensor.robot_vacuum_cleaner_program-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'auto',
        'no_program',
        'silent',
        'spot',
        'turbo',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.robot_vacuum_cleaner_program',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Program',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'program_id',
    'unique_id': 'Dummy_Vacuum_1-state_program_id',
    'unit_of_measurement': None,
  })
# ---
# name: test_vacuum_sensor_states[platforms0-vacuum_device.json][sensor.robot_vacuum_cleaner_program-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Robot vacuum cleaner Program',
      'options': list([
        'auto',
        'no_program',
        'silent',
        'spot',
        'turbo',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.robot_vacuum_cleaner_program',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'auto',
  })
# ---
# name: test_vacuum_sensor_states[platforms0-vacuum_device.json][sensor.robot_vacuum_cleaner_program_type-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'automatic_program',
        'cleaning_care_program',
        'maintenance_program',
        'normal_operation_mode',
        'own_program',
      ]),
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.robot_vacuum_cleaner_program_type',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Program type',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'program_type',
    'unique_id': 'Dummy_Vacuum_1-state_program_type',
    'unit_of_measurement': None,
  })
# ---
# name: test_vacuum_sensor_states[platforms0-vacuum_device.json][sensor.robot_vacuum_cleaner_program_type-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Robot vacuum cleaner Program type',
      'options': list([
        'automatic_program',
        'cleaning_care_program',
        'maintenance_program',
        'normal_operation_mode',
        'own_program',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.robot_vacuum_cleaner_program_type',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'normal_operation_mode',
  })
# ---
# name: test_vacuum_sensor_states[platforms0-vacuum_device.json][sensor.robot_vacuum_cleaner_remaining_time-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.robot_vacuum_cleaner_remaining_time',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Remaining time',
    'platform': 'miele',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_time',
    'unique_id': 'Dummy_Vacuum_1-state_remaining_time',
    'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
  })
# ---
# name: test_vacuum_sensor_states[platforms0-vacuum_device.json][sensor.robot_vacuum_cleaner_remaining_time-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'Robot vacuum cleaner Remaining time',
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.robot_vacuum_cleaner_remaining_time',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
