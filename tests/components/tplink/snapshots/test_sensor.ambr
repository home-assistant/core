# serializer version: 1
# name: test_states[my_device-entry]
  DeviceRegistryEntrySnapshot({
    'area_id': None,
    'config_entries': <ANY>,
    'configuration_url': None,
    'connections': set({
      tuple(
        'mac',
        'aa:bb:cc:dd:ee:ff',
      ),
    }),
    'disabled_by': None,
    'entry_type': None,
    'hw_version': '1.0.0',
    'id': <ANY>,
    'identifiers': set({
      tuple(
        'tplink',
        '123456789ABCDEFGH',
      ),
    }),
    'is_new': False,
    'labels': set({
    }),
    'manufacturer': 'TP-Link',
    'model': 'HS100',
    'name': 'my_device',
    'name_by_user': None,
    'primary_config_entry': <ANY>,
    'serial_number': None,
    'suggested_area': None,
    'sw_version': '1.0.0',
    'via_device_id': None,
  })
# ---
# name: test_states[sensor.my_device_alarm_source-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': <RegistryEntryDisabler.INTEGRATION: 'integration'>,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.my_device_alarm_source',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Alarm source',
    'platform': 'tplink',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'alarm_source',
    'unique_id': '123456789ABCDEFGH_alarm_source',
    'unit_of_measurement': None,
  })
# ---
# name: test_states[sensor.my_device_auto_off_at-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.my_device_auto_off_at',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Auto off at',
    'platform': 'tplink',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'auto_off_at',
    'unique_id': '123456789ABCDEFGH_auto_off_at',
    'unit_of_measurement': None,
  })
# ---
# name: test_states[sensor.my_device_auto_off_at-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'timestamp',
      'friendly_name': 'my_device Auto off at',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.my_device_auto_off_at',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2024-06-24T09:03:11+00:00',
  })
# ---
# name: test_states[sensor.my_device_battery_level-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.my_device_battery_level',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Battery level',
    'platform': 'tplink',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'battery_level',
    'unique_id': '123456789ABCDEFGH_battery_level',
    'unit_of_measurement': '%',
  })
# ---
# name: test_states[sensor.my_device_battery_level-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'my_device Battery level',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.my_device_battery_level',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '85',
  })
# ---
# name: test_states[sensor.my_device_current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.my_device_current',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.CURRENT: 'current'>,
    'original_icon': None,
    'original_name': 'Current',
    'platform': 'tplink',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'current',
    'unique_id': '123456789ABCDEFGH_current_a',
    'unit_of_measurement': 'A',
  })
# ---
# name: test_states[sensor.my_device_current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'current',
      'friendly_name': 'my_device Current',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'A',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.my_device_current',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '5.04',
  })
# ---
# name: test_states[sensor.my_device_current_consumption-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.my_device_current_consumption',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Current consumption',
    'platform': 'tplink',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'current_consumption',
    'unique_id': '123456789ABCDEFGH_current_power_w',
    'unit_of_measurement': 'W',
  })
# ---
# name: test_states[sensor.my_device_current_consumption-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'my_device Current consumption',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'W',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.my_device_current_consumption',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '5.2',
  })
# ---
# name: test_states[sensor.my_device_device_time-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': <RegistryEntryDisabler.INTEGRATION: 'integration'>,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.my_device_device_time',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Device time',
    'platform': 'tplink',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'device_time',
    'unique_id': '123456789ABCDEFGH_device_time',
    'unit_of_measurement': None,
  })
# ---
# name: test_states[sensor.my_device_humidity-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.my_device_humidity',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
    'original_icon': None,
    'original_name': 'Humidity',
    'platform': 'tplink',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'humidity',
    'unique_id': '123456789ABCDEFGH_humidity',
    'unit_of_measurement': '%',
  })
# ---
# name: test_states[sensor.my_device_humidity-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'humidity',
      'friendly_name': 'my_device Humidity',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.my_device_humidity',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '12',
  })
# ---
# name: test_states[sensor.my_device_on_since-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': <RegistryEntryDisabler.INTEGRATION: 'integration'>,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.my_device_on_since',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'On since',
    'platform': 'tplink',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'on_since',
    'unique_id': '123456789ABCDEFGH_on_since',
    'unit_of_measurement': None,
  })
# ---
# name: test_states[sensor.my_device_report_interval-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': <RegistryEntryDisabler.INTEGRATION: 'integration'>,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.my_device_report_interval',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Report interval',
    'platform': 'tplink',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'report_interval',
    'unique_id': '123456789ABCDEFGH_report_interval',
    'unit_of_measurement': '%',
  })
# ---
# name: test_states[sensor.my_device_signal_level-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.my_device_signal_level',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Signal level',
    'platform': 'tplink',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'signal_level',
    'unique_id': '123456789ABCDEFGH_signal_level',
    'unit_of_measurement': None,
  })
# ---
# name: test_states[sensor.my_device_signal_level-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'my_device Signal level',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.my_device_signal_level',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_states[sensor.my_device_signal_strength-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': <RegistryEntryDisabler.INTEGRATION: 'integration'>,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.my_device_signal_strength',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.SIGNAL_STRENGTH: 'signal_strength'>,
    'original_icon': None,
    'original_name': 'Signal strength',
    'platform': 'tplink',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'rssi',
    'unique_id': '123456789ABCDEFGH_rssi',
    'unit_of_measurement': None,
  })
# ---
# name: test_states[sensor.my_device_ssid-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': <RegistryEntryDisabler.INTEGRATION: 'integration'>,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.my_device_ssid',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'SSID',
    'platform': 'tplink',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'ssid',
    'unique_id': '123456789ABCDEFGH_ssid',
    'unit_of_measurement': None,
  })
# ---
# name: test_states[sensor.my_device_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': <RegistryEntryDisabler.INTEGRATION: 'integration'>,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.my_device_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature',
    'platform': 'tplink',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'temperature',
    'unique_id': '123456789ABCDEFGH_temperature',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_states[sensor.my_device_this_month_s_consumption-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.my_device_this_month_s_consumption',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 3,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': "This month's consumption",
    'platform': 'tplink',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'consumption_this_month',
    'unique_id': '123456789ABCDEFGH_consumption_this_month',
    'unit_of_measurement': 'kWh',
  })
# ---
# name: test_states[sensor.my_device_this_month_s_consumption-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': "my_device This month's consumption",
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': 'kWh',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.my_device_this_month_s_consumption',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '15.345',
  })
# ---
# name: test_states[sensor.my_device_today_s_consumption-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.my_device_today_s_consumption',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 3,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': "Today's consumption",
    'platform': 'tplink',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'consumption_today',
    'unique_id': '123456789ABCDEFGH_today_energy_kwh',
    'unit_of_measurement': 'kWh',
  })
# ---
# name: test_states[sensor.my_device_today_s_consumption-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': "my_device Today's consumption",
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': 'kWh',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.my_device_today_s_consumption',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '5.23',
  })
# ---
# name: test_states[sensor.my_device_total_consumption-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.my_device_total_consumption',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 3,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Total consumption',
    'platform': 'tplink',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'consumption_total',
    'unique_id': '123456789ABCDEFGH_total_energy_kwh',
    'unit_of_measurement': 'kWh',
  })
# ---
# name: test_states[sensor.my_device_total_consumption-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'my_device Total consumption',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': 'kWh',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.my_device_total_consumption',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '30.005',
  })
# ---
# name: test_states[sensor.my_device_voltage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.my_device_voltage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.VOLTAGE: 'voltage'>,
    'original_icon': None,
    'original_name': 'Voltage',
    'platform': 'tplink',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'voltage',
    'unique_id': '123456789ABCDEFGH_voltage',
    'unit_of_measurement': 'V',
  })
# ---
# name: test_states[sensor.my_device_voltage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'voltage',
      'friendly_name': 'my_device Voltage',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'V',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.my_device_voltage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '121.1',
  })
# ---
