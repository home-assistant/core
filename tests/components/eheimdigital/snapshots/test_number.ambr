# serializer version: 1
# name: test_setup[number.mock_classicledcontrol_e_system_led_brightness-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'max': 100,
      'min': 0,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'number',
    'entity_category': <EntityCategory.CONFIG: 'config'>,
    'entity_id': 'number.mock_classicledcontrol_e_system_led_brightness',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'System LED brightness',
    'platform': 'eheimdigital',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'system_led',
    'unique_id': '00:00:00:00:00:01_system_led',
    'unit_of_measurement': '%',
  })
# ---
# name: test_setup[number.mock_classicledcontrol_e_system_led_brightness-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Mock classicLEDcontrol+e System LED brightness',
      'max': 100,
      'min': 0,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'number.mock_classicledcontrol_e_system_led_brightness',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_setup[number.mock_classicvario_day_speed-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'max': 100.0,
      'min': 0.0,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'number',
    'entity_category': <EntityCategory.CONFIG: 'config'>,
    'entity_id': 'number.mock_classicvario_day_speed',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Day speed',
    'platform': 'eheimdigital',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'day_speed',
    'unique_id': '00:00:00:00:00:03_day_speed',
    'unit_of_measurement': '%',
  })
# ---
# name: test_setup[number.mock_classicvario_day_speed-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Mock classicVARIO Day speed',
      'max': 100.0,
      'min': 0.0,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'number.mock_classicvario_day_speed',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_setup[number.mock_classicvario_manual_speed-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'max': 100.0,
      'min': 0.0,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'number',
    'entity_category': <EntityCategory.CONFIG: 'config'>,
    'entity_id': 'number.mock_classicvario_manual_speed',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Manual speed',
    'platform': 'eheimdigital',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'manual_speed',
    'unique_id': '00:00:00:00:00:03_manual_speed',
    'unit_of_measurement': '%',
  })
# ---
# name: test_setup[number.mock_classicvario_manual_speed-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Mock classicVARIO Manual speed',
      'max': 100.0,
      'min': 0.0,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'number.mock_classicvario_manual_speed',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_setup[number.mock_classicvario_night_speed-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'max': 100.0,
      'min': 0.0,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'number',
    'entity_category': <EntityCategory.CONFIG: 'config'>,
    'entity_id': 'number.mock_classicvario_night_speed',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Night speed',
    'platform': 'eheimdigital',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'night_speed',
    'unique_id': '00:00:00:00:00:03_night_speed',
    'unit_of_measurement': '%',
  })
# ---
# name: test_setup[number.mock_classicvario_night_speed-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Mock classicVARIO Night speed',
      'max': 100.0,
      'min': 0.0,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'number.mock_classicvario_night_speed',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_setup[number.mock_classicvario_system_led_brightness-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'max': 100,
      'min': 0,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'number',
    'entity_category': <EntityCategory.CONFIG: 'config'>,
    'entity_id': 'number.mock_classicvario_system_led_brightness',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'System LED brightness',
    'platform': 'eheimdigital',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'system_led',
    'unique_id': '00:00:00:00:00:03_system_led',
    'unit_of_measurement': '%',
  })
# ---
# name: test_setup[number.mock_classicvario_system_led_brightness-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Mock classicVARIO System LED brightness',
      'max': 100,
      'min': 0,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'number.mock_classicvario_system_led_brightness',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_setup[number.mock_heater_night_temperature_offset-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'max': 5,
      'min': -5,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 0.5,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'number',
    'entity_category': <EntityCategory.CONFIG: 'config'>,
    'entity_id': 'number.mock_heater_night_temperature_offset',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <NumberDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Night temperature offset',
    'platform': 'eheimdigital',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'night_temperature_offset',
    'unique_id': '00:00:00:00:00:02_night_temperature_offset',
    'unit_of_measurement': None,
  })
# ---
# name: test_setup[number.mock_heater_night_temperature_offset-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Mock Heater Night temperature offset',
      'max': 5,
      'min': -5,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 0.5,
    }),
    'context': <ANY>,
    'entity_id': 'number.mock_heater_night_temperature_offset',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_setup[number.mock_heater_system_led_brightness-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'max': 100,
      'min': 0,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'number',
    'entity_category': <EntityCategory.CONFIG: 'config'>,
    'entity_id': 'number.mock_heater_system_led_brightness',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'System LED brightness',
    'platform': 'eheimdigital',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'system_led',
    'unique_id': '00:00:00:00:00:02_system_led',
    'unit_of_measurement': '%',
  })
# ---
# name: test_setup[number.mock_heater_system_led_brightness-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Mock Heater System LED brightness',
      'max': 100,
      'min': 0,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'number.mock_heater_system_led_brightness',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_setup[number.mock_heater_temperature_offset-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'max': 3,
      'min': -3,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 0.1,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'number',
    'entity_category': <EntityCategory.CONFIG: 'config'>,
    'entity_id': 'number.mock_heater_temperature_offset',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <NumberDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature offset',
    'platform': 'eheimdigital',
    'previous_unique_id': None,
    'suggested_object_id': None,
    'supported_features': 0,
    'translation_key': 'temperature_offset',
    'unique_id': '00:00:00:00:00:02_temperature_offset',
    'unit_of_measurement': None,
  })
# ---
# name: test_setup[number.mock_heater_temperature_offset-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Mock Heater Temperature offset',
      'max': 3,
      'min': -3,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 0.1,
    }),
    'context': <ANY>,
    'entity_id': 'number.mock_heater_temperature_offset',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
