# serializer version: 1
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_cloud_coverage-current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_cloud_coverage',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'openweathermap Cloud coverage',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-clouds',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_cloud_coverage-current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'friendly_name': 'openweathermap Cloud coverage',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_cloud_coverage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '75',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_condition-current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_condition',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'openweathermap Condition',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-condition',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_condition-current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'friendly_name': 'openweathermap Condition',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_condition',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'cloudy',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_dew_point-current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_dew_point',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'openweathermap Dew Point',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-dew_point',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_dew_point-current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'device_class': 'temperature',
      'friendly_name': 'openweathermap Dew Point',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_dew_point',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '3.99',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_feels_like_temperature-current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_feels_like_temperature',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'openweathermap Feels like temperature',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-feels_like_temperature',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_feels_like_temperature-current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'device_class': 'temperature',
      'friendly_name': 'openweathermap Feels like temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_feels_like_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2.07',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_humidity-current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_humidity',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
    'original_icon': None,
    'original_name': 'openweathermap Humidity',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-humidity',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_humidity-current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'device_class': 'humidity',
      'friendly_name': 'openweathermap Humidity',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_humidity',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '82',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_precipitation_kind-current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_precipitation_kind',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'openweathermap Precipitation kind',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-precipitation_kind',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_precipitation_kind-current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'friendly_name': 'openweathermap Precipitation kind',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_precipitation_kind',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'Rain',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_pressure-current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_pressure',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'openweathermap Pressure',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-pressure',
    'unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_pressure-current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'device_class': 'pressure',
      'friendly_name': 'openweathermap Pressure',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_pressure',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1000',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_rain-current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_rain',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.PRECIPITATION_INTENSITY: 'precipitation_intensity'>,
    'original_icon': None,
    'original_name': 'openweathermap Rain',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-rain',
    'unit_of_measurement': <UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR: 'mm/h'>,
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_rain-current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'device_class': 'precipitation_intensity',
      'friendly_name': 'openweathermap Rain',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR: 'mm/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_rain',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1.21',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_snow-current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_snow',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.PRECIPITATION_INTENSITY: 'precipitation_intensity'>,
    'original_icon': None,
    'original_name': 'openweathermap Snow',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-snow',
    'unit_of_measurement': <UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR: 'mm/h'>,
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_snow-current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'device_class': 'precipitation_intensity',
      'friendly_name': 'openweathermap Snow',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR: 'mm/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_snow',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_temperature-current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_temperature',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'openweathermap Temperature',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-temperature',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_temperature-current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'device_class': 'temperature',
      'friendly_name': 'openweathermap Temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '6.84',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_uv_index-current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_uv_index',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'openweathermap UV Index',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-uv_index',
    'unit_of_measurement': 'UV index',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_uv_index-current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'friendly_name': 'openweathermap UV Index',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'UV index',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_uv_index',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.13',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_visibility-current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_visibility',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'openweathermap Visibility',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-visibility_distance',
    'unit_of_measurement': <UnitOfLength.METERS: 'm'>,
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_visibility-current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'device_class': 'distance',
      'friendly_name': 'openweathermap Visibility',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.METERS: 'm'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_visibility',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '10000',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_weather-current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_weather',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'openweathermap Weather',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-weather',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_weather-current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'friendly_name': 'openweathermap Weather',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_weather',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'broken clouds',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_weather_code-current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_weather_code',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'openweathermap Weather Code',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-weather_code',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_weather_code-current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'friendly_name': 'openweathermap Weather Code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_weather_code',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '803',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_wind_bearing-current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_wind_bearing',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'openweathermap Wind bearing',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-wind_bearing',
    'unit_of_measurement': '째',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_wind_bearing-current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'friendly_name': 'openweathermap Wind bearing',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '째',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_wind_bearing',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '199',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_wind_speed-current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_wind_speed',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WIND_SPEED: 'wind_speed'>,
    'original_icon': None,
    'original_name': 'openweathermap Wind speed',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-wind_speed',
    'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][sensor.openweathermap_wind_speed-current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'device_class': 'wind_speed',
      'friendly_name': 'openweathermap Wind speed',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_wind_speed',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '35.39',
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][weather.openweathermap-current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'weather',
    'entity_category': None,
    'entity_id': 'weather.openweathermap',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'openweathermap',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[current-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return0][weather.openweathermap-current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'apparent_temperature': 2.1,
      'attribution': 'Data provided by OpenWeatherMap',
      'cloud_coverage': 75,
      'dew_point': 4.0,
      'friendly_name': 'openweathermap',
      'humidity': 82,
      'precipitation_unit': <UnitOfPrecipitationDepth.MILLIMETERS: 'mm'>,
      'pressure': 1000.0,
      'pressure_unit': <UnitOfPressure.HPA: 'hPa'>,
      'temperature': 6.8,
      'temperature_unit': <UnitOfTemperature.CELSIUS: '째C'>,
      'visibility_unit': <UnitOfLength.KILOMETERS: 'km'>,
      'wind_bearing': 199,
      'wind_speed': 35.39,
      'wind_speed_unit': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'weather.openweathermap',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'cloudy',
  })
# ---
# name: test_sensor_states[forecast-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return1][weather.openweathermap-forecast-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'weather',
    'entity_category': None,
    'entity_id': 'weather.openweathermap',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'openweathermap',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': <WeatherEntityFeature: 2>,
    'translation_key': None,
    'unique_id': 'None',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[forecast-pyopenweathermap.client.free_client.OWMFreeClient.get_weather-mock_return1][weather.openweathermap-forecast-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'apparent_temperature': 2.1,
      'attribution': 'Data provided by OpenWeatherMap',
      'cloud_coverage': 75,
      'dew_point': 4.0,
      'friendly_name': 'openweathermap',
      'humidity': 82,
      'precipitation_unit': <UnitOfPrecipitationDepth.MILLIMETERS: 'mm'>,
      'pressure': 1000.0,
      'pressure_unit': <UnitOfPressure.HPA: 'hPa'>,
      'supported_features': <WeatherEntityFeature: 2>,
      'temperature': 6.8,
      'temperature_unit': <UnitOfTemperature.CELSIUS: '째C'>,
      'visibility_unit': <UnitOfLength.KILOMETERS: 'km'>,
      'wind_bearing': 199,
      'wind_speed': 35.39,
      'wind_speed_unit': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'weather.openweathermap',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'cloudy',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_cloud_coverage-v3.0-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_cloud_coverage',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'openweathermap Cloud coverage',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-clouds',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_cloud_coverage-v3.0-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'friendly_name': 'openweathermap Cloud coverage',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_cloud_coverage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '75',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_condition-v3.0-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_condition',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'openweathermap Condition',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-condition',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_condition-v3.0-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'friendly_name': 'openweathermap Condition',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_condition',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'cloudy',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_dew_point-v3.0-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_dew_point',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'openweathermap Dew Point',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-dew_point',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_dew_point-v3.0-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'device_class': 'temperature',
      'friendly_name': 'openweathermap Dew Point',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_dew_point',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '3.99',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_feels_like_temperature-v3.0-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_feels_like_temperature',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'openweathermap Feels like temperature',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-feels_like_temperature',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_feels_like_temperature-v3.0-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'device_class': 'temperature',
      'friendly_name': 'openweathermap Feels like temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_feels_like_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2.07',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_humidity-v3.0-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_humidity',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
    'original_icon': None,
    'original_name': 'openweathermap Humidity',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-humidity',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_humidity-v3.0-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'device_class': 'humidity',
      'friendly_name': 'openweathermap Humidity',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_humidity',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '82',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_precipitation_kind-v3.0-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_precipitation_kind',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'openweathermap Precipitation kind',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-precipitation_kind',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_precipitation_kind-v3.0-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'friendly_name': 'openweathermap Precipitation kind',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_precipitation_kind',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'Rain',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_pressure-v3.0-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_pressure',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'openweathermap Pressure',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-pressure',
    'unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_pressure-v3.0-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'device_class': 'pressure',
      'friendly_name': 'openweathermap Pressure',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_pressure',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1000',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_rain-v3.0-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_rain',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.PRECIPITATION_INTENSITY: 'precipitation_intensity'>,
    'original_icon': None,
    'original_name': 'openweathermap Rain',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-rain',
    'unit_of_measurement': <UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR: 'mm/h'>,
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_rain-v3.0-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'device_class': 'precipitation_intensity',
      'friendly_name': 'openweathermap Rain',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR: 'mm/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_rain',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1.21',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_snow-v3.0-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_snow',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.PRECIPITATION_INTENSITY: 'precipitation_intensity'>,
    'original_icon': None,
    'original_name': 'openweathermap Snow',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-snow',
    'unit_of_measurement': <UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR: 'mm/h'>,
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_snow-v3.0-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'device_class': 'precipitation_intensity',
      'friendly_name': 'openweathermap Snow',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR: 'mm/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_snow',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_temperature-v3.0-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_temperature',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'openweathermap Temperature',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-temperature',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_temperature-v3.0-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'device_class': 'temperature',
      'friendly_name': 'openweathermap Temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '6.84',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_uv_index-v3.0-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_uv_index',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'openweathermap UV Index',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-uv_index',
    'unit_of_measurement': 'UV index',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_uv_index-v3.0-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'friendly_name': 'openweathermap UV Index',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'UV index',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_uv_index',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.13',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_visibility-v3.0-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_visibility',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'openweathermap Visibility',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-visibility_distance',
    'unit_of_measurement': <UnitOfLength.METERS: 'm'>,
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_visibility-v3.0-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'device_class': 'distance',
      'friendly_name': 'openweathermap Visibility',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.METERS: 'm'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_visibility',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '10000',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_weather-v3.0-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_weather',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'openweathermap Weather',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-weather',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_weather-v3.0-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'friendly_name': 'openweathermap Weather',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_weather',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'broken clouds',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_weather_code-v3.0-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_weather_code',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'openweathermap Weather Code',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-weather_code',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_weather_code-v3.0-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'friendly_name': 'openweathermap Weather Code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_weather_code',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '803',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_wind_bearing-v3.0-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_wind_bearing',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'openweathermap Wind bearing',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-wind_bearing',
    'unit_of_measurement': '째',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_wind_bearing-v3.0-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'friendly_name': 'openweathermap Wind bearing',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '째',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_wind_bearing',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '199',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_wind_speed-v3.0-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.openweathermap_wind_speed',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WIND_SPEED: 'wind_speed'>,
    'original_icon': None,
    'original_name': 'openweathermap Wind speed',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'None-wind_speed',
    'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][sensor.openweathermap_wind_speed-v3.0-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by OpenWeatherMap',
      'device_class': 'wind_speed',
      'friendly_name': 'openweathermap Wind speed',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.openweathermap_wind_speed',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '35.39',
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][weather.openweathermap-v3.0-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'weather',
    'entity_category': None,
    'entity_id': 'weather.openweathermap',
    'has_entity_name': False,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'openweathermap',
    'platform': 'openweathermap',
    'previous_unique_id': None,
    'supported_features': <WeatherEntityFeature: 3>,
    'translation_key': None,
    'unique_id': 'None',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[v3.0-pyopenweathermap.client.onecall_client.OWMOneCallClient.get_weather-mock_return2][weather.openweathermap-v3.0-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'apparent_temperature': 2.1,
      'attribution': 'Data provided by OpenWeatherMap',
      'cloud_coverage': 75,
      'dew_point': 4.0,
      'friendly_name': 'openweathermap',
      'humidity': 82,
      'precipitation_unit': <UnitOfPrecipitationDepth.MILLIMETERS: 'mm'>,
      'pressure': 1000.0,
      'pressure_unit': <UnitOfPressure.HPA: 'hPa'>,
      'supported_features': <WeatherEntityFeature: 3>,
      'temperature': 6.8,
      'temperature_unit': <UnitOfTemperature.CELSIUS: '째C'>,
      'visibility_unit': <UnitOfLength.KILOMETERS: 'km'>,
      'wind_bearing': 199,
      'wind_speed': 35.39,
      'wind_speed_unit': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'weather.openweathermap',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'cloudy',
  })
# ---
