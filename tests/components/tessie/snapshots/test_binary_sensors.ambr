# serializer version: 1
# name: test_binary_sensors[binary_sensor.energy_site_backup_capable-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': None,
    'entity_id': 'binary_sensor.energy_site_backup_capable',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Backup capable',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'backup_capable',
    'unique_id': '123456-backup_capable',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.energy_site_backup_capable-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Energy Site Backup capable',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.energy_site_backup_capable',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on',
  })
# ---
# name: test_binary_sensors[binary_sensor.energy_site_grid_services_active-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': None,
    'entity_id': 'binary_sensor.energy_site_grid_services_active',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Grid services active',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_services_active',
    'unique_id': '123456-grid_services_active',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.energy_site_grid_services_active-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Energy Site Grid services active',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.energy_site_grid_services_active',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_binary_sensors[binary_sensor.energy_site_grid_services_enabled-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': None,
    'entity_id': 'binary_sensor.energy_site_grid_services_enabled',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Grid services enabled',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'components_grid_services_enabled',
    'unique_id': '123456-components_grid_services_enabled',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.energy_site_grid_services_enabled-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Energy Site Grid services enabled',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.energy_site_grid_services_enabled',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_auto_seat_climate_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_auto_seat_climate_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Auto seat climate left',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_auto_seat_climate_left',
    'unique_id': 'VINVINVIN-climate_state_auto_seat_climate_left',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_auto_seat_climate_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Auto seat climate left',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_auto_seat_climate_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_auto_seat_climate_right-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_auto_seat_climate_right',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Auto seat climate right',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_auto_seat_climate_right',
    'unique_id': 'VINVINVIN-climate_state_auto_seat_climate_right',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_auto_seat_climate_right-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Auto seat climate right',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_auto_seat_climate_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_auto_steering_wheel_heater-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_auto_steering_wheel_heater',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Auto steering wheel heater',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_auto_steering_wheel_heat',
    'unique_id': 'VINVINVIN-climate_state_auto_steering_wheel_heat',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_auto_steering_wheel_heater-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Auto steering wheel heater',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_auto_steering_wheel_heater',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_battery_heater-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_battery_heater',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.HEAT: 'heat'>,
    'original_icon': None,
    'original_name': 'Battery heater',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_battery_heater',
    'unique_id': 'VINVINVIN-climate_state_battery_heater',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_battery_heater-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'heat',
      'friendly_name': 'Test Battery heater',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_battery_heater',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_cabin_overheat_protection-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_cabin_overheat_protection',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.RUNNING: 'running'>,
    'original_icon': None,
    'original_name': 'Cabin overheat protection',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_cabin_overheat_protection',
    'unique_id': 'VINVINVIN-climate_state_cabin_overheat_protection',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_cabin_overheat_protection-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'running',
      'friendly_name': 'Test Cabin overheat protection',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_cabin_overheat_protection',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_cabin_overheat_protection_actively_cooling-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_cabin_overheat_protection_actively_cooling',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.HEAT: 'heat'>,
    'original_icon': None,
    'original_name': 'Cabin overheat protection actively cooling',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_cabin_overheat_protection_actively_cooling',
    'unique_id': 'VINVINVIN-climate_state_cabin_overheat_protection_actively_cooling',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_cabin_overheat_protection_actively_cooling-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'heat',
      'friendly_name': 'Test Cabin overheat protection actively cooling',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_cabin_overheat_protection_actively_cooling',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_charge_cable-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_charge_cable',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.CONNECTIVITY: 'connectivity'>,
    'original_icon': None,
    'original_name': 'Charge cable',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_conn_charge_cable',
    'unique_id': 'VINVINVIN-charge_state_conn_charge_cable',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_charge_cable-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'connectivity',
      'friendly_name': 'Test Charge cable',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_charge_cable',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_charging-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': None,
    'entity_id': 'binary_sensor.test_charging',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.BATTERY_CHARGING: 'battery_charging'>,
    'original_icon': None,
    'original_name': 'Charging',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charging_state',
    'unique_id': 'VINVINVIN-charge_state_charging_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_charging-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery_charging',
      'friendly_name': 'Test Charging',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_charging',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_dashcam-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_dashcam',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.RUNNING: 'running'>,
    'original_icon': None,
    'original_name': 'Dashcam',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_dashcam_state',
    'unique_id': 'VINVINVIN-vehicle_state_dashcam_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_dashcam-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'running',
      'friendly_name': 'Test Dashcam',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_dashcam',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_front_driver_door-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_front_driver_door',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.DOOR: 'door'>,
    'original_icon': None,
    'original_name': 'Front driver door',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_df',
    'unique_id': 'VINVINVIN-vehicle_state_df',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_front_driver_door-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'door',
      'friendly_name': 'Test Front driver door',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_front_driver_door',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_front_driver_window-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_front_driver_window',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.WINDOW: 'window'>,
    'original_icon': None,
    'original_name': 'Front driver window',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_fd_window',
    'unique_id': 'VINVINVIN-vehicle_state_fd_window',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_front_driver_window-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'window',
      'friendly_name': 'Test Front driver window',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_front_driver_window',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_front_passenger_door-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_front_passenger_door',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.DOOR: 'door'>,
    'original_icon': None,
    'original_name': 'Front passenger door',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_pf',
    'unique_id': 'VINVINVIN-vehicle_state_pf',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_front_passenger_door-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'door',
      'friendly_name': 'Test Front passenger door',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_front_passenger_door',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_front_passenger_window-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_front_passenger_window',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.WINDOW: 'window'>,
    'original_icon': None,
    'original_name': 'Front passenger window',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_fp_window',
    'unique_id': 'VINVINVIN-vehicle_state_fp_window',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_front_passenger_window-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'window',
      'friendly_name': 'Test Front passenger window',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_front_passenger_window',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_preconditioning_enabled-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_preconditioning_enabled',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Preconditioning enabled',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_preconditioning_enabled',
    'unique_id': 'VINVINVIN-charge_state_preconditioning_enabled',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_preconditioning_enabled-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Preconditioning enabled',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_preconditioning_enabled',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_rear_driver_door-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_rear_driver_door',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.DOOR: 'door'>,
    'original_icon': None,
    'original_name': 'Rear driver door',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_dr',
    'unique_id': 'VINVINVIN-vehicle_state_dr',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_rear_driver_door-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'door',
      'friendly_name': 'Test Rear driver door',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_rear_driver_door',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_rear_driver_window-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_rear_driver_window',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.WINDOW: 'window'>,
    'original_icon': None,
    'original_name': 'Rear driver window',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_rd_window',
    'unique_id': 'VINVINVIN-vehicle_state_rd_window',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_rear_driver_window-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'window',
      'friendly_name': 'Test Rear driver window',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_rear_driver_window',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_rear_passenger_door-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_rear_passenger_door',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.DOOR: 'door'>,
    'original_icon': None,
    'original_name': 'Rear passenger door',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_pr',
    'unique_id': 'VINVINVIN-vehicle_state_pr',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_rear_passenger_door-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'door',
      'friendly_name': 'Test Rear passenger door',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_rear_passenger_door',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_rear_passenger_window-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_rear_passenger_window',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.WINDOW: 'window'>,
    'original_icon': None,
    'original_name': 'Rear passenger window',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_rp_window',
    'unique_id': 'VINVINVIN-vehicle_state_rp_window',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_rear_passenger_window-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'window',
      'friendly_name': 'Test Rear passenger window',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_rear_passenger_window',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_scheduled_charging_pending-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_scheduled_charging_pending',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Scheduled charging pending',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_scheduled_charging_pending',
    'unique_id': 'VINVINVIN-charge_state_scheduled_charging_pending',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_scheduled_charging_pending-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Scheduled charging pending',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_scheduled_charging_pending',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_status-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': None,
    'entity_id': 'binary_sensor.test_status',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.CONNECTIVITY: 'connectivity'>,
    'original_icon': None,
    'original_name': 'Status',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'state',
    'unique_id': 'VINVINVIN-state',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_status-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'connectivity',
      'friendly_name': 'Test Status',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_status',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_tire_pressure_warning_front_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_tire_pressure_warning_front_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.PROBLEM: 'problem'>,
    'original_icon': None,
    'original_name': 'Tire pressure warning front left',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_soft_warning_fl',
    'unique_id': 'VINVINVIN-vehicle_state_tpms_soft_warning_fl',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_tire_pressure_warning_front_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'problem',
      'friendly_name': 'Test Tire pressure warning front left',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_tire_pressure_warning_front_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_tire_pressure_warning_front_right-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_tire_pressure_warning_front_right',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.PROBLEM: 'problem'>,
    'original_icon': None,
    'original_name': 'Tire pressure warning front right',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_soft_warning_fr',
    'unique_id': 'VINVINVIN-vehicle_state_tpms_soft_warning_fr',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_tire_pressure_warning_front_right-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'problem',
      'friendly_name': 'Test Tire pressure warning front right',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_tire_pressure_warning_front_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_tire_pressure_warning_rear_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_tire_pressure_warning_rear_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.PROBLEM: 'problem'>,
    'original_icon': None,
    'original_name': 'Tire pressure warning rear left',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_soft_warning_rl',
    'unique_id': 'VINVINVIN-vehicle_state_tpms_soft_warning_rl',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_tire_pressure_warning_rear_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'problem',
      'friendly_name': 'Test Tire pressure warning rear left',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_tire_pressure_warning_rear_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_tire_pressure_warning_rear_right-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_tire_pressure_warning_rear_right',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.PROBLEM: 'problem'>,
    'original_icon': None,
    'original_name': 'Tire pressure warning rear right',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_soft_warning_rr',
    'unique_id': 'VINVINVIN-vehicle_state_tpms_soft_warning_rr',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_tire_pressure_warning_rear_right-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'problem',
      'friendly_name': 'Test Tire pressure warning rear right',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_tire_pressure_warning_rear_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_trip_charging-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_trip_charging',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Trip charging',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_trip_charging',
    'unique_id': 'VINVINVIN-charge_state_trip_charging',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_trip_charging-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Trip charging',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_trip_charging',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_binary_sensors[binary_sensor.test_user_present-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': None,
    'entity_id': 'binary_sensor.test_user_present',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.OCCUPANCY: 'occupancy'>,
    'original_icon': None,
    'original_name': 'User present',
    'platform': 'tessie',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_is_user_present',
    'unique_id': 'VINVINVIN-vehicle_state_is_user_present',
    'unit_of_measurement': None,
  })
# ---
# name: test_binary_sensors[binary_sensor.test_user_present-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'occupancy',
      'friendly_name': 'Test User present',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_user_present',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
