# serializer version: 1
# name: test_agents_download[with_hassio]
  dict({
    'id': 1,
    'result': None,
    'success': True,
    'type': 'result',
  })
# ---
# name: test_agents_download[without_hassio]
  dict({
    'id': 1,
    'result': None,
    'success': True,
    'type': 'result',
  })
# ---
# name: test_agents_download_exception
  dict({
    'error': dict({
      'code': 'backup_agents_download',
      'message': 'Boom',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_agents_download_unknown_agent
  dict({
    'error': dict({
      'code': 'unknown_agent',
      'message': 'Agent domain.test not found',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_agents_info[with_hassio]
  dict({
    'id': 1,
    'result': dict({
      'agents': list([
        dict({
          'agent_id': 'backup.local',
        }),
        dict({
          'agent_id': 'domain.test',
        }),
      ]),
      'syncing': False,
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_agents_info[without_hassio]
  dict({
    'id': 1,
    'result': dict({
      'agents': list([
        dict({
          'agent_id': 'backup.local',
        }),
        dict({
          'agent_id': 'domain.test',
        }),
      ]),
      'syncing': False,
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_agents_list_backups[with_hassio]
  dict({
    'id': 1,
    'result': list([
      dict({
        'agent_id': 'domain.test',
        'backup_id': 'abc123',
        'date': '1970-01-01T00:00:00Z',
        'name': 'Test',
        'protected': False,
        'size': 13.37,
      }),
    ]),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_agents_list_backups[without_hassio]
  dict({
    'id': 1,
    'result': list([
      dict({
        'agent_id': 'domain.test',
        'backup_id': 'abc123',
        'date': '1970-01-01T00:00:00Z',
        'name': 'Test',
        'protected': False,
        'size': 13.37,
      }),
    ]),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_backup_end[with_hassio-hass_access_token]
  dict({
    'error': dict({
      'code': 'only_supervisor',
      'message': 'Only allowed as Supervisor',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_end[with_hassio-hass_supervisor_access_token]
  dict({
    'id': 1,
    'result': None,
    'success': True,
    'type': 'result',
  })
# ---
# name: test_backup_end[without_hassio-hass_access_token]
  dict({
    'error': dict({
      'code': 'unknown_command',
      'message': 'Unknown command.',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_end[without_hassio-hass_supervisor_access_token]
  dict({
    'error': dict({
      'code': 'unknown_command',
      'message': 'Unknown command.',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_end_exception[exception0]
  dict({
    'error': dict({
      'code': 'post_backup_actions_failed',
      'message': '',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_end_exception[exception1]
  dict({
    'error': dict({
      'code': 'post_backup_actions_failed',
      'message': 'Boom',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_end_exception[exception2]
  dict({
    'error': dict({
      'code': 'post_backup_actions_failed',
      'message': 'Boom',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_start[with_hassio-hass_access_token]
  dict({
    'error': dict({
      'code': 'only_supervisor',
      'message': 'Only allowed as Supervisor',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_start[with_hassio-hass_supervisor_access_token]
  dict({
    'id': 1,
    'result': None,
    'success': True,
    'type': 'result',
  })
# ---
# name: test_backup_start[without_hassio-hass_access_token]
  dict({
    'error': dict({
      'code': 'unknown_command',
      'message': 'Unknown command.',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_start[without_hassio-hass_supervisor_access_token]
  dict({
    'error': dict({
      'code': 'unknown_command',
      'message': 'Unknown command.',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_start_exception[exception0]
  dict({
    'error': dict({
      'code': 'pre_backup_actions_failed',
      'message': '',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_start_exception[exception1]
  dict({
    'error': dict({
      'code': 'pre_backup_actions_failed',
      'message': 'Boom',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_start_exception[exception2]
  dict({
    'error': dict({
      'code': 'pre_backup_actions_failed',
      'message': 'Boom',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_config_info[storage_data0]
  dict({
    'id': 1,
    'result': dict({
      'config': dict({
        'last_automatic_backup': None,
        'max_copies': None,
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_config_info[storage_data1]
  dict({
    'id': 1,
    'result': dict({
      'config': dict({
        'last_automatic_backup': '2024-10-26T02:00:00+00:00',
        'max_copies': 3,
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_config_info[storage_data2]
  dict({
    'id': 1,
    'result': dict({
      'config': dict({
        'last_automatic_backup': None,
        'max_copies': 3,
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_config_info[storage_data3]
  dict({
    'id': 1,
    'result': dict({
      'config': dict({
        'last_automatic_backup': '2024-10-26T02:00:00+00:00',
        'max_copies': None,
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_config_update
  dict({
    'id': 1,
    'result': dict({
      'config': dict({
        'last_automatic_backup': None,
        'max_copies': None,
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_config_update.1
  dict({
    'id': 3,
    'result': dict({
      'config': dict({
        'last_automatic_backup': None,
        'max_copies': 5,
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_details[with_hassio-with_backup_content]
  dict({
    'error': dict({
      'code': 'unknown_command',
      'message': 'Unknown command.',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_details[with_hassio-without_backup_content]
  dict({
    'error': dict({
      'code': 'unknown_command',
      'message': 'Unknown command.',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_details[without_hassio-with_backup_content]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
      }),
      'backup': dict({
        'agent_ids': list([
          'backup.local',
        ]),
        'backup_id': 'abc123',
        'date': '1970-01-01T00:00:00.000Z',
        'name': 'Test',
        'protected': False,
        'size': 0.0,
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_details[without_hassio-without_backup_content]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
      }),
      'backup': None,
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_details_with_errors[BackupAgentUnreachableError]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
        'domain.test': 'The backup agent is unreachable.',
      }),
      'backup': dict({
        'agent_ids': list([
          'backup.local',
        ]),
        'backup_id': 'abc123',
        'date': '1970-01-01T00:00:00.000Z',
        'name': 'Test',
        'protected': False,
        'size': 0.0,
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_details_with_errors[side_effect0]
  dict({
    'error': dict({
      'code': 'home_assistant_error',
      'message': 'Boom!',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_generate[with_hassio-None]
  dict({
    'error': dict({
      'code': 'unknown_command',
      'message': 'Unknown command.',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_generate[with_hassio-data1]
  dict({
    'error': dict({
      'code': 'unknown_command',
      'message': 'Unknown command.',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_generate[with_hassio-data2]
  dict({
    'error': dict({
      'code': 'unknown_command',
      'message': 'Unknown command.',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_generate[without_hassio-None]
  dict({
    'id': 1,
    'result': dict({
      'backup_id': '27f5c632',
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_generate[without_hassio-None].1
  dict({
    'event': dict({
      'done': True,
      'stage': None,
      'success': True,
    }),
    'id': 1,
    'type': 'event',
  })
# ---
# name: test_generate[without_hassio-data1]
  dict({
    'id': 1,
    'result': dict({
      'backup_id': '27f5c632',
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_generate[without_hassio-data1].1
  dict({
    'event': dict({
      'done': True,
      'stage': None,
      'success': True,
    }),
    'id': 1,
    'type': 'event',
  })
# ---
# name: test_generate[without_hassio-data2]
  dict({
    'id': 1,
    'result': dict({
      'backup_id': '27f5c632',
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_generate[without_hassio-data2].1
  dict({
    'event': dict({
      'done': True,
      'stage': None,
      'success': True,
    }),
    'id': 1,
    'type': 'event',
  })
# ---
# name: test_generate_without_hassio[params0-expected_extra_call_params0]
  dict({
    'id': 1,
    'result': dict({
      'backup_id': 'abc123',
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_generate_without_hassio[params1-expected_extra_call_params1]
  dict({
    'id': 1,
    'result': dict({
      'backup_id': 'abc123',
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_info[with_hassio]
  dict({
    'error': dict({
      'code': 'unknown_command',
      'message': 'Unknown command.',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_info[without_hassio]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
      }),
      'backing_up': False,
      'backups': list([
        dict({
          'agent_ids': list([
            'backup.local',
          ]),
          'backup_id': 'abc123',
          'date': '1970-01-01T00:00:00.000Z',
          'name': 'Test',
          'protected': False,
          'size': 0.0,
        }),
      ]),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_info_with_errors[BackupAgentUnreachableError]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
        'domain.test': 'The backup agent is unreachable.',
      }),
      'backing_up': False,
      'backups': list([
        dict({
          'agent_ids': list([
            'backup.local',
          ]),
          'backup_id': 'abc123',
          'date': '1970-01-01T00:00:00.000Z',
          'name': 'Test',
          'protected': False,
          'size': 0.0,
        }),
      ]),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_info_with_errors[side_effect0]
  dict({
    'error': dict({
      'code': 'home_assistant_error',
      'message': 'Boom!',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_remove[with_hassio]
  dict({
    'error': dict({
      'code': 'unknown_command',
      'message': 'Unknown command.',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_remove[without_hassio]
  dict({
    'id': 1,
    'result': None,
    'success': True,
    'type': 'result',
  })
# ---
# name: test_restore[with_hassio]
  dict({
    'error': dict({
      'code': 'unknown_command',
      'message': 'Unknown command.',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_restore[without_hassio]
  dict({
    'id': 1,
    'result': None,
    'success': True,
    'type': 'result',
  })
# ---
