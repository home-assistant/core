# serializer version: 1
# name: test_agent_delete_backup
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_agents_download
  dict({
    'id': 1,
    'result': None,
    'success': True,
    'type': 'result',
  })
# ---
# name: test_agents_download_exception
  dict({
    'error': dict({
      'code': 'backup_agents_download',
      'message': 'Boom',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_agents_download_unknown_agent
  dict({
    'error': dict({
      'code': 'unknown_agent',
      'message': 'Agent domain.test not found',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_agents_info
  dict({
    'id': 1,
    'result': dict({
      'agents': list([
        dict({
          'agent_id': 'backup.local',
        }),
        dict({
          'agent_id': 'domain.test',
        }),
      ]),
      'syncing': False,
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_agents_list_backups
  dict({
    'id': 1,
    'result': list([
      dict({
        'addons': list([
          dict({
            'name': 'Test',
            'slug': 'test',
            'version': '1.0.0',
          }),
        ]),
        'agent_id': 'domain.test',
        'backup_id': 'abc123',
        'database_included': True,
        'date': '1970-01-01T00:00:00Z',
        'folders': list([
          'media',
          'share',
        ]),
        'homeassistant_included': True,
        'homeassistant_version': '2024.12.0',
        'name': 'Test',
        'protected': False,
        'size': 13.37,
      }),
    ]),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_backup_end[with_hassio-hass_access_token]
  dict({
    'error': dict({
      'code': 'only_supervisor',
      'message': 'Only allowed as Supervisor',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_end[with_hassio-hass_supervisor_access_token]
  dict({
    'id': 1,
    'result': None,
    'success': True,
    'type': 'result',
  })
# ---
# name: test_backup_end[without_hassio-hass_access_token]
  dict({
    'error': dict({
      'code': 'unknown_command',
      'message': 'Unknown command.',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_end[without_hassio-hass_supervisor_access_token]
  dict({
    'error': dict({
      'code': 'unknown_command',
      'message': 'Unknown command.',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_end_exception[exception0]
  dict({
    'error': dict({
      'code': 'post_backup_actions_failed',
      'message': '',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_end_exception[exception1]
  dict({
    'error': dict({
      'code': 'post_backup_actions_failed',
      'message': 'Boom',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_end_exception[exception2]
  dict({
    'error': dict({
      'code': 'post_backup_actions_failed',
      'message': 'Boom',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_start[with_hassio-hass_access_token]
  dict({
    'error': dict({
      'code': 'only_supervisor',
      'message': 'Only allowed as Supervisor',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_start[with_hassio-hass_supervisor_access_token]
  dict({
    'id': 1,
    'result': None,
    'success': True,
    'type': 'result',
  })
# ---
# name: test_backup_start[without_hassio-hass_access_token]
  dict({
    'error': dict({
      'code': 'unknown_command',
      'message': 'Unknown command.',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_start[without_hassio-hass_supervisor_access_token]
  dict({
    'error': dict({
      'code': 'unknown_command',
      'message': 'Unknown command.',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_start_exception[exception0]
  dict({
    'error': dict({
      'code': 'pre_backup_actions_failed',
      'message': '',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_start_exception[exception1]
  dict({
    'error': dict({
      'code': 'pre_backup_actions_failed',
      'message': 'Boom',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_backup_start_exception[exception2]
  dict({
    'error': dict({
      'code': 'pre_backup_actions_failed',
      'message': 'Boom',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_config_info[storage_data0]
  dict({
    'id': 1,
    'result': dict({
      'config': dict({
        'last_automatic_backup': None,
        'max_copies': None,
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_config_info[storage_data1]
  dict({
    'id': 1,
    'result': dict({
      'config': dict({
        'last_automatic_backup': '2024-10-26T02:00:00+00:00',
        'max_copies': 3,
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_config_info[storage_data2]
  dict({
    'id': 1,
    'result': dict({
      'config': dict({
        'last_automatic_backup': None,
        'max_copies': 3,
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_config_info[storage_data3]
  dict({
    'id': 1,
    'result': dict({
      'config': dict({
        'last_automatic_backup': '2024-10-26T02:00:00+00:00',
        'max_copies': None,
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_config_update
  dict({
    'id': 1,
    'result': dict({
      'config': dict({
        'last_automatic_backup': None,
        'max_copies': None,
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_config_update.1
  dict({
    'id': 3,
    'result': dict({
      'config': dict({
        'last_automatic_backup': None,
        'max_copies': 5,
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_delete[remote_agents0-backups0]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
      }),
      'backing_up': False,
      'backups': list([
      ]),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_delete[remote_agents0-backups0].1
  dict({
    'id': 2,
    'result': dict({
      'agent_errors': dict({
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_delete[remote_agents0-backups0].2
  dict({
    'id': 3,
    'result': dict({
      'agent_errors': dict({
      }),
      'backing_up': False,
      'backups': list([
      ]),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_delete[remote_agents1-backups1]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
      }),
      'backing_up': False,
      'backups': list([
        dict({
          'addons': list([
            dict({
              'name': 'Test',
              'slug': 'test',
              'version': '1.0.0',
            }),
          ]),
          'agent_ids': list([
            'backup.local',
          ]),
          'backup_id': 'abc123',
          'database_included': True,
          'date': '1970-01-01T00:00:00.000Z',
          'folders': list([
            'media',
            'share',
          ]),
          'homeassistant_included': True,
          'homeassistant_version': '2024.12.0',
          'name': 'Test',
          'protected': False,
          'size': 0.0,
        }),
      ]),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_delete[remote_agents1-backups1].1
  dict({
    'id': 2,
    'result': dict({
      'agent_errors': dict({
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_delete[remote_agents1-backups1].2
  dict({
    'id': 3,
    'result': dict({
      'agent_errors': dict({
      }),
      'backing_up': False,
      'backups': list([
      ]),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_delete[remote_agents2-backups2]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
      }),
      'backing_up': False,
      'backups': list([
        dict({
          'addons': list([
            dict({
              'name': 'Test',
              'slug': 'test',
              'version': '1.0.0',
            }),
          ]),
          'agent_ids': list([
            'test.remote',
          ]),
          'backup_id': 'abc123',
          'database_included': True,
          'date': '1970-01-01T00:00:00.000Z',
          'folders': list([
            'media',
            'share',
          ]),
          'homeassistant_included': True,
          'homeassistant_version': '2024.12.0',
          'name': 'Test',
          'protected': False,
          'size': 0.0,
        }),
      ]),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_delete[remote_agents2-backups2].1
  dict({
    'id': 2,
    'result': dict({
      'agent_errors': dict({
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_delete[remote_agents2-backups2].2
  dict({
    'id': 3,
    'result': dict({
      'agent_errors': dict({
      }),
      'backing_up': False,
      'backups': list([
        dict({
          'addons': list([
            dict({
              'name': 'Test',
              'slug': 'test',
              'version': '1.0.0',
            }),
          ]),
          'agent_ids': list([
            'test.remote',
          ]),
          'backup_id': 'abc123',
          'database_included': True,
          'date': '1970-01-01T00:00:00.000Z',
          'folders': list([
            'media',
            'share',
          ]),
          'homeassistant_included': True,
          'homeassistant_version': '2024.12.0',
          'name': 'Test',
          'protected': False,
          'size': 0.0,
        }),
      ]),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_delete[remote_agents3-backups3]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
      }),
      'backing_up': False,
      'backups': list([
        dict({
          'addons': list([
          ]),
          'agent_ids': list([
            'test.remote',
          ]),
          'backup_id': 'def456',
          'database_included': False,
          'date': '1980-01-01T00:00:00.000Z',
          'folders': list([
            'media',
            'share',
          ]),
          'homeassistant_included': True,
          'homeassistant_version': '2024.12.0',
          'name': 'Test 2',
          'protected': False,
          'size': 1.0,
        }),
      ]),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_delete[remote_agents3-backups3].1
  dict({
    'id': 2,
    'result': dict({
      'agent_errors': dict({
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_delete[remote_agents3-backups3].2
  dict({
    'id': 3,
    'result': dict({
      'agent_errors': dict({
      }),
      'backing_up': False,
      'backups': list([
        dict({
          'addons': list([
          ]),
          'agent_ids': list([
            'test.remote',
          ]),
          'backup_id': 'def456',
          'database_included': False,
          'date': '1980-01-01T00:00:00.000Z',
          'folders': list([
            'media',
            'share',
          ]),
          'homeassistant_included': True,
          'homeassistant_version': '2024.12.0',
          'name': 'Test 2',
          'protected': False,
          'size': 1.0,
        }),
      ]),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_delete[remote_agents4-backups4]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
      }),
      'backing_up': False,
      'backups': list([
        dict({
          'addons': list([
            dict({
              'name': 'Test',
              'slug': 'test',
              'version': '1.0.0',
            }),
          ]),
          'agent_ids': list([
            'test.remote',
            'backup.local',
          ]),
          'backup_id': 'abc123',
          'database_included': True,
          'date': '1970-01-01T00:00:00.000Z',
          'folders': list([
            'media',
            'share',
          ]),
          'homeassistant_included': True,
          'homeassistant_version': '2024.12.0',
          'name': 'Test',
          'protected': False,
          'size': 0.0,
        }),
      ]),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_delete[remote_agents4-backups4].1
  dict({
    'id': 2,
    'result': dict({
      'agent_errors': dict({
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_delete[remote_agents4-backups4].2
  dict({
    'id': 3,
    'result': dict({
      'agent_errors': dict({
      }),
      'backing_up': False,
      'backups': list([
        dict({
          'addons': list([
            dict({
              'name': 'Test',
              'slug': 'test',
              'version': '1.0.0',
            }),
          ]),
          'agent_ids': list([
            'test.remote',
          ]),
          'backup_id': 'abc123',
          'database_included': True,
          'date': '1970-01-01T00:00:00.000Z',
          'folders': list([
            'media',
            'share',
          ]),
          'homeassistant_included': True,
          'homeassistant_version': '2024.12.0',
          'name': 'Test',
          'protected': False,
          'size': 0.0,
        }),
      ]),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_delete_with_errors[BackupAgentUnreachableError]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
        'domain.test': 'The backup agent is unreachable.',
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_delete_with_errors[side_effect0]
  dict({
    'error': dict({
      'code': 'home_assistant_error',
      'message': 'Boom!',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_details[remote_agents0-backups0]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
      }),
      'backup': None,
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_details[remote_agents1-backups1]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
      }),
      'backup': dict({
        'addons': list([
          dict({
            'name': 'Test',
            'slug': 'test',
            'version': '1.0.0',
          }),
        ]),
        'agent_ids': list([
          'backup.local',
        ]),
        'backup_id': 'abc123',
        'database_included': True,
        'date': '1970-01-01T00:00:00.000Z',
        'folders': list([
          'media',
          'share',
        ]),
        'homeassistant_included': True,
        'homeassistant_version': '2024.12.0',
        'name': 'Test',
        'protected': False,
        'size': 0.0,
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_details[remote_agents2-backups2]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
      }),
      'backup': dict({
        'addons': list([
          dict({
            'name': 'Test',
            'slug': 'test',
            'version': '1.0.0',
          }),
        ]),
        'agent_ids': list([
          'test.remote',
        ]),
        'backup_id': 'abc123',
        'database_included': True,
        'date': '1970-01-01T00:00:00.000Z',
        'folders': list([
          'media',
          'share',
        ]),
        'homeassistant_included': True,
        'homeassistant_version': '2024.12.0',
        'name': 'Test',
        'protected': False,
        'size': 0.0,
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_details[remote_agents3-backups3]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
      }),
      'backup': None,
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_details[remote_agents4-backups4]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
      }),
      'backup': dict({
        'addons': list([
          dict({
            'name': 'Test',
            'slug': 'test',
            'version': '1.0.0',
          }),
        ]),
        'agent_ids': list([
          'test.remote',
          'backup.local',
        ]),
        'backup_id': 'abc123',
        'database_included': True,
        'date': '1970-01-01T00:00:00.000Z',
        'folders': list([
          'media',
          'share',
        ]),
        'homeassistant_included': True,
        'homeassistant_version': '2024.12.0',
        'name': 'Test',
        'protected': False,
        'size': 0.0,
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_details_with_errors[BackupAgentUnreachableError]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
        'domain.test': 'The backup agent is unreachable.',
      }),
      'backup': dict({
        'addons': list([
          dict({
            'name': 'Test',
            'slug': 'test',
            'version': '1.0.0',
          }),
        ]),
        'agent_ids': list([
          'backup.local',
        ]),
        'backup_id': 'abc123',
        'database_included': True,
        'date': '1970-01-01T00:00:00.000Z',
        'folders': list([
          'media',
          'share',
        ]),
        'homeassistant_included': True,
        'homeassistant_version': '2024.12.0',
        'name': 'Test',
        'protected': False,
        'size': 0.0,
      }),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_details_with_errors[side_effect0]
  dict({
    'error': dict({
      'code': 'home_assistant_error',
      'message': 'Boom!',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_generate[None]
  dict({
    'id': 1,
    'result': dict({
      'backup_job_id': '27f5c632',
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_generate[None].1
  dict({
    'event': dict({
      'done': True,
      'stage': None,
      'success': True,
    }),
    'id': 1,
    'type': 'event',
  })
# ---
# name: test_generate[data1]
  dict({
    'id': 1,
    'result': dict({
      'backup_job_id': '27f5c632',
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_generate[data1].1
  dict({
    'event': dict({
      'done': True,
      'stage': None,
      'success': True,
    }),
    'id': 1,
    'type': 'event',
  })
# ---
# name: test_generate[data2]
  dict({
    'id': 1,
    'result': dict({
      'backup_job_id': '27f5c632',
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_generate[data2].1
  dict({
    'event': dict({
      'done': True,
      'stage': None,
      'success': True,
    }),
    'id': 1,
    'type': 'event',
  })
# ---
# name: test_generate_without_hassio[params0-expected_extra_call_params0]
  dict({
    'id': 1,
    'result': dict({
      'backup_job_id': 'abc123',
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_generate_without_hassio[params1-expected_extra_call_params1]
  dict({
    'id': 1,
    'result': dict({
      'backup_job_id': 'abc123',
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_info[remote_agents0-remote_backups0]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
      }),
      'backing_up': False,
      'backups': list([
        dict({
          'addons': list([
            dict({
              'name': 'Test',
              'slug': 'test',
              'version': '1.0.0',
            }),
          ]),
          'agent_ids': list([
            'backup.local',
          ]),
          'backup_id': 'abc123',
          'database_included': True,
          'date': '1970-01-01T00:00:00.000Z',
          'folders': list([
            'media',
            'share',
          ]),
          'homeassistant_included': True,
          'homeassistant_version': '2024.12.0',
          'name': 'Test',
          'protected': False,
          'size': 0.0,
        }),
      ]),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_info[remote_agents1-remote_backups1]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
      }),
      'backing_up': False,
      'backups': list([
        dict({
          'addons': list([
            dict({
              'name': 'Test',
              'slug': 'test',
              'version': '1.0.0',
            }),
          ]),
          'agent_ids': list([
            'backup.local',
          ]),
          'backup_id': 'abc123',
          'database_included': True,
          'date': '1970-01-01T00:00:00.000Z',
          'folders': list([
            'media',
            'share',
          ]),
          'homeassistant_included': True,
          'homeassistant_version': '2024.12.0',
          'name': 'Test',
          'protected': False,
          'size': 0.0,
        }),
      ]),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_info[remote_agents2-remote_backups2]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
      }),
      'backing_up': False,
      'backups': list([
        dict({
          'addons': list([
            dict({
              'name': 'Test',
              'slug': 'test',
              'version': '1.0.0',
            }),
          ]),
          'agent_ids': list([
            'test.remote',
            'backup.local',
          ]),
          'backup_id': 'abc123',
          'database_included': True,
          'date': '1970-01-01T00:00:00.000Z',
          'folders': list([
            'media',
            'share',
          ]),
          'homeassistant_included': True,
          'homeassistant_version': '2024.12.0',
          'name': 'Test',
          'protected': False,
          'size': 0.0,
        }),
      ]),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_info[remote_agents3-remote_backups3]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
      }),
      'backing_up': False,
      'backups': list([
        dict({
          'addons': list([
          ]),
          'agent_ids': list([
            'test.remote',
          ]),
          'backup_id': 'def456',
          'database_included': False,
          'date': '1980-01-01T00:00:00.000Z',
          'folders': list([
            'media',
            'share',
          ]),
          'homeassistant_included': True,
          'homeassistant_version': '2024.12.0',
          'name': 'Test 2',
          'protected': False,
          'size': 1.0,
        }),
        dict({
          'addons': list([
            dict({
              'name': 'Test',
              'slug': 'test',
              'version': '1.0.0',
            }),
          ]),
          'agent_ids': list([
            'backup.local',
          ]),
          'backup_id': 'abc123',
          'database_included': True,
          'date': '1970-01-01T00:00:00.000Z',
          'folders': list([
            'media',
            'share',
          ]),
          'homeassistant_included': True,
          'homeassistant_version': '2024.12.0',
          'name': 'Test',
          'protected': False,
          'size': 0.0,
        }),
      ]),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_info_with_errors[BackupAgentUnreachableError]
  dict({
    'id': 1,
    'result': dict({
      'agent_errors': dict({
        'domain.test': 'The backup agent is unreachable.',
      }),
      'backing_up': False,
      'backups': list([
        dict({
          'addons': list([
            dict({
              'name': 'Test',
              'slug': 'test',
              'version': '1.0.0',
            }),
          ]),
          'agent_ids': list([
            'backup.local',
          ]),
          'backup_id': 'abc123',
          'database_included': True,
          'date': '1970-01-01T00:00:00.000Z',
          'folders': list([
            'media',
            'share',
          ]),
          'homeassistant_included': True,
          'homeassistant_version': '2024.12.0',
          'name': 'Test',
          'protected': False,
          'size': 0.0,
        }),
      ]),
    }),
    'success': True,
    'type': 'result',
  })
# ---
# name: test_info_with_errors[side_effect0]
  dict({
    'error': dict({
      'code': 'home_assistant_error',
      'message': 'Boom!',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_restore_local_agent[backups0]
  dict({
    'error': dict({
      'code': 'home_assistant_error',
      'message': 'Backup abc123 not found in agent backup.local',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_restore_local_agent[backups0].1
  0
# ---
# name: test_restore_local_agent[backups1]
  dict({
    'id': 1,
    'result': None,
    'success': True,
    'type': 'result',
  })
# ---
# name: test_restore_local_agent[backups1].1
  1
# ---
# name: test_restore_remote_agent[remote_agents0-backups0]
  dict({
    'error': dict({
      'code': 'home_assistant_error',
      'message': 'Backup abc123 not found in agent test.remote',
    }),
    'id': 1,
    'success': False,
    'type': 'result',
  })
# ---
# name: test_restore_remote_agent[remote_agents0-backups0].1
  0
# ---
# name: test_restore_remote_agent[remote_agents1-backups1]
  dict({
    'id': 1,
    'result': None,
    'success': True,
    'type': 'result',
  })
# ---
# name: test_restore_remote_agent[remote_agents1-backups1].1
  1
# ---
