# serializer version: 1
# name: test_chat_log_tts_streaming[to_stream_deltas0-0-]
  list([
    dict({
      'data': dict({
        'conversation_id': 'mock-ulid',
        'language': 'en',
        'pipeline': <ANY>,
        'tts_output': dict({
          'mime_type': 'audio/mpeg',
          'stream_response': True,
          'token': 'mocked-token.mp3',
          'url': '/api/tts_proxy/mocked-token.mp3',
        }),
      }),
      'type': <PipelineEventType.RUN_START: 'run-start'>,
    }),
    dict({
      'data': dict({
        'conversation_id': 'mock-ulid',
        'device_id': None,
        'engine': 'test-agent',
        'intent_input': 'Set a timer',
        'language': 'en',
        'prefer_local_intents': False,
      }),
      'type': <PipelineEventType.INTENT_START: 'intent-start'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'role': 'assistant',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'hello,',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': ' ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'how',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': ' ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'are',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': ' ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'you',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': '?',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'intent_output': dict({
          'continue_conversation': True,
          'conversation_id': <ANY>,
          'response': dict({
            'card': dict({
            }),
            'data': dict({
              'failed': list([
              ]),
              'success': list([
              ]),
              'targets': list([
              ]),
            }),
            'language': 'en',
            'response_type': 'action_done',
            'speech': dict({
              'plain': dict({
                'extra_data': None,
                'speech': 'hello, how are you?',
              }),
            }),
          }),
        }),
        'processed_locally': False,
      }),
      'type': <PipelineEventType.INTENT_END: 'intent-end'>,
    }),
    dict({
      'data': dict({
        'engine': 'tts.test',
        'language': 'en_US',
        'tts_input': 'hello, how are you?',
        'voice': None,
      }),
      'type': <PipelineEventType.TTS_START: 'tts-start'>,
    }),
    dict({
      'data': dict({
        'tts_output': dict({
          'media_id': 'media-source://tts/-stream-/mocked-token.mp3',
          'mime_type': 'audio/mpeg',
          'token': 'mocked-token.mp3',
          'url': '/api/tts_proxy/mocked-token.mp3',
        }),
      }),
      'type': <PipelineEventType.TTS_END: 'tts-end'>,
    }),
    dict({
      'data': None,
      'type': <PipelineEventType.RUN_END: 'run-end'>,
    }),
  ])
# ---
# name: test_chat_log_tts_streaming[to_stream_deltas1-3-hello, how are you? I'm doing well, thank you. What about you?!]
  list([
    dict({
      'data': dict({
        'conversation_id': 'mock-ulid',
        'language': 'en',
        'pipeline': <ANY>,
        'tts_output': dict({
          'mime_type': 'audio/mpeg',
          'stream_response': True,
          'token': 'mocked-token.mp3',
          'url': '/api/tts_proxy/mocked-token.mp3',
        }),
      }),
      'type': <PipelineEventType.RUN_START: 'run-start'>,
    }),
    dict({
      'data': dict({
        'conversation_id': 'mock-ulid',
        'device_id': None,
        'engine': 'test-agent',
        'intent_input': 'Set a timer',
        'language': 'en',
        'prefer_local_intents': False,
      }),
      'type': <PipelineEventType.INTENT_START: 'intent-start'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'role': 'assistant',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'hello, ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'how ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'are ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'you',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': '? ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': "I'm ",
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'doing ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'well',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': ', ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'thank ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'you',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': '. ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'What ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'about ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'you',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': '?',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': '!',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'intent_output': dict({
          'continue_conversation': False,
          'conversation_id': <ANY>,
          'response': dict({
            'card': dict({
            }),
            'data': dict({
              'failed': list([
              ]),
              'success': list([
              ]),
              'targets': list([
              ]),
            }),
            'language': 'en',
            'response_type': 'action_done',
            'speech': dict({
              'plain': dict({
                'extra_data': None,
                'speech': "hello, how are you? I'm doing well, thank you. What about you?!",
              }),
            }),
          }),
        }),
        'processed_locally': False,
      }),
      'type': <PipelineEventType.INTENT_END: 'intent-end'>,
    }),
    dict({
      'data': dict({
        'engine': 'tts.test',
        'language': 'en_US',
        'tts_input': "hello, how are you? I'm doing well, thank you. What about you?!",
        'voice': None,
      }),
      'type': <PipelineEventType.TTS_START: 'tts-start'>,
    }),
    dict({
      'data': dict({
        'tts_output': dict({
          'media_id': 'media-source://tts/-stream-/mocked-token.mp3',
          'mime_type': 'audio/mpeg',
          'token': 'mocked-token.mp3',
          'url': '/api/tts_proxy/mocked-token.mp3',
        }),
      }),
      'type': <PipelineEventType.TTS_END: 'tts-end'>,
    }),
    dict({
      'data': None,
      'type': <PipelineEventType.RUN_END: 'run-end'>,
    }),
  ])
# ---
# name: test_chat_log_tts_streaming[to_stream_deltas2-8-hello, how are you? I'm doing well, thank you.]
  list([
    dict({
      'data': dict({
        'conversation_id': 'mock-ulid',
        'language': 'en',
        'pipeline': <ANY>,
        'tts_output': dict({
          'mime_type': 'audio/mpeg',
          'stream_response': True,
          'token': 'mocked-token.mp3',
          'url': '/api/tts_proxy/mocked-token.mp3',
        }),
      }),
      'type': <PipelineEventType.RUN_START: 'run-start'>,
    }),
    dict({
      'data': dict({
        'conversation_id': 'mock-ulid',
        'device_id': None,
        'engine': 'test-agent',
        'intent_input': 'Set a timer',
        'language': 'en',
        'prefer_local_intents': False,
      }),
      'type': <PipelineEventType.INTENT_START: 'intent-start'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'role': 'assistant',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'hello, ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'how ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'are ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'you',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': '? ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'tool_calls': list([
            dict({
              'id': 'test_tool_id',
              'tool_args': dict({
              }),
              'tool_name': 'test_tool',
            }),
          ]),
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'agent_id': 'test-agent',
          'role': 'tool_result',
          'tool_call_id': 'test_tool_id',
          'tool_name': 'test_tool',
          'tool_result': 'Test response',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'role': 'assistant',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': "I'm ",
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'doing ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'well',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': ', ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'thank ',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': 'you',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'chat_log_delta': dict({
          'content': '.',
        }),
      }),
      'type': <PipelineEventType.INTENT_PROGRESS: 'intent-progress'>,
    }),
    dict({
      'data': dict({
        'intent_output': dict({
          'continue_conversation': False,
          'conversation_id': <ANY>,
          'response': dict({
            'card': dict({
            }),
            'data': dict({
              'failed': list([
              ]),
              'success': list([
              ]),
              'targets': list([
              ]),
            }),
            'language': 'en',
            'response_type': 'action_done',
            'speech': dict({
              'plain': dict({
                'extra_data': None,
                'speech': "I'm doing well, thank you.",
              }),
            }),
          }),
        }),
        'processed_locally': False,
      }),
      'type': <PipelineEventType.INTENT_END: 'intent-end'>,
    }),
    dict({
      'data': dict({
        'engine': 'tts.test',
        'language': 'en_US',
        'tts_input': "I'm doing well, thank you.",
        'voice': None,
      }),
      'type': <PipelineEventType.TTS_START: 'tts-start'>,
    }),
    dict({
      'data': dict({
        'tts_output': dict({
          'media_id': 'media-source://tts/-stream-/mocked-token.mp3',
          'mime_type': 'audio/mpeg',
          'token': 'mocked-token.mp3',
          'url': '/api/tts_proxy/mocked-token.mp3',
        }),
      }),
      'type': <PipelineEventType.TTS_END: 'tts-end'>,
    }),
    dict({
      'data': None,
      'type': <PipelineEventType.RUN_END: 'run-end'>,
    }),
  ])
# ---
# name: test_pipeline_language_used_instead_of_conversation_language
  list([
    dict({
      'data': dict({
        'conversation_id': 'mock-ulid',
        'language': 'en',
        'pipeline': <ANY>,
      }),
      'type': <PipelineEventType.RUN_START: 'run-start'>,
    }),
    dict({
      'data': dict({
        'conversation_id': 'mock-ulid',
        'device_id': None,
        'engine': 'conversation.home_assistant',
        'intent_input': 'test input',
        'language': 'en',
        'prefer_local_intents': False,
      }),
      'type': <PipelineEventType.INTENT_START: 'intent-start'>,
    }),
    dict({
      'data': dict({
        'intent_output': dict({
          'continue_conversation': False,
          'conversation_id': <ANY>,
          'response': dict({
            'card': dict({
            }),
            'data': dict({
              'failed': list([
              ]),
              'success': list([
              ]),
              'targets': list([
              ]),
            }),
            'language': 'en',
            'response_type': 'action_done',
            'speech': dict({
            }),
          }),
        }),
        'processed_locally': True,
      }),
      'type': <PipelineEventType.INTENT_END: 'intent-end'>,
    }),
    dict({
      'data': None,
      'type': <PipelineEventType.RUN_END: 'run-end'>,
    }),
  ])
# ---
# name: test_stt_language_used_instead_of_conversation_language
  list([
    dict({
      'data': dict({
        'conversation_id': 'mock-ulid',
        'language': 'en',
        'pipeline': <ANY>,
      }),
      'type': <PipelineEventType.RUN_START: 'run-start'>,
    }),
    dict({
      'data': dict({
        'conversation_id': 'mock-ulid',
        'device_id': None,
        'engine': 'conversation.home_assistant',
        'intent_input': 'test input',
        'language': 'en-US',
        'prefer_local_intents': False,
      }),
      'type': <PipelineEventType.INTENT_START: 'intent-start'>,
    }),
    dict({
      'data': dict({
        'intent_output': dict({
          'continue_conversation': False,
          'conversation_id': <ANY>,
          'response': dict({
            'card': dict({
            }),
            'data': dict({
              'failed': list([
              ]),
              'success': list([
              ]),
              'targets': list([
              ]),
            }),
            'language': 'en',
            'response_type': 'action_done',
            'speech': dict({
            }),
          }),
        }),
        'processed_locally': True,
      }),
      'type': <PipelineEventType.INTENT_END: 'intent-end'>,
    }),
    dict({
      'data': None,
      'type': <PipelineEventType.RUN_END: 'run-end'>,
    }),
  ])
# ---
# name: test_tts_language_used_instead_of_conversation_language
  list([
    dict({
      'data': dict({
        'conversation_id': 'mock-ulid',
        'language': 'en',
        'pipeline': <ANY>,
      }),
      'type': <PipelineEventType.RUN_START: 'run-start'>,
    }),
    dict({
      'data': dict({
        'conversation_id': 'mock-ulid',
        'device_id': None,
        'engine': 'conversation.home_assistant',
        'intent_input': 'test input',
        'language': 'en-us',
        'prefer_local_intents': False,
      }),
      'type': <PipelineEventType.INTENT_START: 'intent-start'>,
    }),
    dict({
      'data': dict({
        'intent_output': dict({
          'continue_conversation': False,
          'conversation_id': <ANY>,
          'response': dict({
            'card': dict({
            }),
            'data': dict({
              'failed': list([
              ]),
              'success': list([
              ]),
              'targets': list([
              ]),
            }),
            'language': 'en',
            'response_type': 'action_done',
            'speech': dict({
            }),
          }),
        }),
        'processed_locally': True,
      }),
      'type': <PipelineEventType.INTENT_END: 'intent-end'>,
    }),
    dict({
      'data': None,
      'type': <PipelineEventType.RUN_END: 'run-end'>,
    }),
  ])
# ---
# name: test_wake_word_detection_aborted
  list([
    dict({
      'data': dict({
        'conversation_id': 'mock-ulid',
        'language': 'en',
        'pipeline': <ANY>,
        'tts_output': dict({
          'mime_type': 'audio/mpeg',
          'stream_response': False,
          'token': 'mocked-token.mp3',
          'url': '/api/tts_proxy/mocked-token.mp3',
        }),
      }),
      'type': <PipelineEventType.RUN_START: 'run-start'>,
    }),
    dict({
      'data': dict({
        'entity_id': 'wake_word.test',
        'metadata': dict({
          'bit_rate': <AudioBitRates.BITRATE_16: 16>,
          'channel': <AudioChannels.CHANNEL_MONO: 1>,
          'codec': <AudioCodecs.PCM: 'pcm'>,
          'format': <AudioFormats.WAV: 'wav'>,
          'sample_rate': <AudioSampleRates.SAMPLERATE_16000: 16000>,
        }),
        'timeout': 0,
      }),
      'type': <PipelineEventType.WAKE_WORD_START: 'wake_word-start'>,
    }),
    dict({
      'data': dict({
        'code': 'wake_word_detection_aborted',
        'message': '',
      }),
      'type': <PipelineEventType.ERROR: 'error'>,
    }),
    dict({
      'data': None,
      'type': <PipelineEventType.RUN_END: 'run-end'>,
    }),
  ])
# ---
