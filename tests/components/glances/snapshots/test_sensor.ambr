# serializer version: 1
# name: test_sensor_states[sensor.0_0_0_0_containers_active-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_containers_active',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Containers active',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'container_active',
    'unique_id': 'test--docker_active',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_containers_active-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': '0.0.0.0 Containers active',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_containers_active',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_containers_cpu_usage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_containers_cpu_usage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Containers CPU usage',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'container_cpu_usage',
    'unique_id': 'test--docker_cpu_use',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_containers_cpu_usage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': '0.0.0.0 Containers CPU usage',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_containers_cpu_usage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '77.2',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_containers_memory_used-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_containers_memory_used',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DATA_SIZE: 'data_size'>,
    'original_icon': None,
    'original_name': 'Containers memory used',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'container_memory_used',
    'unique_id': 'test--docker_memory_use',
    'unit_of_measurement': <UnitOfInformation.MEBIBYTES: 'MiB'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_containers_memory_used-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_size',
      'friendly_name': '0.0.0.0 Containers memory used',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfInformation.MEBIBYTES: 'MiB'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_containers_memory_used',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1149.6',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_cpu_thermal_1_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_cpu_thermal_1_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'cpu_thermal 1 temperature',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'temperature',
    'unique_id': 'test-cpu_thermal 1-temperature_core',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_cpu_thermal_1_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': '0.0.0.0 cpu_thermal 1 temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_cpu_thermal_1_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '59',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_dummy0_rx-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_dummy0_rx',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfDataRate.MEGABITS_PER_SECOND: 'Mbit/s'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DATA_RATE: 'data_rate'>,
    'original_icon': None,
    'original_name': 'dummy0 RX',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'network_rx',
    'unique_id': 'test-dummy0-rx',
    'unit_of_measurement': <UnitOfDataRate.MEGABITS_PER_SECOND: 'Mbit/s'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_dummy0_rx-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_rate',
      'friendly_name': '0.0.0.0 dummy0 RX',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfDataRate.MEGABITS_PER_SECOND: 'Mbit/s'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_dummy0_rx',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.000000',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_dummy0_tx-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_dummy0_tx',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfDataRate.MEGABITS_PER_SECOND: 'Mbit/s'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DATA_RATE: 'data_rate'>,
    'original_icon': None,
    'original_name': 'dummy0 TX',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'network_tx',
    'unique_id': 'test-dummy0-tx',
    'unit_of_measurement': <UnitOfDataRate.MEGABITS_PER_SECOND: 'Mbit/s'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_dummy0_tx-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_rate',
      'friendly_name': '0.0.0.0 dummy0 TX',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfDataRate.MEGABITS_PER_SECOND: 'Mbit/s'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_dummy0_tx',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.000000',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_err_temp_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_err_temp_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'err_temp temperature',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'temperature',
    'unique_id': 'test-err_temp-temperature_hdd',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_err_temp_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': '0.0.0.0 err_temp temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_err_temp_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_eth0_rx-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_eth0_rx',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfDataRate.MEGABITS_PER_SECOND: 'Mbit/s'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DATA_RATE: 'data_rate'>,
    'original_icon': None,
    'original_name': 'eth0 RX',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'network_rx',
    'unique_id': 'test-eth0-rx',
    'unit_of_measurement': <UnitOfDataRate.MEGABITS_PER_SECOND: 'Mbit/s'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_eth0_rx-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_rate',
      'friendly_name': '0.0.0.0 eth0 RX',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfDataRate.MEGABITS_PER_SECOND: 'Mbit/s'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_eth0_rx',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.03162',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_eth0_tx-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_eth0_tx',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfDataRate.MEGABITS_PER_SECOND: 'Mbit/s'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DATA_RATE: 'data_rate'>,
    'original_icon': None,
    'original_name': 'eth0 TX',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'network_tx',
    'unique_id': 'test-eth0-tx',
    'unit_of_measurement': <UnitOfDataRate.MEGABITS_PER_SECOND: 'Mbit/s'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_eth0_tx-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_rate',
      'friendly_name': '0.0.0.0 eth0 TX',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfDataRate.MEGABITS_PER_SECOND: 'Mbit/s'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_eth0_tx',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.04796',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_lo_rx-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_lo_rx',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfDataRate.MEGABITS_PER_SECOND: 'Mbit/s'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DATA_RATE: 'data_rate'>,
    'original_icon': None,
    'original_name': 'lo RX',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'network_rx',
    'unique_id': 'test-lo-rx',
    'unit_of_measurement': <UnitOfDataRate.MEGABITS_PER_SECOND: 'Mbit/s'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_lo_rx-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_rate',
      'friendly_name': '0.0.0.0 lo RX',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfDataRate.MEGABITS_PER_SECOND: 'Mbit/s'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_lo_rx',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.06117',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_lo_tx-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_lo_tx',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfDataRate.MEGABITS_PER_SECOND: 'Mbit/s'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DATA_RATE: 'data_rate'>,
    'original_icon': None,
    'original_name': 'lo TX',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'network_tx',
    'unique_id': 'test-lo-tx',
    'unit_of_measurement': <UnitOfDataRate.MEGABITS_PER_SECOND: 'Mbit/s'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_lo_tx-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_rate',
      'friendly_name': '0.0.0.0 lo TX',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfDataRate.MEGABITS_PER_SECOND: 'Mbit/s'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_lo_tx',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.06117',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_md1_available-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_md1_available',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'md1 available',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'raid_available',
    'unique_id': 'test-md1-available',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_md1_available-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': '0.0.0.0 md1 available',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_md1_available',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_md1_used-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_md1_used',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'md1 used',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'raid_used',
    'unique_id': 'test-md1-used',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_md1_used-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': '0.0.0.0 md1 used',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_md1_used',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_md3_available-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_md3_available',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'md3 available',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'raid_available',
    'unique_id': 'test-md3-available',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_md3_available-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': '0.0.0.0 md3 available',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_md3_available',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_md3_used-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_md3_used',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'md3 used',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'raid_used',
    'unique_id': 'test-md3-used',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_md3_used-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': '0.0.0.0 md3 used',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_md3_used',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_media_disk_free-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_media_disk_free',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DATA_SIZE: 'data_size'>,
    'original_icon': None,
    'original_name': '/media disk free',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'disk_free',
    'unique_id': 'test-/media-disk_free',
    'unit_of_measurement': <UnitOfInformation.GIBIBYTES: 'GiB'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_media_disk_free-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_size',
      'friendly_name': '0.0.0.0 /media disk free',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfInformation.GIBIBYTES: 'GiB'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_media_disk_free',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '426.5',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_media_disk_usage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_media_disk_usage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': '/media disk usage',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'disk_usage',
    'unique_id': 'test-/media-disk_use_percent',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_media_disk_usage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': '0.0.0.0 /media disk usage',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_media_disk_usage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '6.7',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_media_disk_used-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_media_disk_used',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DATA_SIZE: 'data_size'>,
    'original_icon': None,
    'original_name': '/media disk used',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'disk_used',
    'unique_id': 'test-/media-disk_use',
    'unit_of_measurement': <UnitOfInformation.GIBIBYTES: 'GiB'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_media_disk_used-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_size',
      'friendly_name': '0.0.0.0 /media disk used',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfInformation.GIBIBYTES: 'GiB'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_media_disk_used',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '30.7',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_memory_free-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_memory_free',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DATA_SIZE: 'data_size'>,
    'original_icon': None,
    'original_name': 'Memory free',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'memory_free',
    'unique_id': 'test--memory_free',
    'unit_of_measurement': <UnitOfInformation.MEBIBYTES: 'MiB'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_memory_free-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_size',
      'friendly_name': '0.0.0.0 Memory free',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfInformation.MEBIBYTES: 'MiB'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_memory_free',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2745.0',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_memory_usage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_memory_usage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Memory usage',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'memory_usage',
    'unique_id': 'test--memory_use_percent',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_memory_usage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': '0.0.0.0 Memory usage',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_memory_usage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '27.6',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_memory_use-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_memory_use',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DATA_SIZE: 'data_size'>,
    'original_icon': None,
    'original_name': 'Memory use',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'memory_use',
    'unique_id': 'test--memory_use',
    'unit_of_measurement': <UnitOfInformation.MEBIBYTES: 'MiB'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_memory_use-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_size',
      'friendly_name': '0.0.0.0 Memory use',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfInformation.MEBIBYTES: 'MiB'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_memory_use',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1047.1',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_na_temp_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_na_temp_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'na_temp temperature',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'temperature',
    'unique_id': 'test-na_temp-temperature_hdd',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_na_temp_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': '0.0.0.0 na_temp temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_na_temp_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_nvidia_geforce_rtx_3080_gpu_0_fan_speed-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_nvidia_geforce_rtx_3080_gpu_0_fan_speed',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'NVIDIA GeForce RTX 3080 (GPU 0) fan speed',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'fan_speed',
    'unique_id': 'test-NVIDIA GeForce RTX 3080 (GPU 0)-fan_speed',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_nvidia_geforce_rtx_3080_gpu_0_fan_speed-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': '0.0.0.0 NVIDIA GeForce RTX 3080 (GPU 0) fan speed',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_nvidia_geforce_rtx_3080_gpu_0_fan_speed',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_nvidia_geforce_rtx_3080_gpu_0_memory_usage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_nvidia_geforce_rtx_3080_gpu_0_memory_usage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'NVIDIA GeForce RTX 3080 (GPU 0) memory usage',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'gpu_memory_usage',
    'unique_id': 'test-NVIDIA GeForce RTX 3080 (GPU 0)-mem',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_nvidia_geforce_rtx_3080_gpu_0_memory_usage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': '0.0.0.0 NVIDIA GeForce RTX 3080 (GPU 0) memory usage',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_nvidia_geforce_rtx_3080_gpu_0_memory_usage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '8.41064453125',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_nvidia_geforce_rtx_3080_gpu_0_processor_usage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_nvidia_geforce_rtx_3080_gpu_0_processor_usage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'NVIDIA GeForce RTX 3080 (GPU 0) processor usage',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'gpu_processor_usage',
    'unique_id': 'test-NVIDIA GeForce RTX 3080 (GPU 0)-proc',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_nvidia_geforce_rtx_3080_gpu_0_processor_usage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': '0.0.0.0 NVIDIA GeForce RTX 3080 (GPU 0) processor usage',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_nvidia_geforce_rtx_3080_gpu_0_processor_usage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '26',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_nvidia_geforce_rtx_3080_gpu_0_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_nvidia_geforce_rtx_3080_gpu_0_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'NVIDIA GeForce RTX 3080 (GPU 0) temperature',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'temperature',
    'unique_id': 'test-NVIDIA GeForce RTX 3080 (GPU 0)-temperature',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_nvidia_geforce_rtx_3080_gpu_0_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': '0.0.0.0 NVIDIA GeForce RTX 3080 (GPU 0) temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_nvidia_geforce_rtx_3080_gpu_0_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '51',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_nvme0n1_disk_read-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_nvme0n1_disk_read',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfDataRate.MEGABYTES_PER_SECOND: 'MB/s'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DATA_RATE: 'data_rate'>,
    'original_icon': None,
    'original_name': 'nvme0n1 disk read',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'diskio_read',
    'unique_id': 'test-nvme0n1-read',
    'unit_of_measurement': <UnitOfDataRate.MEGABYTES_PER_SECOND: 'MB/s'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_nvme0n1_disk_read-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_rate',
      'friendly_name': '0.0.0.0 nvme0n1 disk read',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfDataRate.MEGABYTES_PER_SECOND: 'MB/s'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_nvme0n1_disk_read',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.184320',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_nvme0n1_disk_write-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_nvme0n1_disk_write',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfDataRate.MEGABYTES_PER_SECOND: 'MB/s'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DATA_RATE: 'data_rate'>,
    'original_icon': None,
    'original_name': 'nvme0n1 disk write',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'diskio_write',
    'unique_id': 'test-nvme0n1-write',
    'unit_of_measurement': <UnitOfDataRate.MEGABYTES_PER_SECOND: 'MB/s'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_nvme0n1_disk_write-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_rate',
      'friendly_name': '0.0.0.0 nvme0n1 disk write',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfDataRate.MEGABYTES_PER_SECOND: 'MB/s'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_nvme0n1_disk_write',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '23.863296',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_sda_disk_read-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_sda_disk_read',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfDataRate.MEGABYTES_PER_SECOND: 'MB/s'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DATA_RATE: 'data_rate'>,
    'original_icon': None,
    'original_name': 'sda disk read',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'diskio_read',
    'unique_id': 'test-sda-read',
    'unit_of_measurement': <UnitOfDataRate.MEGABYTES_PER_SECOND: 'MB/s'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_sda_disk_read-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_rate',
      'friendly_name': '0.0.0.0 sda disk read',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfDataRate.MEGABYTES_PER_SECOND: 'MB/s'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_sda_disk_read',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.003859',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_sda_disk_write-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_sda_disk_write',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfDataRate.MEGABYTES_PER_SECOND: 'MB/s'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DATA_RATE: 'data_rate'>,
    'original_icon': None,
    'original_name': 'sda disk write',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'diskio_write',
    'unique_id': 'test-sda-write',
    'unit_of_measurement': <UnitOfDataRate.MEGABYTES_PER_SECOND: 'MB/s'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_sda_disk_write-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_rate',
      'friendly_name': '0.0.0.0 sda disk write',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfDataRate.MEGABYTES_PER_SECOND: 'MB/s'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_sda_disk_write',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.025954',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_ssl_disk_free-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_ssl_disk_free',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DATA_SIZE: 'data_size'>,
    'original_icon': None,
    'original_name': '/ssl disk free',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'disk_free',
    'unique_id': 'test-/ssl-disk_free',
    'unit_of_measurement': <UnitOfInformation.GIBIBYTES: 'GiB'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_ssl_disk_free-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_size',
      'friendly_name': '0.0.0.0 /ssl disk free',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfInformation.GIBIBYTES: 'GiB'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_ssl_disk_free',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '426.5',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_ssl_disk_usage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_ssl_disk_usage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': '/ssl disk usage',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'disk_usage',
    'unique_id': 'test-/ssl-disk_use_percent',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_ssl_disk_usage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': '0.0.0.0 /ssl disk usage',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_ssl_disk_usage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '6.7',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_ssl_disk_used-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_ssl_disk_used',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DATA_SIZE: 'data_size'>,
    'original_icon': None,
    'original_name': '/ssl disk used',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'disk_used',
    'unique_id': 'test-/ssl-disk_use',
    'unit_of_measurement': <UnitOfInformation.GIBIBYTES: 'GiB'>,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_ssl_disk_used-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_size',
      'friendly_name': '0.0.0.0 /ssl disk used',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfInformation.GIBIBYTES: 'GiB'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_ssl_disk_used',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '30.7',
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_uptime-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.0_0_0_0_uptime',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Uptime',
    'platform': 'glances',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'uptime',
    'unique_id': 'test--uptime',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensor_states[sensor.0_0_0_0_uptime-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'timestamp',
      'friendly_name': '0.0.0.0 Uptime',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.0_0_0_0_uptime',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2024-02-10T03:47:52+00:00',
  })
# ---
