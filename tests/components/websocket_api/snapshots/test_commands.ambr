# serializer version: 1
# name: test_get_services
  dict({
    'reload': dict({
      'description': 'Reloads group configuration, entities, and notify services from YAML-configuration.',
      'fields': dict({
      }),
      'name': 'Reload',
    }),
    'remove': dict({
      'description': 'Removes a group.',
      'fields': dict({
        'object_id': dict({
          'description': 'Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id].',
          'example': 'test_group',
          'name': 'Object ID',
          'required': True,
          'selector': dict({
            'object': dict({
              'multiple': False,
            }),
          }),
        }),
      }),
      'name': 'Remove',
    }),
    'set': dict({
      'description': 'Creates/Updates a group.',
      'fields': dict({
        'add_entities': dict({
          'description': 'List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`.',
          'example': 'domain.entity_id1, domain.entity_id2',
          'name': 'Add entities',
          'selector': dict({
            'entity': dict({
              'multiple': True,
              'reorder': False,
            }),
          }),
        }),
        'all': dict({
          'description': 'Enable this option if the group should only be used when all entities are in state `on`.',
          'name': 'All',
          'selector': dict({
            'boolean': dict({
            }),
          }),
        }),
        'entities': dict({
          'description': 'List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`.',
          'example': 'domain.entity_id1, domain.entity_id2',
          'name': 'Entities',
          'selector': dict({
            'entity': dict({
              'multiple': True,
              'reorder': False,
            }),
          }),
        }),
        'icon': dict({
          'description': 'Name of the icon for the group.',
          'example': 'mdi:camera',
          'name': 'Icon',
          'selector': dict({
            'icon': dict({
            }),
          }),
        }),
        'name': dict({
          'description': 'Name of the group.',
          'example': 'My test group',
          'name': 'Name',
          'selector': dict({
            'text': dict({
              'multiline': False,
              'multiple': False,
            }),
          }),
        }),
        'object_id': dict({
          'description': 'Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id].',
          'example': 'test_group',
          'name': 'Object ID',
          'required': True,
          'selector': dict({
            'text': dict({
              'multiline': False,
              'multiple': False,
            }),
          }),
        }),
        'remove_entities': dict({
          'description': 'List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`.',
          'example': 'domain.entity_id1, domain.entity_id2',
          'name': 'Remove entities',
          'selector': dict({
            'entity': dict({
              'multiple': True,
              'reorder': False,
            }),
          }),
        }),
      }),
      'name': 'Set',
    }),
  })
# ---
# name: test_get_services.1
  dict({
    'set_default_level': dict({
      'description': 'Translated description',
      'fields': dict({
        'level': dict({
          'description': 'Field description',
          'example': 'Field example',
          'name': 'Field name',
          'selector': dict({
            'select': dict({
              'options': list([
                'debug',
                'info',
                'warning',
                'error',
                'fatal',
                'critical',
              ]),
              'translation_key': 'level',
            }),
          }),
        }),
      }),
      'name': 'Translated name',
    }),
    'set_level': dict({
      'description': '',
      'fields': dict({
      }),
      'name': '',
    }),
  })
# ---
