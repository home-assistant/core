# serializer version: 1
# name: test_sensors[sensor.drive_state-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'normal',
        'nearing',
        'critical',
        'exceeded',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.drive_state',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Drive state',
    'platform': 'onedrive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state',
    'unique_id': 'mock_drive_id_drive_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.drive_state-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Drive state',
      'options': list([
        'normal',
        'nearing',
        'critical',
        'exceeded',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.drive_state',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'nearing',
  })
# ---
# name: test_sensors[sensor.remaining_storage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.remaining_storage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfInformation.GIGABYTES: 'GB'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DATA_SIZE: 'data_size'>,
    'original_icon': None,
    'original_name': 'Remaining storage',
    'platform': 'onedrive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'remaining_size',
    'unique_id': 'mock_drive_id_remaining_size',
    'unit_of_measurement': <UnitOfInformation.GIGABYTES: 'GB'>,
  })
# ---
# name: test_sensors[sensor.remaining_storage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_size',
      'friendly_name': 'Remaining storage',
      'unit_of_measurement': <UnitOfInformation.GIGABYTES: 'GB'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.remaining_storage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.75',
  })
# ---
# name: test_sensors[sensor.total_available_storage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.total_available_storage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfInformation.GIGABYTES: 'GB'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DATA_SIZE: 'data_size'>,
    'original_icon': None,
    'original_name': 'Total available storage',
    'platform': 'onedrive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'total_size',
    'unique_id': 'mock_drive_id_total_size',
    'unit_of_measurement': <UnitOfInformation.GIGABYTES: 'GB'>,
  })
# ---
# name: test_sensors[sensor.total_available_storage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_size',
      'friendly_name': 'Total available storage',
      'unit_of_measurement': <UnitOfInformation.GIGABYTES: 'GB'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.total_available_storage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '5.0',
  })
# ---
# name: test_sensors[sensor.used_storage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.used_storage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfInformation.GIGABYTES: 'GB'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DATA_SIZE: 'data_size'>,
    'original_icon': None,
    'original_name': 'Used storage',
    'platform': 'onedrive',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'used_size',
    'unique_id': 'mock_drive_id_used_size',
    'unit_of_measurement': <UnitOfInformation.GIGABYTES: 'GB'>,
  })
# ---
# name: test_sensors[sensor.used_storage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'data_size',
      'friendly_name': 'Used storage',
      'unit_of_measurement': <UnitOfInformation.GIGABYTES: 'GB'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.used_storage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '4.25',
  })
# ---
