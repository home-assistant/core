# serializer version: 1
# name: test_snapshots[airversa_ap2]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '0.1',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Sleekpoint Innovations',
        'model': 'AP2',
        'model_id': None,
        'name': 'Airversa AP2 1808',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '1234',
        'suggested_area': None,
        'sw_version': '0.8.16',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.airversa_ap2_1808_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Airversa AP2 1808 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Airversa AP2 1808 Identify',
            }),
            'entity_id': 'button.airversa_ap2_1808_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'preset_modes': None,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'fan',
            'entity_category': None,
            'entity_id': 'fan.airversa_ap2_1808_airpurifier',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Airversa AP2 1808 AirPurifier',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <FanEntityFeature: 49>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_32832',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Airversa AP2 1808 AirPurifier',
              'percentage': 0,
              'percentage_step': 20.0,
              'preset_mode': None,
              'preset_modes': None,
              'supported_features': <FanEntityFeature: 49>,
            }),
            'entity_id': 'fan.airversa_ap2_1808_airpurifier',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'options': list([
                'automatic',
                'manual',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'select',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'select.airversa_ap2_1808_air_purifier_mode',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Airversa AP2 1808 Air Purifier Mode',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'air_purifier_state_target',
            'unique_id': '00:00:00:00:00:00_1_32832_32837',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Airversa AP2 1808 Air Purifier Mode',
              'options': list([
                'automatic',
                'manual',
              ]),
            }),
            'entity_id': 'select.airversa_ap2_1808_air_purifier_mode',
            'state': 'automatic',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'options': list([
                'inactive',
                'idle',
                'purifying',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.airversa_ap2_1808_air_purifier_status',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
            'original_icon': None,
            'original_name': 'Airversa AP2 1808 Air Purifier Status',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'air_purifier_state_current',
            'unique_id': '00:00:00:00:00:00_1_32832_32836',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'enum',
              'friendly_name': 'Airversa AP2 1808 Air Purifier Status',
              'options': list([
                'inactive',
                'idle',
                'purifying',
              ]),
            }),
            'entity_id': 'sensor.airversa_ap2_1808_air_purifier_status',
            'state': 'inactive',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.airversa_ap2_1808_air_quality',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.AQI: 'aqi'>,
            'original_icon': None,
            'original_name': 'Airversa AP2 1808 Air Quality',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_2576_2579',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'aqi',
              'friendly_name': 'Airversa AP2 1808 Air Quality',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'entity_id': 'sensor.airversa_ap2_1808_air_quality',
            'state': '1',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.airversa_ap2_1808_filter_lifetime',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Airversa AP2 1808 Filter lifetime',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_32896_32900',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Airversa AP2 1808 Filter lifetime',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.airversa_ap2_1808_filter_lifetime',
            'state': '100.0',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.airversa_ap2_1808_pm2_5_density',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.PM25: 'pm25'>,
            'original_icon': None,
            'original_name': 'Airversa AP2 1808 PM2.5 Density',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_2576_2580',
            'unit_of_measurement': 'µg/m³',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'pm25',
              'friendly_name': 'Airversa AP2 1808 PM2.5 Density',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': 'µg/m³',
            }),
            'entity_id': 'sensor.airversa_ap2_1808_pm2_5_density',
            'state': '3.0',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'options': list([
                'border_router_capable',
                'full',
                'minimal',
                'none',
                'router_eligible',
                'sleepy',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.airversa_ap2_1808_thread_capabilities',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
            'original_icon': None,
            'original_name': 'Airversa AP2 1808 Thread Capabilities',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'thread_node_capabilities',
            'unique_id': '00:00:00:00:00:00_1_112_115',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'enum',
              'friendly_name': 'Airversa AP2 1808 Thread Capabilities',
              'options': list([
                'border_router_capable',
                'full',
                'minimal',
                'none',
                'router_eligible',
                'sleepy',
              ]),
            }),
            'entity_id': 'sensor.airversa_ap2_1808_thread_capabilities',
            'state': 'router_eligible',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'options': list([
                'border_router',
                'child',
                'detached',
                'disabled',
                'joining',
                'leader',
                'router',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.airversa_ap2_1808_thread_status',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
            'original_icon': None,
            'original_name': 'Airversa AP2 1808 Thread Status',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'thread_status',
            'unique_id': '00:00:00:00:00:00_1_112_117',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'enum',
              'friendly_name': 'Airversa AP2 1808 Thread Status',
              'options': list([
                'border_router',
                'child',
                'detached',
                'disabled',
                'joining',
                'leader',
                'router',
              ]),
            }),
            'entity_id': 'sensor.airversa_ap2_1808_thread_status',
            'state': 'router',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'switch.airversa_ap2_1808_lock_physical_controls',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Airversa AP2 1808 Lock Physical Controls',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'lock_physical_controls',
            'unique_id': '00:00:00:00:00:00_1_32832_32839',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Airversa AP2 1808 Lock Physical Controls',
            }),
            'entity_id': 'switch.airversa_ap2_1808_lock_physical_controls',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'switch.airversa_ap2_1808_mute',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Airversa AP2 1808 Mute',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'mute',
            'unique_id': '00:00:00:00:00:00_1_32832_32843',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Airversa AP2 1808 Mute',
            }),
            'entity_id': 'switch.airversa_ap2_1808_mute',
            'state': 'on',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'switch.airversa_ap2_1808_sleep_mode',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Airversa AP2 1808 Sleep Mode',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'sleep_mode',
            'unique_id': '00:00:00:00:00:00_1_32832_32842',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Airversa AP2 1808 Sleep Mode',
            }),
            'entity_id': 'switch.airversa_ap2_1808_sleep_mode',
            'state': 'off',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[anker_eufycam]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '2.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Anker',
        'model': 'T8010',
        'model_id': None,
        'name': 'eufy HomeBase2-0AAA',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'A0000A000000000A',
        'suggested_area': None,
        'sw_version': '2.1.6',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.eufy_homebase2_0aaa_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'eufy HomeBase2-0AAA Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'eufy HomeBase2-0AAA Identify',
            }),
            'entity_id': 'button.eufy_homebase2_0aaa_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:4',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Anker',
        'model': 'T8113',
        'model_id': None,
        'name': 'eufyCam2-0000',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'A0000A000000000D',
        'suggested_area': None,
        'sw_version': '1.6.7',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.eufycam2_0000_motion_sensor',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.MOTION: 'motion'>,
            'original_icon': None,
            'original_name': 'eufyCam2-0000 Motion Sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_4_160',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'motion',
              'friendly_name': 'eufyCam2-0000 Motion Sensor',
            }),
            'entity_id': 'binary_sensor.eufycam2_0000_motion_sensor',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.eufycam2_0000_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'eufyCam2-0000 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_4_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'eufyCam2-0000 Identify',
            }),
            'entity_id': 'button.eufycam2_0000_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'camera',
            'entity_category': None,
            'entity_id': 'camera.eufycam2_0000',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'eufyCam2-0000',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_4',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'eufyCam2-0000',
              'supported_features': <CameraEntityFeature: 0>,
            }),
            'entity_id': 'camera.eufycam2_0000',
            'state': 'idle',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.eufycam2_0000_battery',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'eufyCam2-0000 Battery',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_4_101',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'eufyCam2-0000 Battery',
              'icon': 'mdi:battery-20',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.eufycam2_0000_battery',
            'state': '17',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'switch.eufycam2_0000_mute',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'eufyCam2-0000 Mute',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'mute',
            'unique_id': '00:00:00:00:00:00_4_80_83',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'eufyCam2-0000 Mute',
            }),
            'entity_id': 'switch.eufycam2_0000_mute',
            'state': 'off',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:2',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Anker',
        'model': 'T8113',
        'model_id': None,
        'name': 'eufyCam2-000A',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'A0000A000000000B',
        'suggested_area': None,
        'sw_version': '1.6.7',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.eufycam2_000a_motion_sensor',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.MOTION: 'motion'>,
            'original_icon': None,
            'original_name': 'eufyCam2-000A Motion Sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_160',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'motion',
              'friendly_name': 'eufyCam2-000A Motion Sensor',
            }),
            'entity_id': 'binary_sensor.eufycam2_000a_motion_sensor',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.eufycam2_000a_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'eufyCam2-000A Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'eufyCam2-000A Identify',
            }),
            'entity_id': 'button.eufycam2_000a_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'camera',
            'entity_category': None,
            'entity_id': 'camera.eufycam2_000a',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'eufyCam2-000A',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'eufyCam2-000A',
              'supported_features': <CameraEntityFeature: 0>,
            }),
            'entity_id': 'camera.eufycam2_000a',
            'state': 'idle',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.eufycam2_000a_battery',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'eufyCam2-000A Battery',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_101',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'eufyCam2-000A Battery',
              'icon': 'mdi:battery-40',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.eufycam2_000a_battery',
            'state': '38',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'switch.eufycam2_000a_mute',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'eufyCam2-000A Mute',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'mute',
            'unique_id': '00:00:00:00:00:00_2_80_83',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'eufyCam2-000A Mute',
            }),
            'entity_id': 'switch.eufycam2_000a_mute',
            'state': 'off',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:3',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Anker',
        'model': 'T8113',
        'model_id': None,
        'name': 'eufyCam2-000A',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'A0000A000000000C',
        'suggested_area': None,
        'sw_version': '1.6.7',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.eufycam2_000a_motion_sensor_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.MOTION: 'motion'>,
            'original_icon': None,
            'original_name': 'eufyCam2-000A Motion Sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_160',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'motion',
              'friendly_name': 'eufyCam2-000A Motion Sensor',
            }),
            'entity_id': 'binary_sensor.eufycam2_000a_motion_sensor_2',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.eufycam2_000a_identify_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'eufyCam2-000A Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'eufyCam2-000A Identify',
            }),
            'entity_id': 'button.eufycam2_000a_identify_2',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'camera',
            'entity_category': None,
            'entity_id': 'camera.eufycam2_000a_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'eufyCam2-000A',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'eufyCam2-000A',
              'supported_features': <CameraEntityFeature: 0>,
            }),
            'entity_id': 'camera.eufycam2_000a_2',
            'state': 'idle',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.eufycam2_000a_battery_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'eufyCam2-000A Battery',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_101',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'eufyCam2-000A Battery',
              'icon': 'mdi:battery-alert',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.eufycam2_000a_battery_2',
            'state': '100',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'switch.eufycam2_000a_mute_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'eufyCam2-000A Mute',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'mute',
            'unique_id': '00:00:00:00:00:00_3_80_83',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'eufyCam2-000A Mute',
            }),
            'entity_id': 'switch.eufycam2_000a_mute_2',
            'state': 'off',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[aqara_e1]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Aqara',
        'model': 'HE1-G01',
        'model_id': None,
        'name': 'Aqara-Hub-E1-00A0',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '00aa00000a0',
        'suggested_area': None,
        'sw_version': '3.3.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'alarm_control_panel',
            'entity_category': None,
            'entity_id': 'alarm_control_panel.aqara_hub_e1_00a0_security_system',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Aqara-Hub-E1-00A0 Security System',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <AlarmControlPanelEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_16',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'changed_by': None,
              'code_arm_required': True,
              'code_format': None,
              'friendly_name': 'Aqara-Hub-E1-00A0 Security System',
              'supported_features': <AlarmControlPanelEntityFeature: 7>,
            }),
            'entity_id': 'alarm_control_panel.aqara_hub_e1_00a0_security_system',
            'state': 'disarmed',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.aqara_hub_e1_00a0_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Aqara-Hub-E1-00A0 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_65537',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Aqara-Hub-E1-00A0 Identify',
            }),
            'entity_id': 'button.aqara_hub_e1_00a0_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'max': 100,
              'min': 0.0,
              'mode': <NumberMode.AUTO: 'auto'>,
              'step': 1,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'number',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'number.aqara_hub_e1_00a0_volume',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Aqara-Hub-E1-00A0 Volume',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'volume',
            'unique_id': '00:00:00:00:00:00_1_17_1114116',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Aqara-Hub-E1-00A0 Volume',
              'max': 100,
              'min': 0.0,
              'mode': <NumberMode.AUTO: 'auto'>,
              'step': 1,
            }),
            'entity_id': 'number.aqara_hub_e1_00a0_volume',
            'state': '40',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'switch.aqara_hub_e1_00a0_pairing_mode',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Aqara-Hub-E1-00A0 Pairing Mode',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'pairing_mode',
            'unique_id': '00:00:00:00:00:00_1_17_1114117',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Aqara-Hub-E1-00A0 Pairing Mode',
            }),
            'entity_id': 'switch.aqara_hub_e1_00a0_pairing_mode',
            'state': 'off',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:33',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Aqara',
        'model': 'AS006',
        'model_id': None,
        'name': 'Contact Sensor',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '158d0007c59c6a',
        'suggested_area': None,
        'sw_version': '0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.contact_sensor',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.OPENING: 'opening'>,
            'original_icon': None,
            'original_name': 'Contact Sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_33_4',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'opening',
              'friendly_name': 'Contact Sensor',
            }),
            'entity_id': 'binary_sensor.contact_sensor',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.contact_sensor_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Contact Sensor Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_33_1_65537',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Contact Sensor Identify',
            }),
            'entity_id': 'button.contact_sensor_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.contact_sensor_battery_sensor',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'Contact Sensor Battery Sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_33_5',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'Contact Sensor Battery Sensor',
              'icon': 'mdi:battery',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.contact_sensor_battery_sensor',
            'state': '100',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[aqara_gateway]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Aqara',
        'model': 'ZHWA11LM',
        'model_id': None,
        'name': 'Aqara Hub-1563',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '0000000123456789',
        'suggested_area': None,
        'sw_version': '1.4.7',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'alarm_control_panel',
            'entity_category': None,
            'entity_id': 'alarm_control_panel.aqara_hub_1563_security_system',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Aqara Hub-1563 Security System',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <AlarmControlPanelEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_66304',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'changed_by': None,
              'code_arm_required': True,
              'code_format': None,
              'friendly_name': 'Aqara Hub-1563 Security System',
              'supported_features': <AlarmControlPanelEntityFeature: 7>,
            }),
            'entity_id': 'alarm_control_panel.aqara_hub_1563_security_system',
            'state': 'disarmed',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.aqara_hub_1563_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Aqara Hub-1563 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Aqara Hub-1563 Identify',
            }),
            'entity_id': 'button.aqara_hub_1563_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'max_color_temp_kelvin': 6535,
              'max_mireds': 500,
              'min_color_temp_kelvin': 2000,
              'min_mireds': 153,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
                <ColorMode.HS: 'hs'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.aqara_hub_1563_lightbulb_1563',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Aqara Hub-1563 Lightbulb-1563',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_65792',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': None,
              'color_mode': None,
              'color_temp': None,
              'color_temp_kelvin': None,
              'friendly_name': 'Aqara Hub-1563 Lightbulb-1563',
              'hs_color': None,
              'max_color_temp_kelvin': 6535,
              'max_mireds': 500,
              'min_color_temp_kelvin': 2000,
              'min_mireds': 153,
              'rgb_color': None,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
                <ColorMode.HS: 'hs'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
              'xy_color': None,
            }),
            'entity_id': 'light.aqara_hub_1563_lightbulb_1563',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'max': 100,
              'min': 0.0,
              'mode': <NumberMode.AUTO: 'auto'>,
              'step': 1,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'number',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'number.aqara_hub_1563_volume',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Aqara Hub-1563 Volume',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'volume',
            'unique_id': '00:00:00:00:00:00_1_65536_65541',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Aqara Hub-1563 Volume',
              'max': 100,
              'min': 0.0,
              'mode': <NumberMode.AUTO: 'auto'>,
              'step': 1,
            }),
            'entity_id': 'number.aqara_hub_1563_volume',
            'state': '40',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'switch.aqara_hub_1563_pairing_mode',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Aqara Hub-1563 Pairing Mode',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'pairing_mode',
            'unique_id': '00:00:00:00:00:00_1_65536_65538',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Aqara Hub-1563 Pairing Mode',
            }),
            'entity_id': 'switch.aqara_hub_1563_pairing_mode',
            'state': 'off',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[aqara_switch]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Aqara',
        'model': 'AR004',
        'model_id': None,
        'name': 'Programmable Switch',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '111a1111a1a111',
        'suggested_area': None,
        'sw_version': '9',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.programmable_switch_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Programmable Switch Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_65537',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Programmable Switch Identify',
            }),
            'entity_id': 'button.programmable_switch_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.programmable_switch_battery_sensor',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'Programmable Switch Battery Sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_5',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'Programmable Switch Battery Sensor',
              'icon': 'mdi:battery',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.programmable_switch_battery_sensor',
            'state': '100',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[arlo_baby]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netgear, Inc',
        'model': 'ABC1000',
        'model_id': None,
        'name': 'ArloBabyA0',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '00A0000000000',
        'suggested_area': None,
        'sw_version': '1.10.931',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.arlobabya0_motion',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.MOTION: 'motion'>,
            'original_icon': None,
            'original_name': 'ArloBabyA0 Motion',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_500',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'motion',
              'friendly_name': 'ArloBabyA0 Motion',
            }),
            'entity_id': 'binary_sensor.arlobabya0_motion',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.arlobabya0_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'ArloBabyA0 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'ArloBabyA0 Identify',
            }),
            'entity_id': 'button.arlobabya0_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'camera',
            'entity_category': None,
            'entity_id': 'camera.arlobabya0',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'ArloBabyA0',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'ArloBabyA0',
              'supported_features': <CameraEntityFeature: 0>,
            }),
            'entity_id': 'camera.arlobabya0',
            'state': 'idle',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'max_color_temp_kelvin': 6535,
              'max_mireds': 500,
              'min_color_temp_kelvin': 2000,
              'min_mireds': 153,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
                <ColorMode.HS: 'hs'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.arlobabya0_nightlight',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'ArloBabyA0 Nightlight',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1100',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': None,
              'color_mode': None,
              'color_temp': None,
              'color_temp_kelvin': None,
              'friendly_name': 'ArloBabyA0 Nightlight',
              'hs_color': None,
              'max_color_temp_kelvin': 6535,
              'max_mireds': 500,
              'min_color_temp_kelvin': 2000,
              'min_mireds': 153,
              'rgb_color': None,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
                <ColorMode.HS: 'hs'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
              'xy_color': None,
            }),
            'entity_id': 'light.arlobabya0_nightlight',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.arlobabya0_air_quality',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.AQI: 'aqi'>,
            'original_icon': None,
            'original_name': 'ArloBabyA0 Air Quality',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_800_802',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'aqi',
              'friendly_name': 'ArloBabyA0 Air Quality',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'entity_id': 'sensor.arlobabya0_air_quality',
            'state': '1',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.arlobabya0_battery',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'ArloBabyA0 Battery',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_700',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'ArloBabyA0 Battery',
              'icon': 'mdi:battery-80',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.arlobabya0_battery',
            'state': '82',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.arlobabya0_humidity',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
            'original_icon': None,
            'original_name': 'ArloBabyA0 Humidity',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_900',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'humidity',
              'friendly_name': 'ArloBabyA0 Humidity',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.arlobabya0_humidity',
            'state': '60.099998',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.arlobabya0_temperature',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'ArloBabyA0 Temperature',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1000',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'ArloBabyA0 Temperature',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.arlobabya0_temperature',
            'state': '24.0',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'switch.arlobabya0_mute',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'ArloBabyA0 Mute',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'mute',
            'unique_id': '00:00:00:00:00:00_1_300_302',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'ArloBabyA0 Mute',
            }),
            'entity_id': 'switch.arlobabya0_mute',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'switch.arlobabya0_mute_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'ArloBabyA0 Mute',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'mute',
            'unique_id': '00:00:00:00:00:00_1_400_402',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'ArloBabyA0 Mute',
            }),
            'entity_id': 'switch.arlobabya0_mute_2',
            'state': 'off',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[connectsense]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'ConnectSense',
        'model': 'CS-IWO',
        'model_id': None,
        'name': 'InWall Outlet-0394DE',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '1020301376',
        'suggested_area': None,
        'sw_version': '1.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.inwall_outlet_0394de_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'InWall Outlet-0394DE Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'InWall Outlet-0394DE Identify',
            }),
            'entity_id': 'button.inwall_outlet_0394de_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.inwall_outlet_0394de_current',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.CURRENT: 'current'>,
            'original_icon': None,
            'original_name': 'InWall Outlet-0394DE Current',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_13_18',
            'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'current',
              'friendly_name': 'InWall Outlet-0394DE Current',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
            }),
            'entity_id': 'sensor.inwall_outlet_0394de_current',
            'state': '0.03',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.inwall_outlet_0394de_current_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.CURRENT: 'current'>,
            'original_icon': None,
            'original_name': 'InWall Outlet-0394DE Current',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_25_30',
            'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'current',
              'friendly_name': 'InWall Outlet-0394DE Current',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
            }),
            'entity_id': 'sensor.inwall_outlet_0394de_current_2',
            'state': '0.05',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.inwall_outlet_0394de_energy_kwh',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
            'original_icon': None,
            'original_name': 'InWall Outlet-0394DE Energy kWh',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_13_20',
            'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'energy',
              'friendly_name': 'InWall Outlet-0394DE Energy kWh',
              'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
              'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
            }),
            'entity_id': 'sensor.inwall_outlet_0394de_energy_kwh',
            'state': '379.69299',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.inwall_outlet_0394de_energy_kwh_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
            'original_icon': None,
            'original_name': 'InWall Outlet-0394DE Energy kWh',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_25_32',
            'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'energy',
              'friendly_name': 'InWall Outlet-0394DE Energy kWh',
              'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
              'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
            }),
            'entity_id': 'sensor.inwall_outlet_0394de_energy_kwh_2',
            'state': '175.85001',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.inwall_outlet_0394de_power',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.POWER: 'power'>,
            'original_icon': None,
            'original_name': 'InWall Outlet-0394DE Power',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_13_19',
            'unit_of_measurement': <UnitOfPower.WATT: 'W'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'power',
              'friendly_name': 'InWall Outlet-0394DE Power',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfPower.WATT: 'W'>,
            }),
            'entity_id': 'sensor.inwall_outlet_0394de_power',
            'state': '0.8',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.inwall_outlet_0394de_power_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.POWER: 'power'>,
            'original_icon': None,
            'original_name': 'InWall Outlet-0394DE Power',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_25_31',
            'unit_of_measurement': <UnitOfPower.WATT: 'W'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'power',
              'friendly_name': 'InWall Outlet-0394DE Power',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfPower.WATT: 'W'>,
            }),
            'entity_id': 'sensor.inwall_outlet_0394de_power_2',
            'state': '0.8',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.inwall_outlet_0394de_outlet_a',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'InWall Outlet-0394DE Outlet A',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_13',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'InWall Outlet-0394DE Outlet A',
              'outlet_in_use': True,
            }),
            'entity_id': 'switch.inwall_outlet_0394de_outlet_a',
            'state': 'on',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.inwall_outlet_0394de_outlet_b',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'InWall Outlet-0394DE Outlet B',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_25',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'InWall Outlet-0394DE Outlet B',
              'outlet_in_use': True,
            }),
            'entity_id': 'switch.inwall_outlet_0394de_outlet_b',
            'state': 'on',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[ecobee3]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:4',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'ecobee Inc.',
        'model': 'REMOTE SENSOR',
        'model_id': None,
        'name': 'Basement',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'AB3C',
        'suggested_area': None,
        'sw_version': '1.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.basement',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.MOTION: 'motion'>,
            'original_icon': None,
            'original_name': 'Basement',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_4_56',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'motion',
              'friendly_name': 'Basement',
            }),
            'entity_id': 'binary_sensor.basement',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.basement_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Basement Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_4_1_4101',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Basement Identify',
            }),
            'entity_id': 'button.basement_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.basement_temperature',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'Basement Temperature',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_4_55',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'Basement Temperature',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.basement_temperature',
            'state': '20.7',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'ecobee Inc.',
        'model': 'ecobee3',
        'model_id': None,
        'name': 'HomeW',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '123456789012',
        'suggested_area': None,
        'sw_version': '4.2.394',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.homew',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.MOTION: 'motion'>,
            'original_icon': None,
            'original_name': 'HomeW',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_56',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'motion',
              'friendly_name': 'HomeW',
            }),
            'entity_id': 'binary_sensor.homew',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.homew_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.OCCUPANCY: 'occupancy'>,
            'original_icon': None,
            'original_name': 'HomeW',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_57',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'occupancy',
              'friendly_name': 'HomeW',
            }),
            'entity_id': 'binary_sensor.homew_2',
            'state': 'on',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': None,
            'entity_id': 'button.homew_clear_hold',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'HomeW Clear Hold',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_16_48',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'HomeW Clear Hold',
            }),
            'entity_id': 'button.homew_clear_hold',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.homew_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'HomeW Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'HomeW Identify',
            }),
            'entity_id': 'button.homew_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'hvac_modes': list([
                <HVACMode.OFF: 'off'>,
                <HVACMode.HEAT: 'heat'>,
                <HVACMode.COOL: 'cool'>,
                <HVACMode.HEAT_COOL: 'heat_cool'>,
              ]),
              'max_humidity': 50,
              'max_temp': 33.3,
              'min_humidity': 20,
              'min_temp': 7.2,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'climate',
            'entity_category': None,
            'entity_id': 'climate.homew',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'HomeW',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <ClimateEntityFeature: 391>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_16',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_humidity': 34,
              'current_temperature': 21.8,
              'friendly_name': 'HomeW',
              'humidity': 36,
              'hvac_action': <HVACAction.HEATING: 'heating'>,
              'hvac_modes': list([
                <HVACMode.OFF: 'off'>,
                <HVACMode.HEAT: 'heat'>,
                <HVACMode.COOL: 'cool'>,
                <HVACMode.HEAT_COOL: 'heat_cool'>,
              ]),
              'max_humidity': 50,
              'max_temp': 33.3,
              'min_humidity': 20,
              'min_temp': 7.2,
              'supported_features': <ClimateEntityFeature: 391>,
              'target_temp_high': None,
              'target_temp_low': None,
              'temperature': 22.2,
            }),
            'entity_id': 'climate.homew',
            'state': 'heat',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'options': list([
                'home',
                'sleep',
                'away',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'select',
            'entity_category': None,
            'entity_id': 'select.homew_current_mode',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'HomeW Current Mode',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'ecobee_mode',
            'unique_id': '00:00:00:00:00:00_1_16_33',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'HomeW Current Mode',
              'options': list([
                'home',
                'sleep',
                'away',
              ]),
            }),
            'entity_id': 'select.homew_current_mode',
            'state': 'home',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'options': list([
                'celsius',
                'fahrenheit',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'select',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'select.homew_temperature_display_units',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'HomeW Temperature Display Units',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'temperature_display_units',
            'unique_id': '00:00:00:00:00:00_1_16_21',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'HomeW Temperature Display Units',
              'options': list([
                'celsius',
                'fahrenheit',
              ]),
            }),
            'entity_id': 'select.homew_temperature_display_units',
            'state': 'fahrenheit',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.homew_current_humidity',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
            'original_icon': None,
            'original_name': 'HomeW Current Humidity',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_16_24',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'humidity',
              'friendly_name': 'HomeW Current Humidity',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.homew_current_humidity',
            'state': '34',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.homew_current_temperature',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'HomeW Current Temperature',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_16_19',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'HomeW Current Temperature',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.homew_current_temperature',
            'state': '21.8',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:2',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'ecobee Inc.',
        'model': 'REMOTE SENSOR',
        'model_id': None,
        'name': 'Kitchen',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'AB1C',
        'suggested_area': None,
        'sw_version': '1.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.kitchen',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.MOTION: 'motion'>,
            'original_icon': None,
            'original_name': 'Kitchen',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_56',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'motion',
              'friendly_name': 'Kitchen',
            }),
            'entity_id': 'binary_sensor.kitchen',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.kitchen_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Kitchen Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_1_2053',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Kitchen Identify',
            }),
            'entity_id': 'button.kitchen_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.kitchen_temperature',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'Kitchen Temperature',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_55',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'Kitchen Temperature',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.kitchen_temperature',
            'state': '21.5',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:3',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'ecobee Inc.',
        'model': 'REMOTE SENSOR',
        'model_id': None,
        'name': 'Porch',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'AB2C',
        'suggested_area': None,
        'sw_version': '1.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.porch',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.MOTION: 'motion'>,
            'original_icon': None,
            'original_name': 'Porch',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_56',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'motion',
              'friendly_name': 'Porch',
            }),
            'entity_id': 'binary_sensor.porch',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.porch_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Porch Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_1_3077',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Porch Identify',
            }),
            'entity_id': 'button.porch_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.porch_temperature',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'Porch Temperature',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_55',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'Porch Temperature',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.porch_temperature',
            'state': '21',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[ecobee3_no_sensors]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'ecobee Inc.',
        'model': 'ecobee3',
        'model_id': None,
        'name': 'HomeW',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '123456789012',
        'suggested_area': None,
        'sw_version': '4.2.394',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.homew',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.MOTION: 'motion'>,
            'original_icon': None,
            'original_name': 'HomeW',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_56',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'motion',
              'friendly_name': 'HomeW',
            }),
            'entity_id': 'binary_sensor.homew',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.homew_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.OCCUPANCY: 'occupancy'>,
            'original_icon': None,
            'original_name': 'HomeW',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_57',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'occupancy',
              'friendly_name': 'HomeW',
            }),
            'entity_id': 'binary_sensor.homew_2',
            'state': 'on',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': None,
            'entity_id': 'button.homew_clear_hold',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'HomeW Clear Hold',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_16_48',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'HomeW Clear Hold',
            }),
            'entity_id': 'button.homew_clear_hold',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.homew_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'HomeW Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'HomeW Identify',
            }),
            'entity_id': 'button.homew_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'hvac_modes': list([
                <HVACMode.OFF: 'off'>,
                <HVACMode.HEAT: 'heat'>,
                <HVACMode.COOL: 'cool'>,
                <HVACMode.HEAT_COOL: 'heat_cool'>,
              ]),
              'max_humidity': 50,
              'max_temp': 33.3,
              'min_humidity': 20,
              'min_temp': 7.2,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'climate',
            'entity_category': None,
            'entity_id': 'climate.homew',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'HomeW',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <ClimateEntityFeature: 391>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_16',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_humidity': 34,
              'current_temperature': 21.8,
              'friendly_name': 'HomeW',
              'humidity': 36,
              'hvac_action': <HVACAction.HEATING: 'heating'>,
              'hvac_modes': list([
                <HVACMode.OFF: 'off'>,
                <HVACMode.HEAT: 'heat'>,
                <HVACMode.COOL: 'cool'>,
                <HVACMode.HEAT_COOL: 'heat_cool'>,
              ]),
              'max_humidity': 50,
              'max_temp': 33.3,
              'min_humidity': 20,
              'min_temp': 7.2,
              'supported_features': <ClimateEntityFeature: 391>,
              'target_temp_high': None,
              'target_temp_low': None,
              'temperature': 22.2,
            }),
            'entity_id': 'climate.homew',
            'state': 'heat',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'options': list([
                'home',
                'sleep',
                'away',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'select',
            'entity_category': None,
            'entity_id': 'select.homew_current_mode',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'HomeW Current Mode',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'ecobee_mode',
            'unique_id': '00:00:00:00:00:00_1_16_33',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'HomeW Current Mode',
              'options': list([
                'home',
                'sleep',
                'away',
              ]),
            }),
            'entity_id': 'select.homew_current_mode',
            'state': 'home',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'options': list([
                'celsius',
                'fahrenheit',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'select',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'select.homew_temperature_display_units',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'HomeW Temperature Display Units',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'temperature_display_units',
            'unique_id': '00:00:00:00:00:00_1_16_21',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'HomeW Temperature Display Units',
              'options': list([
                'celsius',
                'fahrenheit',
              ]),
            }),
            'entity_id': 'select.homew_temperature_display_units',
            'state': 'fahrenheit',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.homew_current_humidity',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
            'original_icon': None,
            'original_name': 'HomeW Current Humidity',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_16_24',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'humidity',
              'friendly_name': 'HomeW Current Humidity',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.homew_current_humidity',
            'state': '34',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.homew_current_temperature',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'HomeW Current Temperature',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_16_19',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'HomeW Current Temperature',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.homew_current_temperature',
            'state': '21.8',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[ecobee3_service_removed]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:4',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'ecobee Inc.',
        'model': 'REMOTE SENSOR',
        'model_id': None,
        'name': 'Basement',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'AB3C',
        'suggested_area': None,
        'sw_version': '1.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.basement',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.MOTION: 'motion'>,
            'original_icon': None,
            'original_name': 'Basement',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_4_56',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'motion',
              'friendly_name': 'Basement',
            }),
            'entity_id': 'binary_sensor.basement',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.basement_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Basement Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_4_1_4101',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Basement Identify',
            }),
            'entity_id': 'button.basement_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'ecobee Inc.',
        'model': 'ecobee3',
        'model_id': None,
        'name': 'HomeW',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '123456789012',
        'suggested_area': None,
        'sw_version': '4.2.394',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.homew_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'HomeW Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'HomeW Identify',
            }),
            'entity_id': 'button.homew_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'hvac_modes': list([
                <HVACMode.OFF: 'off'>,
                <HVACMode.HEAT: 'heat'>,
                <HVACMode.COOL: 'cool'>,
                <HVACMode.HEAT_COOL: 'heat_cool'>,
              ]),
              'max_humidity': 50,
              'max_temp': 33.3,
              'min_humidity': 20,
              'min_temp': 7.2,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'climate',
            'entity_category': None,
            'entity_id': 'climate.homew',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'HomeW',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <ClimateEntityFeature: 391>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_16',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_humidity': 34,
              'current_temperature': 21.8,
              'friendly_name': 'HomeW',
              'humidity': 36,
              'hvac_action': <HVACAction.HEATING: 'heating'>,
              'hvac_modes': list([
                <HVACMode.OFF: 'off'>,
                <HVACMode.HEAT: 'heat'>,
                <HVACMode.COOL: 'cool'>,
                <HVACMode.HEAT_COOL: 'heat_cool'>,
              ]),
              'max_humidity': 50,
              'max_temp': 33.3,
              'min_humidity': 20,
              'min_temp': 7.2,
              'supported_features': <ClimateEntityFeature: 391>,
              'target_temp_high': None,
              'target_temp_low': None,
              'temperature': 22.2,
            }),
            'entity_id': 'climate.homew',
            'state': 'heat',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'options': list([
                'celsius',
                'fahrenheit',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'select',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'select.homew_temperature_display_units',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'HomeW Temperature Display Units',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'temperature_display_units',
            'unique_id': '00:00:00:00:00:00_1_16_21',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'HomeW Temperature Display Units',
              'options': list([
                'celsius',
                'fahrenheit',
              ]),
            }),
            'entity_id': 'select.homew_temperature_display_units',
            'state': 'fahrenheit',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.homew_current_humidity',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
            'original_icon': None,
            'original_name': 'HomeW Current Humidity',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_16_24',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'humidity',
              'friendly_name': 'HomeW Current Humidity',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.homew_current_humidity',
            'state': '34',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.homew_current_temperature',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'HomeW Current Temperature',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_16_19',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'HomeW Current Temperature',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.homew_current_temperature',
            'state': '21.8',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:2',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'ecobee Inc.',
        'model': 'REMOTE SENSOR',
        'model_id': None,
        'name': 'Kitchen',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'AB1C',
        'suggested_area': None,
        'sw_version': '1.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.kitchen',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.MOTION: 'motion'>,
            'original_icon': None,
            'original_name': 'Kitchen',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_56',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'motion',
              'friendly_name': 'Kitchen',
            }),
            'entity_id': 'binary_sensor.kitchen',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.kitchen_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Kitchen Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_1_2053',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Kitchen Identify',
            }),
            'entity_id': 'button.kitchen_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.kitchen_temperature',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'Kitchen Temperature',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_55',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'Kitchen Temperature',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.kitchen_temperature',
            'state': '21.5',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:3',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'ecobee Inc.',
        'model': 'REMOTE SENSOR',
        'model_id': None,
        'name': 'Porch',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'AB2C',
        'suggested_area': None,
        'sw_version': '1.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.porch',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.MOTION: 'motion'>,
            'original_icon': None,
            'original_name': 'Porch',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_56',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'motion',
              'friendly_name': 'Porch',
            }),
            'entity_id': 'binary_sensor.porch',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.porch_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Porch Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_1_3077',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Porch Identify',
            }),
            'entity_id': 'button.porch_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.porch_temperature',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'Porch Temperature',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_55',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'Porch Temperature',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.porch_temperature',
            'state': '21',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[ecobee_501]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'ecobee Inc.',
        'model': 'ECB501',
        'model_id': None,
        'name': 'My ecobee',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '123456789016',
        'suggested_area': None,
        'sw_version': '4.7.340214',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.my_ecobee_motion',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.MOTION: 'motion'>,
            'original_icon': None,
            'original_name': 'My ecobee Motion',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_56',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'motion',
              'friendly_name': 'My ecobee Motion',
            }),
            'entity_id': 'binary_sensor.my_ecobee_motion',
            'state': 'on',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.my_ecobee_occupancy',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.OCCUPANCY: 'occupancy'>,
            'original_icon': None,
            'original_name': 'My ecobee Occupancy',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_57',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'occupancy',
              'friendly_name': 'My ecobee Occupancy',
            }),
            'entity_id': 'binary_sensor.my_ecobee_occupancy',
            'state': 'on',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': None,
            'entity_id': 'button.my_ecobee_clear_hold',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'My ecobee Clear Hold',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_16_48',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'My ecobee Clear Hold',
            }),
            'entity_id': 'button.my_ecobee_clear_hold',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.my_ecobee_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'My ecobee Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'My ecobee Identify',
            }),
            'entity_id': 'button.my_ecobee_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'fan_modes': list([
                'on',
                'auto',
              ]),
              'hvac_modes': list([
                <HVACMode.OFF: 'off'>,
                <HVACMode.HEAT: 'heat'>,
                <HVACMode.COOL: 'cool'>,
                <HVACMode.HEAT_COOL: 'heat_cool'>,
              ]),
              'max_humidity': 50,
              'max_temp': 33.3,
              'min_humidity': 20,
              'min_temp': 7.2,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'climate',
            'entity_category': None,
            'entity_id': 'climate.my_ecobee',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'My ecobee',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <ClimateEntityFeature: 399>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_16',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_humidity': 55.0,
              'current_temperature': 21.3,
              'fan_mode': 'auto',
              'fan_modes': list([
                'on',
                'auto',
              ]),
              'friendly_name': 'My ecobee',
              'humidity': 36.0,
              'hvac_action': <HVACAction.IDLE: 'idle'>,
              'hvac_modes': list([
                <HVACMode.OFF: 'off'>,
                <HVACMode.HEAT: 'heat'>,
                <HVACMode.COOL: 'cool'>,
                <HVACMode.HEAT_COOL: 'heat_cool'>,
              ]),
              'max_humidity': 50,
              'max_temp': 33.3,
              'min_humidity': 20,
              'min_temp': 7.2,
              'supported_features': <ClimateEntityFeature: 399>,
              'target_temp_high': 25.6,
              'target_temp_low': 7.2,
              'temperature': None,
            }),
            'entity_id': 'climate.my_ecobee',
            'state': 'heat_cool',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'options': list([
                'home',
                'sleep',
                'away',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'select',
            'entity_category': None,
            'entity_id': 'select.my_ecobee_current_mode',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'My ecobee Current Mode',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'ecobee_mode',
            'unique_id': '00:00:00:00:00:00_1_16_33',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'My ecobee Current Mode',
              'options': list([
                'home',
                'sleep',
                'away',
              ]),
            }),
            'entity_id': 'select.my_ecobee_current_mode',
            'state': 'home',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'options': list([
                'celsius',
                'fahrenheit',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'select',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'select.my_ecobee_temperature_display_units',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'My ecobee Temperature Display Units',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'temperature_display_units',
            'unique_id': '00:00:00:00:00:00_1_16_21',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'My ecobee Temperature Display Units',
              'options': list([
                'celsius',
                'fahrenheit',
              ]),
            }),
            'entity_id': 'select.my_ecobee_temperature_display_units',
            'state': 'fahrenheit',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.my_ecobee_current_humidity',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
            'original_icon': None,
            'original_name': 'My ecobee Current Humidity',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_16_24',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'humidity',
              'friendly_name': 'My ecobee Current Humidity',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.my_ecobee_current_humidity',
            'state': '55.0',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.my_ecobee_current_temperature',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'My ecobee Current Temperature',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_16_19',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'My ecobee Current Temperature',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.my_ecobee_current_temperature',
            'state': '21.3',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[ecobee_occupancy]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'ecobee Inc.',
        'model': 'ecobee Switch+',
        'model_id': None,
        'name': 'Master Fan',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '111111111111',
        'suggested_area': None,
        'sw_version': '4.5.130201',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.master_fan',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.MOTION: 'motion'>,
            'original_icon': None,
            'original_name': 'Master Fan',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_56',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'motion',
              'friendly_name': 'Master Fan',
            }),
            'entity_id': 'binary_sensor.master_fan',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.master_fan_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.OCCUPANCY: 'occupancy'>,
            'original_icon': None,
            'original_name': 'Master Fan',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_57',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'occupancy',
              'friendly_name': 'Master Fan',
            }),
            'entity_id': 'binary_sensor.master_fan_2',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.master_fan_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Master Fan Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Master Fan Identify',
            }),
            'entity_id': 'button.master_fan_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.master_fan_light_level',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.ILLUMINANCE: 'illuminance'>,
            'original_icon': None,
            'original_name': 'Master Fan Light Level',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_27',
            'unit_of_measurement': 'lx',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'illuminance',
              'friendly_name': 'Master Fan Light Level',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': 'lx',
            }),
            'entity_id': 'sensor.master_fan_light_level',
            'state': '0',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.master_fan_temperature',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'Master Fan Temperature',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_55',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'Master Fan Temperature',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.master_fan_temperature',
            'state': '25.6',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.master_fan',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Master Fan',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_16',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Master Fan',
            }),
            'entity_id': 'switch.master_fan',
            'state': 'off',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[eve_degree]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Elgato',
        'model': 'Eve Degree 00AAA0000',
        'model_id': None,
        'name': 'Eve Degree AA11',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'AA00A0A00000',
        'suggested_area': None,
        'sw_version': '1.2.8',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.eve_degree_aa11_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Eve Degree AA11 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_3',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Eve Degree AA11 Identify',
            }),
            'entity_id': 'button.eve_degree_aa11_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'max': 9000,
              'min': -450,
              'mode': <NumberMode.AUTO: 'auto'>,
              'step': 1,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'number',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'number.eve_degree_aa11_elevation',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Eve Degree AA11 Elevation',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'elevation',
            'unique_id': '00:00:00:00:00:00_1_30_33',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Eve Degree AA11 Elevation',
              'max': 9000,
              'min': -450,
              'mode': <NumberMode.AUTO: 'auto'>,
              'step': 1,
            }),
            'entity_id': 'number.eve_degree_aa11_elevation',
            'state': '0',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'options': list([
                'celsius',
                'fahrenheit',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'select',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'select.eve_degree_aa11_temperature_display_units',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Eve Degree AA11 Temperature Display Units',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'temperature_display_units',
            'unique_id': '00:00:00:00:00:00_1_22_25',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Eve Degree AA11 Temperature Display Units',
              'options': list([
                'celsius',
                'fahrenheit',
              ]),
            }),
            'entity_id': 'select.eve_degree_aa11_temperature_display_units',
            'state': 'celsius',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.eve_degree_aa11_air_pressure',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
            'original_icon': None,
            'original_name': 'Eve Degree AA11 Air Pressure',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_30_32',
            'unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'pressure',
              'friendly_name': 'Eve Degree AA11 Air Pressure',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
            }),
            'entity_id': 'sensor.eve_degree_aa11_air_pressure',
            'state': '1005.70001220703',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.eve_degree_aa11_battery',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'Eve Degree AA11 Battery',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_17',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'Eve Degree AA11 Battery',
              'icon': 'mdi:battery-60',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.eve_degree_aa11_battery',
            'state': '65',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.eve_degree_aa11_humidity',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
            'original_icon': None,
            'original_name': 'Eve Degree AA11 Humidity',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_27',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'humidity',
              'friendly_name': 'Eve Degree AA11 Humidity',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.eve_degree_aa11_humidity',
            'state': '59.4818115234375',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.eve_degree_aa11_temperature',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'Eve Degree AA11 Temperature',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_22',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'Eve Degree AA11 Temperature',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.eve_degree_aa11_temperature',
            'state': '22.7719116210938',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[eve_energy]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Elgato',
        'model': 'Eve Energy 20EAO8601',
        'model_id': None,
        'name': 'Eve Energy 50FF',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'AA00A0A00000',
        'suggested_area': None,
        'sw_version': '1.2.9',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.eve_energy_50ff_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Eve Energy 50FF Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_3',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Eve Energy 50FF Identify',
            }),
            'entity_id': 'button.eve_energy_50ff_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.eve_energy_50ff_amps',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.CURRENT: 'current'>,
            'original_icon': None,
            'original_name': 'Eve Energy 50FF Amps',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_28_33',
            'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'current',
              'friendly_name': 'Eve Energy 50FF Amps',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
            }),
            'entity_id': 'sensor.eve_energy_50ff_amps',
            'state': '0',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.eve_energy_50ff_energy_kwh',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
            'original_icon': None,
            'original_name': 'Eve Energy 50FF Energy kWh',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_28_35',
            'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'energy',
              'friendly_name': 'Eve Energy 50FF Energy kWh',
              'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
              'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
            }),
            'entity_id': 'sensor.eve_energy_50ff_energy_kwh',
            'state': '0.28999999165535',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.eve_energy_50ff_power',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.POWER: 'power'>,
            'original_icon': None,
            'original_name': 'Eve Energy 50FF Power',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_28_34',
            'unit_of_measurement': <UnitOfPower.WATT: 'W'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'power',
              'friendly_name': 'Eve Energy 50FF Power',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfPower.WATT: 'W'>,
            }),
            'entity_id': 'sensor.eve_energy_50ff_power',
            'state': '0',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.eve_energy_50ff_volts',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.VOLTAGE: 'voltage'>,
            'original_icon': None,
            'original_name': 'Eve Energy 50FF Volts',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_28_32',
            'unit_of_measurement': <UnitOfElectricPotential.VOLT: 'V'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'voltage',
              'friendly_name': 'Eve Energy 50FF Volts',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfElectricPotential.VOLT: 'V'>,
            }),
            'entity_id': 'sensor.eve_energy_50ff_volts',
            'state': '0.400000005960464',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.eve_energy_50ff',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Eve Energy 50FF',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_28',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Eve Energy 50FF',
              'outlet_in_use': True,
            }),
            'entity_id': 'switch.eve_energy_50ff',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'switch.eve_energy_50ff_lock_physical_controls',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Eve Energy 50FF Lock Physical Controls',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'lock_physical_controls',
            'unique_id': '00:00:00:00:00:00_1_28_36',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Eve Energy 50FF Lock Physical Controls',
            }),
            'entity_id': 'switch.eve_energy_50ff_lock_physical_controls',
            'state': 'off',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[haa_fan1]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'José A. Jiménez Campos',
        'model': 'RavenSystem HAA',
        'model_id': None,
        'name': 'HAA-C718B3',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'C718B3-1',
        'suggested_area': None,
        'sw_version': '5.0.18',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.haa_c718b3_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'HAA-C718B3 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'HAA-C718B3 Identify',
            }),
            'entity_id': 'button.haa_c718b3_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'button.haa_c718b3_setup',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'HAA-C718B3 Setup',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'setup',
            'unique_id': '00:00:00:00:00:00_1_1010_1012',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'HAA-C718B3 Setup',
            }),
            'entity_id': 'button.haa_c718b3_setup',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'button.haa_c718b3_update',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.UPDATE: 'update'>,
            'original_icon': None,
            'original_name': 'HAA-C718B3 Update',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1010_1011',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'update',
              'friendly_name': 'HAA-C718B3 Update',
            }),
            'entity_id': 'button.haa_c718b3_update',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'preset_modes': None,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'fan',
            'entity_category': None,
            'entity_id': 'fan.haa_c718b3',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'HAA-C718B3',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <FanEntityFeature: 49>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'HAA-C718B3',
              'percentage': 66,
              'percentage_step': 33.333333333333336,
              'preset_mode': None,
              'preset_modes': None,
              'supported_features': <FanEntityFeature: 49>,
            }),
            'entity_id': 'fan.haa_c718b3',
            'state': 'on',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[haa_fan2]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'José A. Jiménez Campos',
        'model': 'RavenSystem HAA',
        'model_id': None,
        'name': 'HAA-C718B3',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'C718B3-2',
        'suggested_area': None,
        'sw_version': '5.0.18',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.haa_c718b3_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'HAA-C718B3 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'HAA-C718B3 Identify',
            }),
            'entity_id': 'button.haa_c718b3_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.haa_c718b3',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'HAA-C718B3',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'HAA-C718B3',
            }),
            'entity_id': 'switch.haa_c718b3',
            'state': 'off',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[home_assistant_bridge_basic_cover]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:123016423',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'RYSE Inc.',
        'model': 'RYSE Shade',
        'model_id': None,
        'name': 'Family Room North',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'cover.family_door_north',
        'suggested_area': None,
        'sw_version': '3.6.2',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.family_room_north_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Family Room North Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_123016423_1_155',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Family Room North Identify',
            }),
            'entity_id': 'button.family_room_north_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.family_room_north',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Family Room North',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_123016423_166',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 98,
              'friendly_name': 'Family Room North',
              'supported_features': <CoverEntityFeature: 7>,
            }),
            'entity_id': 'cover.family_room_north',
            'state': 'open',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.family_room_north_battery',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'Family Room North Battery',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_123016423_162',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'Family Room North Battery',
              'icon': 'mdi:battery',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.family_room_north_battery',
            'state': '100',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Home Assistant',
        'model': 'Bridge',
        'model_id': None,
        'name': 'HASS Bridge S6',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'homekit.bridge',
        'suggested_area': None,
        'sw_version': '2024.2.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hass_bridge_s6_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'HASS Bridge S6 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'HASS Bridge S6 Identify',
            }),
            'entity_id': 'button.hass_bridge_s6_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:878448248',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'RYSE Inc.',
        'model': 'RYSE Shade',
        'model_id': None,
        'name': 'Kitchen Window',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'cover.kitchen_window',
        'suggested_area': None,
        'sw_version': '3.6.2',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.kitchen_window_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Kitchen Window Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_878448248_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Kitchen Window Identify',
            }),
            'entity_id': 'button.kitchen_window_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.kitchen_window',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Kitchen Window',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_878448248_13',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 100,
              'friendly_name': 'Kitchen Window',
              'supported_features': <CoverEntityFeature: 7>,
            }),
            'entity_id': 'cover.kitchen_window',
            'state': 'open',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.kitchen_window_battery',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'Kitchen Window Battery',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_878448248_9',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'Kitchen Window Battery',
              'icon': 'mdi:battery',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.kitchen_window_battery',
            'state': '100',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[home_assistant_bridge_basic_fan]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:766313939',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Home Assistant',
        'model': 'Fan',
        'model_id': None,
        'name': 'Ceiling Fan',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'fan.ceiling_fan',
        'suggested_area': None,
        'sw_version': '0.104.0.dev0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.ceiling_fan_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Ceiling Fan Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_766313939_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Ceiling Fan Identify',
            }),
            'entity_id': 'button.ceiling_fan_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'preset_modes': None,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'fan',
            'entity_category': None,
            'entity_id': 'fan.ceiling_fan',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Ceiling Fan',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <FanEntityFeature: 49>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_766313939_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Ceiling Fan',
              'percentage': 0,
              'percentage_step': 1.0,
              'preset_mode': None,
              'preset_modes': None,
              'supported_features': <FanEntityFeature: 49>,
            }),
            'entity_id': 'fan.ceiling_fan',
            'state': 'off',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Home Assistant',
        'model': 'Bridge',
        'model_id': None,
        'name': 'Home Assistant Bridge',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'homekit.bridge',
        'suggested_area': None,
        'sw_version': '0.104.0.dev0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.home_assistant_bridge_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Home Assistant Bridge Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Home Assistant Bridge Identify',
            }),
            'entity_id': 'button.home_assistant_bridge_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1256851357',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Home Assistant',
        'model': 'Fan',
        'model_id': None,
        'name': 'Living Room Fan',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'fan.living_room_fan',
        'suggested_area': None,
        'sw_version': '0.104.0.dev0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.living_room_fan_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Living Room Fan Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1256851357_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Living Room Fan Identify',
            }),
            'entity_id': 'button.living_room_fan_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'preset_modes': None,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'fan',
            'entity_category': None,
            'entity_id': 'fan.living_room_fan',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Living Room Fan',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <FanEntityFeature: 53>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1256851357_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'direction': 'forward',
              'friendly_name': 'Living Room Fan',
              'percentage': 0,
              'percentage_step': 1.0,
              'preset_mode': None,
              'preset_modes': None,
              'supported_features': <FanEntityFeature: 53>,
            }),
            'entity_id': 'fan.living_room_fan',
            'state': 'off',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[home_assistant_bridge_basic_heater_cooler]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1233851541',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Lookin',
        'model': 'Climate Control',
        'model_id': None,
        'name': '89 Living Room',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'climate.89_living_room',
        'suggested_area': None,
        'sw_version': '2024.2.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.89_living_room_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': '89 Living Room Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1233851541_1_163',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': '89 Living Room Identify',
            }),
            'entity_id': 'button.89_living_room_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'hvac_modes': list([
                <HVACMode.HEAT_COOL: 'heat_cool'>,
                <HVACMode.HEAT: 'heat'>,
                <HVACMode.COOL: 'cool'>,
                <HVACMode.OFF: 'off'>,
              ]),
              'max_temp': 35,
              'min_temp': 7,
              'target_temp_step': 1.0,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'climate',
            'entity_category': None,
            'entity_id': 'climate.89_living_room',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': '89 Living Room',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <ClimateEntityFeature: 384>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1233851541_169',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_temperature': 22.8,
              'friendly_name': '89 Living Room',
              'hvac_action': <HVACAction.HEATING: 'heating'>,
              'hvac_modes': list([
                <HVACMode.HEAT_COOL: 'heat_cool'>,
                <HVACMode.HEAT: 'heat'>,
                <HVACMode.COOL: 'cool'>,
                <HVACMode.OFF: 'off'>,
              ]),
              'max_temp': 35,
              'min_temp': 7,
              'supported_features': <ClimateEntityFeature: 384>,
              'target_temp_step': 1.0,
            }),
            'entity_id': 'climate.89_living_room',
            'state': 'heat_cool',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'preset_modes': None,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'fan',
            'entity_category': None,
            'entity_id': 'fan.89_living_room',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': '89 Living Room',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <FanEntityFeature: 51>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1233851541_175',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': '89 Living Room',
              'oscillating': False,
              'percentage': 33,
              'percentage_step': 33.333333333333336,
              'preset_mode': None,
              'preset_modes': None,
              'supported_features': <FanEntityFeature: 51>,
            }),
            'entity_id': 'fan.89_living_room',
            'state': 'on',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'options': list([
                'celsius',
                'fahrenheit',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'select',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'select.89_living_room_temperature_display_units',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': '89 Living Room Temperature Display Units',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'temperature_display_units',
            'unique_id': '00:00:00:00:00:00_1233851541_169_174',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': '89 Living Room Temperature Display Units',
              'options': list([
                'celsius',
                'fahrenheit',
              ]),
            }),
            'entity_id': 'select.89_living_room_temperature_display_units',
            'state': 'fahrenheit',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.89_living_room_current_humidity',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
            'original_icon': None,
            'original_name': '89 Living Room Current Humidity',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1233851541_169_180',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'humidity',
              'friendly_name': '89 Living Room Current Humidity',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.89_living_room_current_humidity',
            'state': '60',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.89_living_room_current_temperature',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': '89 Living Room Current Temperature',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1233851541_169_172',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': '89 Living Room Current Temperature',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.89_living_room_current_temperature',
            'state': '22.8',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Home Assistant',
        'model': 'Bridge',
        'model_id': None,
        'name': 'HASS Bridge S6',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'homekit.bridge',
        'suggested_area': None,
        'sw_version': '2024.2.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hass_bridge_s6_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'HASS Bridge S6 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'HASS Bridge S6 Identify',
            }),
            'entity_id': 'button.hass_bridge_s6_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[home_assistant_bridge_basic_light]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Home Assistant',
        'model': 'Bridge',
        'model_id': None,
        'name': 'HASS Bridge S6',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'homekit.bridge',
        'suggested_area': None,
        'sw_version': '2024.2.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hass_bridge_s6_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'HASS Bridge S6 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'HASS Bridge S6 Identify',
            }),
            'entity_id': 'button.hass_bridge_s6_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '9.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:3982136094',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'FirstAlert',
        'model': '1039102',
        'model_id': None,
        'name': 'Laundry Smoke ED78',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'light.laundry_smoke_ed78',
        'suggested_area': None,
        'sw_version': '1.4.84',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.laundry_smoke_ed78_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Laundry Smoke ED78 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3982136094_1_597',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Laundry Smoke ED78 Identify',
            }),
            'entity_id': 'button.laundry_smoke_ed78_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.laundry_smoke_ed78',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Laundry Smoke ED78',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3982136094_608',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': None,
              'color_mode': None,
              'friendly_name': 'Laundry Smoke ED78',
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
            }),
            'entity_id': 'light.laundry_smoke_ed78',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.laundry_smoke_ed78_battery',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'Laundry Smoke ED78 Battery',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3982136094_604',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'Laundry Smoke ED78 Battery',
              'icon': 'mdi:battery',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.laundry_smoke_ed78_battery',
            'state': '100',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[home_assistant_bridge_cover]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:123016423',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'RYSE Inc.',
        'model': 'RYSE Shade',
        'model_id': None,
        'name': 'Family Room North',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'cover.family_door_north',
        'suggested_area': None,
        'sw_version': '3.6.2',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.family_room_north_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Family Room North Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_123016423_1_155',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Family Room North Identify',
            }),
            'entity_id': 'button.family_room_north_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.family_room_north',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Family Room North',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 15>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_123016423_166',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 98,
              'friendly_name': 'Family Room North',
              'supported_features': <CoverEntityFeature: 15>,
            }),
            'entity_id': 'cover.family_room_north',
            'state': 'open',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.family_room_north_battery',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'Family Room North Battery',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_123016423_162',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'Family Room North Battery',
              'icon': 'mdi:battery',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.family_room_north_battery',
            'state': '100',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Home Assistant',
        'model': 'Bridge',
        'model_id': None,
        'name': 'HASS Bridge S6',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'homekit.bridge',
        'suggested_area': None,
        'sw_version': '2024.2.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hass_bridge_s6_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'HASS Bridge S6 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'HASS Bridge S6 Identify',
            }),
            'entity_id': 'button.hass_bridge_s6_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:878448248',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'RYSE Inc.',
        'model': 'RYSE Shade',
        'model_id': None,
        'name': 'Kitchen Window',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'cover.kitchen_window',
        'suggested_area': None,
        'sw_version': '3.6.2',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.kitchen_window_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Kitchen Window Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_878448248_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Kitchen Window Identify',
            }),
            'entity_id': 'button.kitchen_window_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.kitchen_window',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Kitchen Window',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_878448248_13',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 100,
              'friendly_name': 'Kitchen Window',
              'supported_features': <CoverEntityFeature: 7>,
            }),
            'entity_id': 'cover.kitchen_window',
            'state': 'open',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.kitchen_window_battery',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'Kitchen Window Battery',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_878448248_9',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'Kitchen Window Battery',
              'icon': 'mdi:battery',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.kitchen_window_battery',
            'state': '100',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[home_assistant_bridge_fan]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:766313939',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Home Assistant',
        'model': 'Fan',
        'model_id': None,
        'name': 'Ceiling Fan',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'fan.ceiling_fan',
        'suggested_area': None,
        'sw_version': '0.104.0.dev0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.ceiling_fan_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Ceiling Fan Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_766313939_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Ceiling Fan Identify',
            }),
            'entity_id': 'button.ceiling_fan_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'preset_modes': None,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'fan',
            'entity_category': None,
            'entity_id': 'fan.ceiling_fan',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Ceiling Fan',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <FanEntityFeature: 49>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_766313939_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Ceiling Fan',
              'percentage': 0,
              'percentage_step': 1.0,
              'preset_mode': None,
              'preset_modes': None,
              'supported_features': <FanEntityFeature: 49>,
            }),
            'entity_id': 'fan.ceiling_fan',
            'state': 'off',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Home Assistant',
        'model': 'Bridge',
        'model_id': None,
        'name': 'Home Assistant Bridge',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'homekit.bridge',
        'suggested_area': None,
        'sw_version': '0.104.0.dev0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.home_assistant_bridge_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Home Assistant Bridge Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Home Assistant Bridge Identify',
            }),
            'entity_id': 'button.home_assistant_bridge_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1256851357',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Home Assistant',
        'model': 'Fan',
        'model_id': None,
        'name': 'Living Room Fan',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'fan.living_room_fan',
        'suggested_area': None,
        'sw_version': '0.104.0.dev0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.living_room_fan_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Living Room Fan Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1256851357_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Living Room Fan Identify',
            }),
            'entity_id': 'button.living_room_fan_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'preset_modes': None,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'fan',
            'entity_category': None,
            'entity_id': 'fan.living_room_fan',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Living Room Fan',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <FanEntityFeature: 55>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1256851357_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'direction': 'forward',
              'friendly_name': 'Living Room Fan',
              'oscillating': False,
              'percentage': 0,
              'percentage_step': 1.0,
              'preset_mode': None,
              'preset_modes': None,
              'supported_features': <FanEntityFeature: 55>,
            }),
            'entity_id': 'fan.living_room_fan',
            'state': 'off',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[home_assistant_bridge_fan_one_removed]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Home Assistant',
        'model': 'Bridge',
        'model_id': None,
        'name': 'Home Assistant Bridge',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'homekit.bridge',
        'suggested_area': None,
        'sw_version': '0.104.0.dev0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.home_assistant_bridge_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Home Assistant Bridge Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Home Assistant Bridge Identify',
            }),
            'entity_id': 'button.home_assistant_bridge_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1256851357',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Home Assistant',
        'model': 'Fan',
        'model_id': None,
        'name': 'Living Room Fan',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'fan.living_room_fan',
        'suggested_area': None,
        'sw_version': '0.104.0.dev0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.living_room_fan_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Living Room Fan Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1256851357_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Living Room Fan Identify',
            }),
            'entity_id': 'button.living_room_fan_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'preset_modes': None,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'fan',
            'entity_category': None,
            'entity_id': 'fan.living_room_fan',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Living Room Fan',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <FanEntityFeature: 55>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1256851357_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'direction': 'forward',
              'friendly_name': 'Living Room Fan',
              'oscillating': False,
              'percentage': 0,
              'percentage_step': 1.0,
              'preset_mode': None,
              'preset_modes': None,
              'supported_features': <FanEntityFeature: 55>,
            }),
            'entity_id': 'fan.living_room_fan',
            'state': 'off',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[home_assistant_bridge_heater_cooler]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1233851541',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Lookin',
        'model': 'Climate Control',
        'model_id': None,
        'name': '89 Living Room',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'climate.89_living_room',
        'suggested_area': None,
        'sw_version': '2024.2.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.89_living_room_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': '89 Living Room Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1233851541_1_163',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': '89 Living Room Identify',
            }),
            'entity_id': 'button.89_living_room_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'hvac_modes': list([
                <HVACMode.HEAT_COOL: 'heat_cool'>,
                <HVACMode.HEAT: 'heat'>,
                <HVACMode.COOL: 'cool'>,
                <HVACMode.OFF: 'off'>,
              ]),
              'max_temp': 35,
              'min_temp': 7,
              'swing_modes': list([
                'off',
                'vertical',
              ]),
              'target_temp_step': 1.0,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'climate',
            'entity_category': None,
            'entity_id': 'climate.89_living_room',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': '89 Living Room',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <ClimateEntityFeature: 416>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1233851541_169',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_temperature': 22.8,
              'friendly_name': '89 Living Room',
              'hvac_action': <HVACAction.HEATING: 'heating'>,
              'hvac_modes': list([
                <HVACMode.HEAT_COOL: 'heat_cool'>,
                <HVACMode.HEAT: 'heat'>,
                <HVACMode.COOL: 'cool'>,
                <HVACMode.OFF: 'off'>,
              ]),
              'max_temp': 35,
              'min_temp': 7,
              'supported_features': <ClimateEntityFeature: 416>,
              'swing_mode': 'vertical',
              'swing_modes': list([
                'off',
                'vertical',
              ]),
              'target_temp_step': 1.0,
            }),
            'entity_id': 'climate.89_living_room',
            'state': 'heat_cool',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'preset_modes': None,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'fan',
            'entity_category': None,
            'entity_id': 'fan.89_living_room',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': '89 Living Room',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <FanEntityFeature: 51>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1233851541_175',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': '89 Living Room',
              'oscillating': False,
              'percentage': 33,
              'percentage_step': 33.333333333333336,
              'preset_mode': None,
              'preset_modes': None,
              'supported_features': <FanEntityFeature: 51>,
            }),
            'entity_id': 'fan.89_living_room',
            'state': 'on',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'options': list([
                'celsius',
                'fahrenheit',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'select',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'select.89_living_room_temperature_display_units',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': '89 Living Room Temperature Display Units',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'temperature_display_units',
            'unique_id': '00:00:00:00:00:00_1233851541_169_174',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': '89 Living Room Temperature Display Units',
              'options': list([
                'celsius',
                'fahrenheit',
              ]),
            }),
            'entity_id': 'select.89_living_room_temperature_display_units',
            'state': 'fahrenheit',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.89_living_room_current_humidity',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
            'original_icon': None,
            'original_name': '89 Living Room Current Humidity',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1233851541_169_180',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'humidity',
              'friendly_name': '89 Living Room Current Humidity',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.89_living_room_current_humidity',
            'state': '60',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.89_living_room_current_temperature',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': '89 Living Room Current Temperature',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1233851541_169_172',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': '89 Living Room Current Temperature',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.89_living_room_current_temperature',
            'state': '22.8',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Home Assistant',
        'model': 'Bridge',
        'model_id': None,
        'name': 'HASS Bridge S6',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'homekit.bridge',
        'suggested_area': None,
        'sw_version': '2024.2.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hass_bridge_s6_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'HASS Bridge S6 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'HASS Bridge S6 Identify',
            }),
            'entity_id': 'button.hass_bridge_s6_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[home_assistant_bridge_humidifier]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Home Assistant',
        'model': 'Bridge',
        'model_id': None,
        'name': 'HASS Bridge S6',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'homekit.bridge',
        'suggested_area': None,
        'sw_version': '2024.2.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hass_bridge_s6_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'HASS Bridge S6 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'HASS Bridge S6 Identify',
            }),
            'entity_id': 'button.hass_bridge_s6_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:293334836',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'switchbot',
        'model': 'WoHumi',
        'model_id': None,
        'name': 'Humidifier 182A',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'humidifier.humidifier_182a',
        'suggested_area': None,
        'sw_version': '2024.2.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.humidifier_182a_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Humidifier 182A Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_293334836_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Humidifier 182A Identify',
            }),
            'entity_id': 'button.humidifier_182a_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'available_modes': list([
                'normal',
                'auto',
              ]),
              'max_humidity': 100,
              'min_humidity': 0,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'humidifier',
            'entity_category': None,
            'entity_id': 'humidifier.humidifier_182a',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <HumidifierDeviceClass.HUMIDIFIER: 'humidifier'>,
            'original_icon': None,
            'original_name': 'Humidifier 182A',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <HumidifierEntityFeature: 1>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_293334836_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'available_modes': list([
                'normal',
                'auto',
              ]),
              'current_humidity': 0,
              'device_class': 'humidifier',
              'friendly_name': 'Humidifier 182A',
              'humidity': 45,
              'max_humidity': 100,
              'min_humidity': 0,
              'mode': 'normal',
              'supported_features': <HumidifierEntityFeature: 1>,
            }),
            'entity_id': 'humidifier.humidifier_182a',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.humidifier_182a_current_humidity',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
            'original_icon': None,
            'original_name': 'Humidifier 182A Current Humidity',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_293334836_8_9',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'humidity',
              'friendly_name': 'Humidifier 182A Current Humidity',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.humidifier_182a_current_humidity',
            'state': '0',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[home_assistant_bridge_humidifier_new_range]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Home Assistant',
        'model': 'Bridge',
        'model_id': None,
        'name': 'HASS Bridge S6',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'homekit.bridge',
        'suggested_area': None,
        'sw_version': '2024.2.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hass_bridge_s6_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'HASS Bridge S6 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'HASS Bridge S6 Identify',
            }),
            'entity_id': 'button.hass_bridge_s6_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:293334836',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'switchbot',
        'model': 'WoHumi',
        'model_id': None,
        'name': 'Humidifier 182A',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'humidifier.humidifier_182a',
        'suggested_area': None,
        'sw_version': '2024.2.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.humidifier_182a_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Humidifier 182A Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_293334836_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Humidifier 182A Identify',
            }),
            'entity_id': 'button.humidifier_182a_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'available_modes': list([
                'normal',
                'auto',
              ]),
              'max_humidity': 80,
              'min_humidity': 20,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'humidifier',
            'entity_category': None,
            'entity_id': 'humidifier.humidifier_182a',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <HumidifierDeviceClass.HUMIDIFIER: 'humidifier'>,
            'original_icon': None,
            'original_name': 'Humidifier 182A',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <HumidifierEntityFeature: 1>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_293334836_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'available_modes': list([
                'normal',
                'auto',
              ]),
              'current_humidity': 0,
              'device_class': 'humidifier',
              'friendly_name': 'Humidifier 182A',
              'humidity': 45,
              'max_humidity': 80,
              'min_humidity': 20,
              'mode': 'normal',
              'supported_features': <HumidifierEntityFeature: 1>,
            }),
            'entity_id': 'humidifier.humidifier_182a',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.humidifier_182a_current_humidity',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
            'original_icon': None,
            'original_name': 'Humidifier 182A Current Humidity',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_293334836_8_9',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'humidity',
              'friendly_name': 'Humidifier 182A Current Humidity',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.humidifier_182a_current_humidity',
            'state': '0',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[home_assistant_bridge_light]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Home Assistant',
        'model': 'Bridge',
        'model_id': None,
        'name': 'HASS Bridge S6',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'homekit.bridge',
        'suggested_area': None,
        'sw_version': '2024.2.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hass_bridge_s6_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'HASS Bridge S6 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'HASS Bridge S6 Identify',
            }),
            'entity_id': 'button.hass_bridge_s6_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '9.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:3982136094',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'FirstAlert',
        'model': '1039102',
        'model_id': None,
        'name': 'Laundry Smoke ED78',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'light.laundry_smoke_ed78',
        'suggested_area': None,
        'sw_version': '1.4.84',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.laundry_smoke_ed78_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Laundry Smoke ED78 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3982136094_1_597',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Laundry Smoke ED78 Identify',
            }),
            'entity_id': 'button.laundry_smoke_ed78_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'max_color_temp_kelvin': 6535,
              'max_mireds': 500,
              'min_color_temp_kelvin': 2000,
              'min_mireds': 153,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
                <ColorMode.HS: 'hs'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.laundry_smoke_ed78',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Laundry Smoke ED78',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3982136094_608',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': None,
              'color_mode': None,
              'color_temp': None,
              'color_temp_kelvin': None,
              'friendly_name': 'Laundry Smoke ED78',
              'hs_color': None,
              'max_color_temp_kelvin': 6535,
              'max_mireds': 500,
              'min_color_temp_kelvin': 2000,
              'min_mireds': 153,
              'rgb_color': None,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
                <ColorMode.HS: 'hs'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
              'xy_color': None,
            }),
            'entity_id': 'light.laundry_smoke_ed78',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.laundry_smoke_ed78_battery',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'Laundry Smoke ED78 Battery',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3982136094_604',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'Laundry Smoke ED78 Battery',
              'icon': 'mdi:battery',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.laundry_smoke_ed78_battery',
            'state': '100',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[homespan_daikin_bridge]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Garzola Marco',
        'model': 'Daikin-fwec3a-esp32-homekit-bridge',
        'model_id': None,
        'name': 'Air Conditioner',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '00000001',
        'suggested_area': None,
        'sw_version': '1.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.air_conditioner_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Air Conditioner Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Air Conditioner Identify',
            }),
            'entity_id': 'button.air_conditioner_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'fan_modes': list([
                'off',
                'low',
                'medium',
                'high',
              ]),
              'hvac_modes': list([
                <HVACMode.HEAT_COOL: 'heat_cool'>,
                <HVACMode.HEAT: 'heat'>,
                <HVACMode.COOL: 'cool'>,
                <HVACMode.OFF: 'off'>,
              ]),
              'max_temp': 32,
              'min_temp': 18,
              'target_temp_step': 0.5,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'climate',
            'entity_category': None,
            'entity_id': 'climate.air_conditioner_slaveid_1',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Air Conditioner SlaveID 1',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <ClimateEntityFeature: 393>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_9',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_temperature': 27.9,
              'fan_mode': 'high',
              'fan_modes': list([
                'off',
                'low',
                'medium',
                'high',
              ]),
              'friendly_name': 'Air Conditioner SlaveID 1',
              'hvac_action': <HVACAction.COOLING: 'cooling'>,
              'hvac_modes': list([
                <HVACMode.HEAT_COOL: 'heat_cool'>,
                <HVACMode.HEAT: 'heat'>,
                <HVACMode.COOL: 'cool'>,
                <HVACMode.OFF: 'off'>,
              ]),
              'max_temp': 32,
              'min_temp': 18,
              'supported_features': <ClimateEntityFeature: 393>,
              'target_temp_step': 0.5,
              'temperature': 24.5,
            }),
            'entity_id': 'climate.air_conditioner_slaveid_1',
            'state': 'cool',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.air_conditioner_current_temperature',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'Air Conditioner Current Temperature',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_9_11',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'Air Conditioner Current Temperature',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.air_conditioner_current_temperature',
            'state': '27.9',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[hue_bridge]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:6623462395276914',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Philips',
        'model': 'LTW012',
        'model_id': None,
        'name': 'Hue ambiance candle',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '6623462395276914',
        'suggested_area': None,
        'sw_version': '1.46.13',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hue_ambiance_candle_identify_4',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Hue ambiance candle Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462395276914_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Hue ambiance candle Identify',
            }),
            'entity_id': 'button.hue_ambiance_candle_identify_4',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'max_color_temp_kelvin': 6535,
              'max_mireds': 454,
              'min_color_temp_kelvin': 2202,
              'min_mireds': 153,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.hue_ambiance_candle_4',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Hue ambiance candle',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462395276914_2816',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': None,
              'color_mode': None,
              'color_temp': None,
              'color_temp_kelvin': None,
              'friendly_name': 'Hue ambiance candle',
              'hs_color': None,
              'max_color_temp_kelvin': 6535,
              'max_mireds': 454,
              'min_color_temp_kelvin': 2202,
              'min_mireds': 153,
              'rgb_color': None,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
              'xy_color': None,
            }),
            'entity_id': 'light.hue_ambiance_candle_4',
            'state': 'off',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:6623462395276939',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Philips',
        'model': 'LTW012',
        'model_id': None,
        'name': 'Hue ambiance candle',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '6623462395276939',
        'suggested_area': None,
        'sw_version': '1.46.13',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hue_ambiance_candle_identify_3',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Hue ambiance candle Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462395276939_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Hue ambiance candle Identify',
            }),
            'entity_id': 'button.hue_ambiance_candle_identify_3',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'max_color_temp_kelvin': 6535,
              'max_mireds': 454,
              'min_color_temp_kelvin': 2202,
              'min_mireds': 153,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.hue_ambiance_candle_3',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Hue ambiance candle',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462395276939_2816',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': None,
              'color_mode': None,
              'color_temp': None,
              'color_temp_kelvin': None,
              'friendly_name': 'Hue ambiance candle',
              'hs_color': None,
              'max_color_temp_kelvin': 6535,
              'max_mireds': 454,
              'min_color_temp_kelvin': 2202,
              'min_mireds': 153,
              'rgb_color': None,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
              'xy_color': None,
            }),
            'entity_id': 'light.hue_ambiance_candle_3',
            'state': 'off',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:6623462403113447',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Philips',
        'model': 'LTW012',
        'model_id': None,
        'name': 'Hue ambiance candle',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '6623462403113447',
        'suggested_area': None,
        'sw_version': '1.46.13',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hue_ambiance_candle_identify_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Hue ambiance candle Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462403113447_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Hue ambiance candle Identify',
            }),
            'entity_id': 'button.hue_ambiance_candle_identify_2',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'max_color_temp_kelvin': 6535,
              'max_mireds': 454,
              'min_color_temp_kelvin': 2202,
              'min_mireds': 153,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.hue_ambiance_candle_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Hue ambiance candle',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462403113447_2816',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': None,
              'color_mode': None,
              'color_temp': None,
              'color_temp_kelvin': None,
              'friendly_name': 'Hue ambiance candle',
              'hs_color': None,
              'max_color_temp_kelvin': 6535,
              'max_mireds': 454,
              'min_color_temp_kelvin': 2202,
              'min_mireds': 153,
              'rgb_color': None,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
              'xy_color': None,
            }),
            'entity_id': 'light.hue_ambiance_candle_2',
            'state': 'off',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:6623462403233419',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Philips',
        'model': 'LTW012',
        'model_id': None,
        'name': 'Hue ambiance candle',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '6623462403233419',
        'suggested_area': None,
        'sw_version': '1.46.13',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hue_ambiance_candle_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Hue ambiance candle Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462403233419_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Hue ambiance candle Identify',
            }),
            'entity_id': 'button.hue_ambiance_candle_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'max_color_temp_kelvin': 6535,
              'max_mireds': 454,
              'min_color_temp_kelvin': 2202,
              'min_mireds': 153,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.hue_ambiance_candle',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Hue ambiance candle',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462403233419_2816',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': None,
              'color_mode': None,
              'color_temp': None,
              'color_temp_kelvin': None,
              'friendly_name': 'Hue ambiance candle',
              'hs_color': None,
              'max_color_temp_kelvin': 6535,
              'max_mireds': 454,
              'min_color_temp_kelvin': 2202,
              'min_mireds': 153,
              'rgb_color': None,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
              'xy_color': None,
            }),
            'entity_id': 'light.hue_ambiance_candle',
            'state': 'off',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:6623462412411853',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Philips',
        'model': 'LTW013',
        'model_id': None,
        'name': 'Hue ambiance spot',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '6623462412411853',
        'suggested_area': None,
        'sw_version': '1.46.13',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hue_ambiance_spot_identify_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Hue ambiance spot Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462412411853_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Hue ambiance spot Identify',
            }),
            'entity_id': 'button.hue_ambiance_spot_identify_2',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'max_color_temp_kelvin': 6535,
              'max_mireds': 454,
              'min_color_temp_kelvin': 2202,
              'min_mireds': 153,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.hue_ambiance_spot_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Hue ambiance spot',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462412411853_2816',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': 255.0,
              'color_mode': <ColorMode.COLOR_TEMP: 'color_temp'>,
              'color_temp': 366,
              'color_temp_kelvin': 2732,
              'friendly_name': 'Hue ambiance spot',
              'hs_color': tuple(
                28.327,
                64.71,
              ),
              'max_color_temp_kelvin': 6535,
              'max_mireds': 454,
              'min_color_temp_kelvin': 2202,
              'min_mireds': 153,
              'rgb_color': tuple(
                255,
                167,
                89,
              ),
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
              'xy_color': tuple(
                0.524,
                0.387,
              ),
            }),
            'entity_id': 'light.hue_ambiance_spot_2',
            'state': 'on',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:6623462412413293',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Philips',
        'model': 'LTW013',
        'model_id': None,
        'name': 'Hue ambiance spot',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '6623462412413293',
        'suggested_area': None,
        'sw_version': '1.46.13',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hue_ambiance_spot_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Hue ambiance spot Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462412413293_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Hue ambiance spot Identify',
            }),
            'entity_id': 'button.hue_ambiance_spot_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'max_color_temp_kelvin': 6535,
              'max_mireds': 454,
              'min_color_temp_kelvin': 2202,
              'min_mireds': 153,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.hue_ambiance_spot',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Hue ambiance spot',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462412413293_2816',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': 255.0,
              'color_mode': <ColorMode.COLOR_TEMP: 'color_temp'>,
              'color_temp': 366,
              'color_temp_kelvin': 2732,
              'friendly_name': 'Hue ambiance spot',
              'hs_color': tuple(
                28.327,
                64.71,
              ),
              'max_color_temp_kelvin': 6535,
              'max_mireds': 454,
              'min_color_temp_kelvin': 2202,
              'min_mireds': 153,
              'rgb_color': tuple(
                255,
                167,
                89,
              ),
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
              'xy_color': tuple(
                0.524,
                0.387,
              ),
            }),
            'entity_id': 'light.hue_ambiance_spot',
            'state': 'on',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:6623462389072572',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Philips',
        'model': 'RWL021',
        'model_id': None,
        'name': 'Hue dimmer switch',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '6623462389072572',
        'suggested_area': None,
        'sw_version': '45.1.17846',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hue_dimmer_switch_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Hue dimmer switch Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462389072572_1_22',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Hue dimmer switch Identify',
            }),
            'entity_id': 'button.hue_dimmer_switch_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'event_types': list([
                'single_press',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'event',
            'entity_category': None,
            'entity_id': 'event.hue_dimmer_switch_button_1',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <EventDeviceClass.BUTTON: 'button'>,
            'original_icon': None,
            'original_name': 'Hue dimmer switch button 1',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'button',
            'unique_id': '00:00:00:00:00:00_6623462389072572_588410585088',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'button',
              'event_type': None,
              'event_types': list([
                'single_press',
              ]),
              'friendly_name': 'Hue dimmer switch button 1',
            }),
            'entity_id': 'event.hue_dimmer_switch_button_1',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'event_types': list([
                'single_press',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'event',
            'entity_category': None,
            'entity_id': 'event.hue_dimmer_switch_button_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <EventDeviceClass.BUTTON: 'button'>,
            'original_icon': None,
            'original_name': 'Hue dimmer switch button 2',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'button',
            'unique_id': '00:00:00:00:00:00_6623462389072572_588410650624',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'button',
              'event_type': None,
              'event_types': list([
                'single_press',
              ]),
              'friendly_name': 'Hue dimmer switch button 2',
            }),
            'entity_id': 'event.hue_dimmer_switch_button_2',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'event_types': list([
                'single_press',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'event',
            'entity_category': None,
            'entity_id': 'event.hue_dimmer_switch_button_3',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <EventDeviceClass.BUTTON: 'button'>,
            'original_icon': None,
            'original_name': 'Hue dimmer switch button 3',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'button',
            'unique_id': '00:00:00:00:00:00_6623462389072572_588410716160',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'button',
              'event_type': None,
              'event_types': list([
                'single_press',
              ]),
              'friendly_name': 'Hue dimmer switch button 3',
            }),
            'entity_id': 'event.hue_dimmer_switch_button_3',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'event_types': list([
                'single_press',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'event',
            'entity_category': None,
            'entity_id': 'event.hue_dimmer_switch_button_4',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <EventDeviceClass.BUTTON: 'button'>,
            'original_icon': None,
            'original_name': 'Hue dimmer switch button 4',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'button',
            'unique_id': '00:00:00:00:00:00_6623462389072572_588410781696',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'button',
              'event_type': None,
              'event_types': list([
                'single_press',
              ]),
              'friendly_name': 'Hue dimmer switch button 4',
            }),
            'entity_id': 'event.hue_dimmer_switch_button_4',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.hue_dimmer_switch_battery',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'Hue dimmer switch battery',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462389072572_644245094400',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'Hue dimmer switch battery',
              'icon': 'mdi:battery',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.hue_dimmer_switch_battery',
            'state': '100',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:6623462378982941',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Philips',
        'model': 'LWB010',
        'model_id': None,
        'name': 'Hue white lamp',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '6623462378982941',
        'suggested_area': None,
        'sw_version': '1.46.13',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hue_white_lamp_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Hue white lamp Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462378982941_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Hue white lamp Identify',
            }),
            'entity_id': 'button.hue_white_lamp_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.hue_white_lamp',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Hue white lamp',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462378982941_2816',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': None,
              'color_mode': None,
              'friendly_name': 'Hue white lamp',
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
            }),
            'entity_id': 'light.hue_white_lamp',
            'state': 'off',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:6623462378983942',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Philips',
        'model': 'LWB010',
        'model_id': None,
        'name': 'Hue white lamp',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '6623462378983942',
        'suggested_area': None,
        'sw_version': '1.46.13',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hue_white_lamp_identify_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Hue white lamp Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462378983942_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Hue white lamp Identify',
            }),
            'entity_id': 'button.hue_white_lamp_identify_2',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.hue_white_lamp_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Hue white lamp',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462378983942_2816',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': None,
              'color_mode': None,
              'friendly_name': 'Hue white lamp',
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
            }),
            'entity_id': 'light.hue_white_lamp_2',
            'state': 'off',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:6623462379122122',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Philips',
        'model': 'LWB010',
        'model_id': None,
        'name': 'Hue white lamp',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '6623462379122122',
        'suggested_area': None,
        'sw_version': '1.46.13',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hue_white_lamp_identify_4',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Hue white lamp Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462379122122_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Hue white lamp Identify',
            }),
            'entity_id': 'button.hue_white_lamp_identify_4',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.hue_white_lamp_4',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Hue white lamp',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462379122122_2816',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': None,
              'color_mode': None,
              'friendly_name': 'Hue white lamp',
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
            }),
            'entity_id': 'light.hue_white_lamp_4',
            'state': 'off',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:6623462379123707',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Philips',
        'model': 'LWB010',
        'model_id': None,
        'name': 'Hue white lamp',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '6623462379123707',
        'suggested_area': None,
        'sw_version': '1.46.13',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hue_white_lamp_identify_3',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Hue white lamp Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462379123707_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Hue white lamp Identify',
            }),
            'entity_id': 'button.hue_white_lamp_identify_3',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.hue_white_lamp_3',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Hue white lamp',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462379123707_2816',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': None,
              'color_mode': None,
              'friendly_name': 'Hue white lamp',
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
            }),
            'entity_id': 'light.hue_white_lamp_3',
            'state': 'off',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:6623462383114163',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Philips',
        'model': 'LWB010',
        'model_id': None,
        'name': 'Hue white lamp',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '6623462383114163',
        'suggested_area': None,
        'sw_version': '1.46.13',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hue_white_lamp_identify_7',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Hue white lamp Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462383114163_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Hue white lamp Identify',
            }),
            'entity_id': 'button.hue_white_lamp_identify_7',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.hue_white_lamp_7',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Hue white lamp',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462383114163_2816',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': None,
              'color_mode': None,
              'friendly_name': 'Hue white lamp',
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
            }),
            'entity_id': 'light.hue_white_lamp_7',
            'state': 'off',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:6623462383114193',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Philips',
        'model': 'LWB010',
        'model_id': None,
        'name': 'Hue white lamp',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '6623462383114193',
        'suggested_area': None,
        'sw_version': '1.46.13',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hue_white_lamp_identify_6',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Hue white lamp Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462383114193_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Hue white lamp Identify',
            }),
            'entity_id': 'button.hue_white_lamp_identify_6',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.hue_white_lamp_6',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Hue white lamp',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462383114193_2816',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': None,
              'color_mode': None,
              'friendly_name': 'Hue white lamp',
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
            }),
            'entity_id': 'light.hue_white_lamp_6',
            'state': 'off',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:6623462385996792',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Philips',
        'model': 'LWB010',
        'model_id': None,
        'name': 'Hue white lamp',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '6623462385996792',
        'suggested_area': None,
        'sw_version': '1.46.13',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.hue_white_lamp_identify_5',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Hue white lamp Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462385996792_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Hue white lamp Identify',
            }),
            'entity_id': 'button.hue_white_lamp_identify_5',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.hue_white_lamp_5',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Hue white lamp',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_6623462385996792_2816',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': None,
              'color_mode': None,
              'friendly_name': 'Hue white lamp',
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
            }),
            'entity_id': 'light.hue_white_lamp_5',
            'state': 'off',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Philips Lighting',
        'model': 'BSB002',
        'model_id': None,
        'name': 'Philips hue - 482544',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '123456',
        'suggested_area': None,
        'sw_version': '1.32.1932126170',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.philips_hue_482544_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Philips hue - 482544 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Philips hue - 482544 Identify',
            }),
            'entity_id': 'button.philips_hue_482544_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[koogeek_ls1]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Koogeek',
        'model': 'LS1',
        'model_id': None,
        'name': 'Koogeek-LS1-20833F',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'AAAA011111111111',
        'suggested_area': None,
        'sw_version': '2.2.15',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.koogeek_ls1_20833f_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Koogeek-LS1-20833F Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Koogeek-LS1-20833F Identify',
            }),
            'entity_id': 'button.koogeek_ls1_20833f_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'max_color_temp_kelvin': 6535,
              'max_mireds': 500,
              'min_color_temp_kelvin': 2000,
              'min_mireds': 153,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
                <ColorMode.HS: 'hs'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.koogeek_ls1_20833f_light_strip',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Koogeek-LS1-20833F Light Strip',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': None,
              'color_mode': None,
              'color_temp': None,
              'color_temp_kelvin': None,
              'friendly_name': 'Koogeek-LS1-20833F Light Strip',
              'hs_color': None,
              'max_color_temp_kelvin': 6535,
              'max_mireds': 500,
              'min_color_temp_kelvin': 2000,
              'min_mireds': 153,
              'rgb_color': None,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
                <ColorMode.HS: 'hs'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
              'xy_color': None,
            }),
            'entity_id': 'light.koogeek_ls1_20833f_light_strip',
            'state': 'off',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[koogeek_p1eu]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Koogeek',
        'model': 'P1EU',
        'model_id': None,
        'name': 'Koogeek-P1-A00AA0',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'EUCP03190xxxxx48',
        'suggested_area': None,
        'sw_version': '2.3.7',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.koogeek_p1_a00aa0_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Koogeek-P1-A00AA0 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Koogeek-P1-A00AA0 Identify',
            }),
            'entity_id': 'button.koogeek_p1_a00aa0_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.koogeek_p1_a00aa0_power',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.POWER: 'power'>,
            'original_icon': None,
            'original_name': 'Koogeek-P1-A00AA0 Power',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_21_22',
            'unit_of_measurement': <UnitOfPower.WATT: 'W'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'power',
              'friendly_name': 'Koogeek-P1-A00AA0 Power',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfPower.WATT: 'W'>,
            }),
            'entity_id': 'sensor.koogeek_p1_a00aa0_power',
            'state': '5',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.koogeek_p1_a00aa0_outlet',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Koogeek-P1-A00AA0 outlet',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Koogeek-P1-A00AA0 outlet',
              'outlet_in_use': True,
            }),
            'entity_id': 'switch.koogeek_p1_a00aa0_outlet',
            'state': 'off',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[koogeek_sw2]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Koogeek',
        'model': 'KH02CN',
        'model_id': None,
        'name': 'Koogeek-SW2-187A91',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'CNNT061751001372',
        'suggested_area': None,
        'sw_version': '1.0.3',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.koogeek_sw2_187a91_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Koogeek-SW2-187A91 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Koogeek-SW2-187A91 Identify',
            }),
            'entity_id': 'button.koogeek_sw2_187a91_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.koogeek_sw2_187a91_power',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.POWER: 'power'>,
            'original_icon': None,
            'original_name': 'Koogeek-SW2-187A91 Power',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_14_18',
            'unit_of_measurement': <UnitOfPower.WATT: 'W'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'power',
              'friendly_name': 'Koogeek-SW2-187A91 Power',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfPower.WATT: 'W'>,
            }),
            'entity_id': 'sensor.koogeek_sw2_187a91_power',
            'state': '0',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.koogeek_sw2_187a91_switch_1',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Koogeek-SW2-187A91 Switch 1',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Koogeek-SW2-187A91 Switch 1',
            }),
            'entity_id': 'switch.koogeek_sw2_187a91_switch_1',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.koogeek_sw2_187a91_switch_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Koogeek-SW2-187A91 Switch 2',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_11',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Koogeek-SW2-187A91 Switch 2',
            }),
            'entity_id': 'switch.koogeek_sw2_187a91_switch_2',
            'state': 'off',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[lennox_e30]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '3.0.XX',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Lennox',
        'model': 'E30 2B',
        'model_id': None,
        'name': 'Lennox',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'XXXXXXXX',
        'suggested_area': None,
        'sw_version': '3.40.XX',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.lennox_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Lennox Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Lennox Identify',
            }),
            'entity_id': 'button.lennox_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'hvac_modes': list([
                <HVACMode.OFF: 'off'>,
                <HVACMode.HEAT: 'heat'>,
                <HVACMode.COOL: 'cool'>,
                <HVACMode.HEAT_COOL: 'heat_cool'>,
              ]),
              'max_temp': 37,
              'min_temp': 4.5,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'climate',
            'entity_category': None,
            'entity_id': 'climate.lennox',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Lennox',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <ClimateEntityFeature: 387>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_100',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_humidity': 34,
              'current_temperature': 20.5,
              'friendly_name': 'Lennox',
              'hvac_action': <HVACAction.HEATING: 'heating'>,
              'hvac_modes': list([
                <HVACMode.OFF: 'off'>,
                <HVACMode.HEAT: 'heat'>,
                <HVACMode.COOL: 'cool'>,
                <HVACMode.HEAT_COOL: 'heat_cool'>,
              ]),
              'max_temp': 37,
              'min_temp': 4.5,
              'supported_features': <ClimateEntityFeature: 387>,
              'target_temp_high': 29.5,
              'target_temp_low': 21,
              'temperature': None,
            }),
            'entity_id': 'climate.lennox',
            'state': 'heat_cool',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'options': list([
                'celsius',
                'fahrenheit',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'select',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'select.lennox_temperature_display_units',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Lennox Temperature Display Units',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'temperature_display_units',
            'unique_id': '00:00:00:00:00:00_1_100_105',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Lennox Temperature Display Units',
              'options': list([
                'celsius',
                'fahrenheit',
              ]),
            }),
            'entity_id': 'select.lennox_temperature_display_units',
            'state': 'celsius',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.lennox_current_humidity',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
            'original_icon': None,
            'original_name': 'Lennox Current Humidity',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_100_107',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'humidity',
              'friendly_name': 'Lennox Current Humidity',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.lennox_current_humidity',
            'state': '34',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.lennox_current_temperature',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'Lennox Current Temperature',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_100_103',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'Lennox Current Temperature',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.lennox_current_temperature',
            'state': '20.5',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[lg_tv]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'LG Electronics',
        'model': 'OLED55B9PUA',
        'model_id': None,
        'name': 'LG webOS TV AF80',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '999AAAAAA999',
        'suggested_area': None,
        'sw_version': '04.71.04',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.lg_webos_tv_af80_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'LG webOS TV AF80 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'LG webOS TV AF80 Identify',
            }),
            'entity_id': 'button.lg_webos_tv_af80_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'source_list': list([
                'AirPlay',
                'Live TV',
                'HDMI 1',
                'Sony',
                'Apple',
                'AV',
                'HDMI 4',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'media_player',
            'entity_category': None,
            'entity_id': 'media_player.lg_webos_tv_af80',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <MediaPlayerDeviceClass.TV: 'tv'>,
            'original_icon': None,
            'original_name': 'LG webOS TV AF80',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <MediaPlayerEntityFeature: 18433>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_48',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'tv',
              'friendly_name': 'LG webOS TV AF80',
              'source': 'HDMI 4',
              'source_list': list([
                'AirPlay',
                'Live TV',
                'HDMI 1',
                'Sony',
                'Apple',
                'AV',
                'HDMI 4',
              ]),
              'supported_features': <MediaPlayerEntityFeature: 18433>,
            }),
            'entity_id': 'media_player.lg_webos_tv_af80',
            'state': 'on',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'switch.lg_webos_tv_af80_mute',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'LG webOS TV AF80 Mute',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'mute',
            'unique_id': '00:00:00:00:00:00_1_80_82',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'LG webOS TV AF80 Mute',
            }),
            'entity_id': 'switch.lg_webos_tv_af80_mute',
            'state': 'off',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[lutron_caseta_bridge]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:21474836482',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Lutron Electronics Co., Inc',
        'model': 'PD-FSQN-XX',
        'model_id': None,
        'name': 'Caséta® Wireless Fan Speed Control',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '39024290',
        'suggested_area': None,
        'sw_version': '001.005',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.caseta_r_wireless_fan_speed_control_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Caséta® Wireless Fan Speed Control Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_21474836482_1_85899345921',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Caséta® Wireless Fan Speed Control Identify',
            }),
            'entity_id': 'button.caseta_r_wireless_fan_speed_control_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'preset_modes': None,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'fan',
            'entity_category': None,
            'entity_id': 'fan.caseta_r_wireless_fan_speed_control',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Caséta® Wireless Fan Speed Control',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <FanEntityFeature: 49>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_21474836482_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Caséta® Wireless Fan Speed Control',
              'percentage': 0,
              'percentage_step': 25.0,
              'preset_mode': None,
              'preset_modes': None,
              'supported_features': <FanEntityFeature: 49>,
            }),
            'entity_id': 'fan.caseta_r_wireless_fan_speed_control',
            'state': 'off',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Lutron Electronics Co., Inc',
        'model': 'L-BDG2-WH',
        'model_id': None,
        'name': 'Smart Bridge 2',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '12344331',
        'suggested_area': None,
        'sw_version': '08.08',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.smart_bridge_2_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Smart Bridge 2 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_85899345921',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Smart Bridge 2 Identify',
            }),
            'entity_id': 'button.smart_bridge_2_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[mss425f]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '4.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Meross',
        'model': 'MSS425F',
        'model_id': None,
        'name': 'MSS425F-15cc',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'HH41234',
        'suggested_area': None,
        'sw_version': '4.2.3',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.mss425f_15cc_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'MSS425F-15cc Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'MSS425F-15cc Identify',
            }),
            'entity_id': 'button.mss425f_15cc_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.mss425f_15cc_outlet_1',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'MSS425F-15cc Outlet-1',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_12',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'MSS425F-15cc Outlet-1',
            }),
            'entity_id': 'switch.mss425f_15cc_outlet_1',
            'state': 'on',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.mss425f_15cc_outlet_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'MSS425F-15cc Outlet-2',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_15',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'MSS425F-15cc Outlet-2',
            }),
            'entity_id': 'switch.mss425f_15cc_outlet_2',
            'state': 'on',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.mss425f_15cc_outlet_3',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'MSS425F-15cc Outlet-3',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_18',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'MSS425F-15cc Outlet-3',
            }),
            'entity_id': 'switch.mss425f_15cc_outlet_3',
            'state': 'on',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.mss425f_15cc_outlet_4',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'MSS425F-15cc Outlet-4',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_21',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'MSS425F-15cc Outlet-4',
            }),
            'entity_id': 'switch.mss425f_15cc_outlet_4',
            'state': 'on',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.mss425f_15cc_usb',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'MSS425F-15cc USB',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_24',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'MSS425F-15cc USB',
            }),
            'entity_id': 'switch.mss425f_15cc_usb',
            'state': 'on',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[mss565]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '4.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Meross',
        'model': 'MSS565',
        'model_id': None,
        'name': 'MSS565-28da',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'BB1121',
        'suggested_area': None,
        'sw_version': '4.1.9',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.mss565_28da_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'MSS565-28da Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'MSS565-28da Identify',
            }),
            'entity_id': 'button.mss565_28da_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.mss565_28da_dimmer_switch',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'MSS565-28da Dimmer Switch',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_12',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': 170.85,
              'color_mode': <ColorMode.BRIGHTNESS: 'brightness'>,
              'friendly_name': 'MSS565-28da Dimmer Switch',
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
            }),
            'entity_id': 'light.mss565_28da_dimmer_switch',
            'state': 'on',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[mysa_living]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Empowered Homes Inc.',
        'model': 'v1',
        'model_id': None,
        'name': 'Mysa-85dda9',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'AAAAAAA000',
        'suggested_area': None,
        'sw_version': '2.8.1',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.mysa_85dda9_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Mysa-85dda9 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Mysa-85dda9 Identify',
            }),
            'entity_id': 'button.mysa_85dda9_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'hvac_modes': list([
                <HVACMode.OFF: 'off'>,
                <HVACMode.HEAT: 'heat'>,
                <HVACMode.COOL: 'cool'>,
                <HVACMode.HEAT_COOL: 'heat_cool'>,
              ]),
              'max_temp': 35,
              'min_temp': 7,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'climate',
            'entity_category': None,
            'entity_id': 'climate.mysa_85dda9_thermostat',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Mysa-85dda9 Thermostat',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <ClimateEntityFeature: 385>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_20',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_humidity': 40,
              'current_temperature': 24.1,
              'friendly_name': 'Mysa-85dda9 Thermostat',
              'hvac_action': <HVACAction.IDLE: 'idle'>,
              'hvac_modes': list([
                <HVACMode.OFF: 'off'>,
                <HVACMode.HEAT: 'heat'>,
                <HVACMode.COOL: 'cool'>,
                <HVACMode.HEAT_COOL: 'heat_cool'>,
              ]),
              'max_temp': 35,
              'min_temp': 7,
              'supported_features': <ClimateEntityFeature: 385>,
              'temperature': None,
            }),
            'entity_id': 'climate.mysa_85dda9_thermostat',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.mysa_85dda9_display',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Mysa-85dda9 Display',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_40',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': None,
              'color_mode': None,
              'friendly_name': 'Mysa-85dda9 Display',
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
            }),
            'entity_id': 'light.mysa_85dda9_display',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'options': list([
                'celsius',
                'fahrenheit',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'select',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'select.mysa_85dda9_temperature_display_units',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Mysa-85dda9 Temperature Display Units',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'temperature_display_units',
            'unique_id': '00:00:00:00:00:00_1_20_26',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Mysa-85dda9 Temperature Display Units',
              'options': list([
                'celsius',
                'fahrenheit',
              ]),
            }),
            'entity_id': 'select.mysa_85dda9_temperature_display_units',
            'state': 'celsius',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.mysa_85dda9_current_humidity',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
            'original_icon': None,
            'original_name': 'Mysa-85dda9 Current Humidity',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_20_27',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'humidity',
              'friendly_name': 'Mysa-85dda9 Current Humidity',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.mysa_85dda9_current_humidity',
            'state': '40',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.mysa_85dda9_current_temperature',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'Mysa-85dda9 Current Temperature',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_20_25',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'Mysa-85dda9 Current Temperature',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.mysa_85dda9_current_temperature',
            'state': '24.1',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[nanoleaf_strip_nl55]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.2.4',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Nanoleaf',
        'model': 'NL55',
        'model_id': None,
        'name': 'Nanoleaf Strip 3B32',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'AAAA011111111111',
        'suggested_area': None,
        'sw_version': '1.4.40',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.nanoleaf_strip_3b32_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Nanoleaf Strip 3B32 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Nanoleaf Strip 3B32 Identify',
            }),
            'entity_id': 'button.nanoleaf_strip_3b32_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'max_color_temp_kelvin': 6535,
              'max_mireds': 470,
              'min_color_temp_kelvin': 2127,
              'min_mireds': 153,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
                <ColorMode.HS: 'hs'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.nanoleaf_strip_3b32_nanoleaf_light_strip',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Nanoleaf Strip 3B32 Nanoleaf Light Strip',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_19',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': 255.0,
              'color_mode': <ColorMode.HS: 'hs'>,
              'color_temp': None,
              'color_temp_kelvin': None,
              'friendly_name': 'Nanoleaf Strip 3B32 Nanoleaf Light Strip',
              'hs_color': tuple(
                30.0,
                89.0,
              ),
              'max_color_temp_kelvin': 6535,
              'max_mireds': 470,
              'min_color_temp_kelvin': 2127,
              'min_mireds': 153,
              'rgb_color': tuple(
                255,
                141,
                28,
              ),
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
                <ColorMode.HS: 'hs'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
              'xy_color': tuple(
                0.589,
                0.385,
              ),
            }),
            'entity_id': 'light.nanoleaf_strip_3b32_nanoleaf_light_strip',
            'state': 'on',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'options': list([
                'border_router_capable',
                'full',
                'minimal',
                'none',
                'router_eligible',
                'sleepy',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.nanoleaf_strip_3b32_thread_capabilities',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
            'original_icon': None,
            'original_name': 'Nanoleaf Strip 3B32 Thread Capabilities',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'thread_node_capabilities',
            'unique_id': '00:00:00:00:00:00_1_31_115',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'enum',
              'friendly_name': 'Nanoleaf Strip 3B32 Thread Capabilities',
              'options': list([
                'border_router_capable',
                'full',
                'minimal',
                'none',
                'router_eligible',
                'sleepy',
              ]),
            }),
            'entity_id': 'sensor.nanoleaf_strip_3b32_thread_capabilities',
            'state': 'border_router_capable',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'options': list([
                'border_router',
                'child',
                'detached',
                'disabled',
                'joining',
                'leader',
                'router',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.nanoleaf_strip_3b32_thread_status',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
            'original_icon': None,
            'original_name': 'Nanoleaf Strip 3B32 Thread Status',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'thread_status',
            'unique_id': '00:00:00:00:00:00_1_31_117',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'enum',
              'friendly_name': 'Nanoleaf Strip 3B32 Thread Status',
              'options': list([
                'border_router',
                'child',
                'detached',
                'disabled',
                'joining',
                'leader',
                'router',
              ]),
            }),
            'entity_id': 'sensor.nanoleaf_strip_3b32_thread_status',
            'state': 'border_router',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[netamo_doorbell]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'Netatmo Doorbell',
        'model_id': None,
        'name': 'Netatmo-Doorbell-g738658',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'g738658',
        'suggested_area': None,
        'sw_version': '80.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.netatmo_doorbell_g738658_motion_sensor',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.MOTION: 'motion'>,
            'original_icon': None,
            'original_name': 'Netatmo-Doorbell-g738658 Motion Sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_10',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'motion',
              'friendly_name': 'Netatmo-Doorbell-g738658 Motion Sensor',
            }),
            'entity_id': 'binary_sensor.netatmo_doorbell_g738658_motion_sensor',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.netatmo_doorbell_g738658_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Netatmo-Doorbell-g738658 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Netatmo-Doorbell-g738658 Identify',
            }),
            'entity_id': 'button.netatmo_doorbell_g738658_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'camera',
            'entity_category': None,
            'entity_id': 'camera.netatmo_doorbell_g738658',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Netatmo-Doorbell-g738658',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Netatmo-Doorbell-g738658',
              'supported_features': <CameraEntityFeature: 0>,
            }),
            'entity_id': 'camera.netatmo_doorbell_g738658',
            'state': 'idle',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'event_types': list([
                'single_press',
                'double_press',
                'long_press',
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'event',
            'entity_category': None,
            'entity_id': 'event.netatmo_doorbell_g738658',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <EventDeviceClass.DOORBELL: 'doorbell'>,
            'original_icon': None,
            'original_name': 'Netatmo-Doorbell-g738658',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'doorbell',
            'unique_id': '00:00:00:00:00:00_1_49',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'doorbell',
              'event_type': None,
              'event_types': list([
                'single_press',
                'double_press',
                'long_press',
              ]),
              'friendly_name': 'Netatmo-Doorbell-g738658',
            }),
            'entity_id': 'event.netatmo_doorbell_g738658',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'switch.netatmo_doorbell_g738658_mute',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Netatmo-Doorbell-g738658 Mute',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'mute',
            'unique_id': '00:00:00:00:00:00_1_51_52',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Netatmo-Doorbell-g738658 Mute',
            }),
            'entity_id': 'switch.netatmo_doorbell_g738658_mute',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'switch.netatmo_doorbell_g738658_mute_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Netatmo-Doorbell-g738658 Mute',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'mute',
            'unique_id': '00:00:00:00:00:00_1_8_9',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Netatmo-Doorbell-g738658 Mute',
            }),
            'entity_id': 'switch.netatmo_doorbell_g738658_mute_2',
            'state': 'off',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[netamo_smart_co_alarm]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'Smart CO Alarm',
        'model_id': None,
        'name': 'Smart CO Alarm',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '1234',
        'suggested_area': None,
        'sw_version': '1.0.3',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': None,
            'entity_id': 'binary_sensor.smart_co_alarm_carbon_monoxide_sensor',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.CO: 'carbon_monoxide'>,
            'original_icon': None,
            'original_name': 'Smart CO Alarm Carbon Monoxide Sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_22',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'carbon_monoxide',
              'friendly_name': 'Smart CO Alarm Carbon Monoxide Sensor',
            }),
            'entity_id': 'binary_sensor.smart_co_alarm_carbon_monoxide_sensor',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'binary_sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'binary_sensor.smart_co_alarm_low_battery',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <BinarySensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': None,
            'original_name': 'Smart CO Alarm Low Battery',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_36',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'Smart CO Alarm Low Battery',
            }),
            'entity_id': 'binary_sensor.smart_co_alarm_low_battery',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.smart_co_alarm_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Smart CO Alarm Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_7_3',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Smart CO Alarm Identify',
            }),
            'entity_id': 'button.smart_co_alarm_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[netatmo_home_coach]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'Healthy Home Coach',
        'model_id': None,
        'name': 'Healthy Home Coach',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'AAAAAAAAAAAAA',
        'suggested_area': None,
        'sw_version': '59',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.healthy_home_coach_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Healthy Home Coach Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Healthy Home Coach Identify',
            }),
            'entity_id': 'button.healthy_home_coach_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.healthy_home_coach_air_quality',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.AQI: 'aqi'>,
            'original_icon': None,
            'original_name': 'Healthy Home Coach Air Quality',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_24_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'aqi',
              'friendly_name': 'Healthy Home Coach Air Quality',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'entity_id': 'sensor.healthy_home_coach_air_quality',
            'state': '1',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.healthy_home_coach_carbon_dioxide_sensor',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.CO2: 'carbon_dioxide'>,
            'original_icon': None,
            'original_name': 'Healthy Home Coach Carbon Dioxide sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_10',
            'unit_of_measurement': 'ppm',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'carbon_dioxide',
              'friendly_name': 'Healthy Home Coach Carbon Dioxide sensor',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': 'ppm',
            }),
            'entity_id': 'sensor.healthy_home_coach_carbon_dioxide_sensor',
            'state': '804',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.healthy_home_coach_humidity_sensor',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
            'original_icon': None,
            'original_name': 'Healthy Home Coach Humidity sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_14',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'humidity',
              'friendly_name': 'Healthy Home Coach Humidity sensor',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.healthy_home_coach_humidity_sensor',
            'state': '59',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.healthy_home_coach_noise',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.SOUND_PRESSURE: 'sound_pressure'>,
            'original_icon': None,
            'original_name': 'Healthy Home Coach Noise',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_20_21',
            'unit_of_measurement': <UnitOfSoundPressure.DECIBEL: 'dB'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'sound_pressure',
              'friendly_name': 'Healthy Home Coach Noise',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfSoundPressure.DECIBEL: 'dB'>,
            }),
            'entity_id': 'sensor.healthy_home_coach_noise',
            'state': '0',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.healthy_home_coach_temperature_sensor',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'Healthy Home Coach Temperature sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_17',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'Healthy Home Coach Temperature sensor',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.healthy_home_coach_temperature_sensor',
            'state': '22.9',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[rainmachine-pro-8]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Green Electronics LLC',
        'model': 'SPK5 Pro',
        'model_id': None,
        'name': 'RainMachine-00ce4a',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '00aa0000aa0a',
        'suggested_area': None,
        'sw_version': '1.0.4',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.rainmachine_00ce4a_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'RainMachine-00ce4a Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'RainMachine-00ce4a Identify',
            }),
            'entity_id': 'button.rainmachine_00ce4a_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.rainmachine_00ce4a',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'RainMachine-00ce4a',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'valve',
            'unique_id': '00:00:00:00:00:00_1_512',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'RainMachine-00ce4a',
              'in_use': False,
              'is_configured': True,
              'remaining_duration': 0,
            }),
            'entity_id': 'switch.rainmachine_00ce4a',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.rainmachine_00ce4a_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'RainMachine-00ce4a',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'valve',
            'unique_id': '00:00:00:00:00:00_1_768',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'RainMachine-00ce4a',
              'in_use': False,
              'is_configured': True,
              'remaining_duration': 0,
            }),
            'entity_id': 'switch.rainmachine_00ce4a_2',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.rainmachine_00ce4a_3',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'RainMachine-00ce4a',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'valve',
            'unique_id': '00:00:00:00:00:00_1_1024',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'RainMachine-00ce4a',
              'in_use': False,
              'is_configured': True,
              'remaining_duration': 0,
            }),
            'entity_id': 'switch.rainmachine_00ce4a_3',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.rainmachine_00ce4a_4',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'RainMachine-00ce4a',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'valve',
            'unique_id': '00:00:00:00:00:00_1_1280',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'RainMachine-00ce4a',
              'in_use': False,
              'is_configured': True,
              'remaining_duration': 0,
            }),
            'entity_id': 'switch.rainmachine_00ce4a_4',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.rainmachine_00ce4a_5',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'RainMachine-00ce4a',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'valve',
            'unique_id': '00:00:00:00:00:00_1_1536',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'RainMachine-00ce4a',
              'in_use': False,
              'is_configured': True,
              'remaining_duration': 0,
            }),
            'entity_id': 'switch.rainmachine_00ce4a_5',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.rainmachine_00ce4a_6',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'RainMachine-00ce4a',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'valve',
            'unique_id': '00:00:00:00:00:00_1_1792',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'RainMachine-00ce4a',
              'in_use': False,
              'is_configured': True,
              'remaining_duration': 0,
            }),
            'entity_id': 'switch.rainmachine_00ce4a_6',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.rainmachine_00ce4a_7',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'RainMachine-00ce4a',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'valve',
            'unique_id': '00:00:00:00:00:00_1_2048',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'RainMachine-00ce4a',
              'in_use': False,
              'is_configured': True,
              'remaining_duration': 0,
            }),
            'entity_id': 'switch.rainmachine_00ce4a_7',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.rainmachine_00ce4a_8',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'RainMachine-00ce4a',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'valve',
            'unique_id': '00:00:00:00:00:00_1_2304',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'RainMachine-00ce4a',
              'in_use': False,
              'is_configured': True,
              'remaining_duration': 0,
            }),
            'entity_id': 'switch.rainmachine_00ce4a_8',
            'state': 'off',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[ryse_smart_bridge]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:2',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'RYSE Inc.',
        'model': 'RYSE Shade',
        'model_id': None,
        'name': 'Master Bath South',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '1.0.0',
        'suggested_area': None,
        'sw_version': '3.0.8',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.master_bath_south_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'Master Bath South Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'Master Bath South Identify',
            }),
            'entity_id': 'button.master_bath_south_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.master_bath_south_ryse_shade',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'Master Bath South RYSE Shade',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_48',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 0,
              'friendly_name': 'Master Bath South RYSE Shade',
              'supported_features': <CoverEntityFeature: 7>,
            }),
            'entity_id': 'cover.master_bath_south_ryse_shade',
            'state': 'closed',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.master_bath_south_ryse_shade_battery',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'Master Bath South RYSE Shade Battery',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_64',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'Master Bath South RYSE Shade Battery',
              'icon': 'mdi:battery',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.master_bath_south_ryse_shade_battery',
            'state': '100',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '0101.3521.0436',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'RYSE Inc.',
        'model': 'RYSE SmartBridge',
        'model_id': None,
        'name': 'RYSE SmartBridge',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '0101.3521.0436',
        'suggested_area': None,
        'sw_version': '1.3.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.ryse_smartbridge_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'RYSE SmartBridge Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'RYSE SmartBridge Identify',
            }),
            'entity_id': 'button.ryse_smartbridge_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:3',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'RYSE Inc.',
        'model': 'RYSE Shade',
        'model_id': None,
        'name': 'RYSE SmartShade',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '',
        'suggested_area': None,
        'sw_version': '',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.ryse_smartshade_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'RYSE SmartShade Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'RYSE SmartShade Identify',
            }),
            'entity_id': 'button.ryse_smartshade_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.ryse_smartshade_ryse_shade',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'RYSE SmartShade RYSE Shade',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_48',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 100,
              'friendly_name': 'RYSE SmartShade RYSE Shade',
              'supported_features': <CoverEntityFeature: 7>,
            }),
            'entity_id': 'cover.ryse_smartshade_ryse_shade',
            'state': 'open',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.ryse_smartshade_ryse_shade_battery',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'RYSE SmartShade RYSE Shade Battery',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_64',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'RYSE SmartShade RYSE Shade Battery',
              'icon': 'mdi:battery',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.ryse_smartshade_ryse_shade_battery',
            'state': '100',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[ryse_smart_bridge_four_shades]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:4',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'RYSE Inc.',
        'model': 'RYSE Shade',
        'model_id': None,
        'name': 'BR Left',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '1.0.0',
        'suggested_area': None,
        'sw_version': '3.0.8',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.br_left_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'BR Left Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_4_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'BR Left Identify',
            }),
            'entity_id': 'button.br_left_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.br_left_ryse_shade',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'BR Left RYSE Shade',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_4_48',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 100,
              'friendly_name': 'BR Left RYSE Shade',
              'supported_features': <CoverEntityFeature: 7>,
            }),
            'entity_id': 'cover.br_left_ryse_shade',
            'state': 'open',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.br_left_ryse_shade_battery',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'BR Left RYSE Shade Battery',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_4_64',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'BR Left RYSE Shade Battery',
              'icon': 'mdi:battery',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.br_left_ryse_shade_battery',
            'state': '100',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:2',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'RYSE Inc.',
        'model': 'RYSE Shade',
        'model_id': None,
        'name': 'LR Left',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '1.0.0',
        'suggested_area': None,
        'sw_version': '3.0.8',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.lr_left_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'LR Left Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'LR Left Identify',
            }),
            'entity_id': 'button.lr_left_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.lr_left_ryse_shade',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'LR Left RYSE Shade',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_48',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 0,
              'friendly_name': 'LR Left RYSE Shade',
              'supported_features': <CoverEntityFeature: 7>,
            }),
            'entity_id': 'cover.lr_left_ryse_shade',
            'state': 'closed',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.lr_left_ryse_shade_battery',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'LR Left RYSE Shade Battery',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_64',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'LR Left RYSE Shade Battery',
              'icon': 'mdi:battery-90',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.lr_left_ryse_shade_battery',
            'state': '89',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:3',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'RYSE Inc.',
        'model': 'RYSE Shade',
        'model_id': None,
        'name': 'LR Right',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '1.0.0',
        'suggested_area': None,
        'sw_version': '3.0.8',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.lr_right_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'LR Right Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'LR Right Identify',
            }),
            'entity_id': 'button.lr_right_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.lr_right_ryse_shade',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'LR Right RYSE Shade',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_48',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 0,
              'friendly_name': 'LR Right RYSE Shade',
              'supported_features': <CoverEntityFeature: 7>,
            }),
            'entity_id': 'cover.lr_right_ryse_shade',
            'state': 'closed',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.lr_right_ryse_shade_battery',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'LR Right RYSE Shade Battery',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_64',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'LR Right RYSE Shade Battery',
              'icon': 'mdi:battery',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.lr_right_ryse_shade_battery',
            'state': '100',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '0401.3521.0679',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'RYSE Inc.',
        'model': 'RYSE SmartBridge',
        'model_id': None,
        'name': 'RYSE SmartBridge',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '0401.3521.0679',
        'suggested_area': None,
        'sw_version': '1.3.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.ryse_smartbridge_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'RYSE SmartBridge Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'RYSE SmartBridge Identify',
            }),
            'entity_id': 'button.ryse_smartbridge_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.0.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:5',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'RYSE Inc.',
        'model': 'RYSE Shade',
        'model_id': None,
        'name': 'RZSS',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '1.0.0',
        'suggested_area': None,
        'sw_version': '3.0.8',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.rzss_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'RZSS Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_5_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'RZSS Identify',
            }),
            'entity_id': 'button.rzss_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.rzss_ryse_shade',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'RZSS RYSE Shade',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_5_48',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 100,
              'friendly_name': 'RZSS RYSE Shade',
              'supported_features': <CoverEntityFeature: 7>,
            }),
            'entity_id': 'cover.rzss_ryse_shade',
            'state': 'open',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'sensor.rzss_ryse_shade_battery',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
            'original_icon': 'mdi:battery-unknown',
            'original_name': 'RZSS RYSE Shade Battery',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_5_64',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'battery',
              'friendly_name': 'RZSS RYSE Shade Battery',
              'icon': 'mdi:battery-alert',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.rzss_ryse_shade_battery',
            'state': '0',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[schlage_sense]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.3.0',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Schlage ',
        'model': 'BE479CAM619',
        'model_id': None,
        'name': 'SENSE  ',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'AAAAAAA000',
        'suggested_area': None,
        'sw_version': '004.027.000',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.sense_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'SENSE   Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_3',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'SENSE   Identify',
            }),
            'entity_id': 'button.sense_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'lock',
            'entity_category': None,
            'entity_id': 'lock.sense_lock_mechanism',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'SENSE   Lock Mechanism',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_30',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'SENSE   Lock Mechanism',
              'supported_features': <LockEntityFeature: 0>,
            }),
            'entity_id': 'lock.sense_lock_mechanism',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[simpleconnect_fan]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Hunter Fan',
        'model': 'SIMPLEconnect',
        'model_id': None,
        'name': 'SIMPLEconnect Fan-06F674',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '1234567890abcd',
        'suggested_area': None,
        'sw_version': '',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.simpleconnect_fan_06f674_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'SIMPLEconnect Fan-06F674 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'SIMPLEconnect Fan-06F674 Identify',
            }),
            'entity_id': 'button.simpleconnect_fan_06f674_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'preset_modes': None,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'fan',
            'entity_category': None,
            'entity_id': 'fan.simpleconnect_fan_06f674_hunter_fan',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'SIMPLEconnect Fan-06F674 Hunter Fan',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <FanEntityFeature: 53>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'direction': 'forward',
              'friendly_name': 'SIMPLEconnect Fan-06F674 Hunter Fan',
              'percentage': 0,
              'percentage_step': 25.0,
              'preset_mode': None,
              'preset_modes': None,
              'supported_features': <FanEntityFeature: 53>,
            }),
            'entity_id': 'fan.simpleconnect_fan_06f674_hunter_fan',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.simpleconnect_fan_06f674_hunter_light',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'SIMPLEconnect Fan-06F674 Hunter Light',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_29',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': 76.5,
              'color_mode': <ColorMode.BRIGHTNESS: 'brightness'>,
              'friendly_name': 'SIMPLEconnect Fan-06F674 Hunter Light',
              'supported_color_modes': list([
                <ColorMode.BRIGHTNESS: 'brightness'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
            }),
            'entity_id': 'light.simpleconnect_fan_06f674_hunter_light',
            'state': 'on',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[somfy_venetian_blinds]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'VELUX Internal Cover',
        'model_id': None,
        'name': 'VELUX Internal Cover',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '**REDACTED**',
        'suggested_area': None,
        'sw_version': '0.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_internal_cover_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX Internal Cover Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX Internal Cover Identify',
            }),
            'entity_id': 'button.velux_internal_cover_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.velux_internal_cover_venetian_blinds',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'VELUX Internal Cover Venetian Blinds',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 183>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 0,
              'current_tilt_position': 100,
              'friendly_name': 'VELUX Internal Cover Venetian Blinds',
              'supported_features': <CoverEntityFeature: 183>,
            }),
            'entity_id': 'cover.velux_internal_cover_venetian_blinds',
            'state': 'closed',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[velux_active_netatmo_co2]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'VELUX Sensor',
        'model_id': None,
        'name': 'VELUX Sensor',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '**REDACTED**',
        'suggested_area': None,
        'sw_version': '16.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_sensor_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX Sensor Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX Sensor Identify',
            }),
            'entity_id': 'button.velux_sensor_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.velux_sensor_carbon_dioxide_sensor',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.CO2: 'carbon_dioxide'>,
            'original_icon': None,
            'original_name': 'VELUX Sensor Carbon Dioxide sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_14',
            'unit_of_measurement': 'ppm',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'carbon_dioxide',
              'friendly_name': 'VELUX Sensor Carbon Dioxide sensor',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': 'ppm',
            }),
            'entity_id': 'sensor.velux_sensor_carbon_dioxide_sensor',
            'state': '1124.0',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.velux_sensor_humidity_sensor',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
            'original_icon': None,
            'original_name': 'VELUX Sensor Humidity sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_11',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'humidity',
              'friendly_name': 'VELUX Sensor Humidity sensor',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.velux_sensor_humidity_sensor',
            'state': '69.0',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.velux_sensor_temperature_sensor',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'VELUX Sensor Temperature sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_8',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'VELUX Sensor Temperature sensor',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.velux_sensor_temperature_sensor',
            'state': '23.9',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[velux_gateway]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'VELUX',
        'model': 'VELUX Gateway',
        'model_id': None,
        'name': 'VELUX Gateway',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'a1a11a1',
        'suggested_area': None,
        'sw_version': '70',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_gateway_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX Gateway Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX Gateway Identify',
            }),
            'entity_id': 'button.velux_gateway_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:2',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'VELUX',
        'model': 'VELUX Sensor',
        'model_id': None,
        'name': 'VELUX Sensor',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'a11b111',
        'suggested_area': None,
        'sw_version': '16',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_sensor_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX Sensor Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX Sensor Identify',
            }),
            'entity_id': 'button.velux_sensor_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.velux_sensor_carbon_dioxide_sensor',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.CO2: 'carbon_dioxide'>,
            'original_icon': None,
            'original_name': 'VELUX Sensor Carbon Dioxide sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_14',
            'unit_of_measurement': 'ppm',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'carbon_dioxide',
              'friendly_name': 'VELUX Sensor Carbon Dioxide sensor',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': 'ppm',
            }),
            'entity_id': 'sensor.velux_sensor_carbon_dioxide_sensor',
            'state': '400',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.velux_sensor_humidity_sensor',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
            'original_icon': None,
            'original_name': 'VELUX Sensor Humidity sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_11',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'humidity',
              'friendly_name': 'VELUX Sensor Humidity sensor',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.velux_sensor_humidity_sensor',
            'state': '58',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.velux_sensor_temperature_sensor',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'VELUX Sensor Temperature sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_8',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'VELUX Sensor Temperature sensor',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.velux_sensor_temperature_sensor',
            'state': '18.9',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:3',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'VELUX',
        'model': 'VELUX Window',
        'model_id': None,
        'name': 'VELUX Window',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '1111111a114a111a',
        'suggested_area': None,
        'sw_version': '48',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_window_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX Window Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX Window Identify',
            }),
            'entity_id': 'button.velux_window_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.velux_window_roof_window',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <CoverDeviceClass.WINDOW: 'window'>,
            'original_icon': None,
            'original_name': 'VELUX Window Roof Window',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 0,
              'device_class': 'window',
              'friendly_name': 'VELUX Window Roof Window',
              'supported_features': <CoverEntityFeature: 7>,
            }),
            'entity_id': 'cover.velux_window_roof_window',
            'state': 'closed',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[velux_somfy_venetian_blinds]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:5',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'VELUX External Cover',
        'model_id': None,
        'name': 'VELUX External Cover',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '**REDACTED**',
        'suggested_area': None,
        'sw_version': '15.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_external_cover_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX External Cover Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_5_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX External Cover Identify',
            }),
            'entity_id': 'button.velux_external_cover_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.velux_external_cover_awning_blinds',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'VELUX External Cover Awning Blinds',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_5_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 0,
              'friendly_name': 'VELUX External Cover Awning Blinds',
              'supported_features': <CoverEntityFeature: 7>,
            }),
            'entity_id': 'cover.velux_external_cover_awning_blinds',
            'state': 'closed',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:8',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'VELUX External Cover',
        'model_id': None,
        'name': 'VELUX External Cover',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '**REDACTED**',
        'suggested_area': None,
        'sw_version': '0.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_external_cover_identify_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX External Cover Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_8_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX External Cover Identify',
            }),
            'entity_id': 'button.velux_external_cover_identify_2',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.velux_external_cover_awning_blinds_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'VELUX External Cover Awning Blinds',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_8_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 45,
              'friendly_name': 'VELUX External Cover Awning Blinds',
              'supported_features': <CoverEntityFeature: 7>,
            }),
            'entity_id': 'cover.velux_external_cover_awning_blinds_2',
            'state': 'open',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:11',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'VELUX External Cover',
        'model_id': None,
        'name': 'VELUX External Cover',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '**REDACTED**',
        'suggested_area': None,
        'sw_version': '15.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_external_cover_identify_3',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX External Cover Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_11_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX External Cover Identify',
            }),
            'entity_id': 'button.velux_external_cover_identify_3',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.velux_external_cover_awning_blinds_3',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'VELUX External Cover Awning Blinds',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_11_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 0,
              'friendly_name': 'VELUX External Cover Awning Blinds',
              'supported_features': <CoverEntityFeature: 7>,
            }),
            'entity_id': 'cover.velux_external_cover_awning_blinds_3',
            'state': 'closed',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:12',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'VELUX External Cover',
        'model_id': None,
        'name': 'VELUX External Cover',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '**REDACTED**',
        'suggested_area': None,
        'sw_version': '15.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_external_cover_identify_4',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX External Cover Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_12_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX External Cover Identify',
            }),
            'entity_id': 'button.velux_external_cover_identify_4',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.velux_external_cover_awning_blinds_4',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'VELUX External Cover Awning Blinds',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_12_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 0,
              'friendly_name': 'VELUX External Cover Awning Blinds',
              'supported_features': <CoverEntityFeature: 7>,
            }),
            'entity_id': 'cover.velux_external_cover_awning_blinds_4',
            'state': 'closed',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'VELUX Gateway',
        'model_id': None,
        'name': 'VELUX Gateway',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '**REDACTED**',
        'suggested_area': None,
        'sw_version': '132.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_gateway_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX Gateway Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_6',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX Gateway Identify',
            }),
            'entity_id': 'button.velux_gateway_identify',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:9',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'VELUX Internal Cover',
        'model_id': None,
        'name': 'VELUX Internal Cover',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '**REDACTED**',
        'suggested_area': None,
        'sw_version': '0.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_internal_cover_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX Internal Cover Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_9_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX Internal Cover Identify',
            }),
            'entity_id': 'button.velux_internal_cover_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.velux_internal_cover_venetian_blinds',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'VELUX Internal Cover Venetian Blinds',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 183>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_9_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 0,
              'current_tilt_position': 100,
              'friendly_name': 'VELUX Internal Cover Venetian Blinds',
              'supported_features': <CoverEntityFeature: 183>,
            }),
            'entity_id': 'cover.velux_internal_cover_venetian_blinds',
            'state': 'closed',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:13',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'VELUX Internal Cover',
        'model_id': None,
        'name': 'VELUX Internal Cover',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '**REDACTED**',
        'suggested_area': None,
        'sw_version': '0.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_internal_cover_identify_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX Internal Cover Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_13_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX Internal Cover Identify',
            }),
            'entity_id': 'button.velux_internal_cover_identify_2',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.velux_internal_cover_venetian_blinds_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'VELUX Internal Cover Venetian Blinds',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 183>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_13_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 100,
              'current_tilt_position': 0,
              'friendly_name': 'VELUX Internal Cover Venetian Blinds',
              'supported_features': <CoverEntityFeature: 183>,
            }),
            'entity_id': 'cover.velux_internal_cover_venetian_blinds_2',
            'state': 'open',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:14',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'VELUX Internal Cover',
        'model_id': None,
        'name': 'VELUX Internal Cover',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '**REDACTED**',
        'suggested_area': None,
        'sw_version': '0.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_internal_cover_identify_3',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX Internal Cover Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_14_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX Internal Cover Identify',
            }),
            'entity_id': 'button.velux_internal_cover_identify_3',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.velux_internal_cover_venetian_blinds_3',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'VELUX Internal Cover Venetian Blinds',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 183>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_14_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 0,
              'current_tilt_position': 100,
              'friendly_name': 'VELUX Internal Cover Venetian Blinds',
              'supported_features': <CoverEntityFeature: 183>,
            }),
            'entity_id': 'cover.velux_internal_cover_venetian_blinds_3',
            'state': 'closed',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:15',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'VELUX Internal Cover',
        'model_id': None,
        'name': 'VELUX Internal Cover',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '**REDACTED**',
        'suggested_area': None,
        'sw_version': '0.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_internal_cover_identify_4',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX Internal Cover Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_15_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX Internal Cover Identify',
            }),
            'entity_id': 'button.velux_internal_cover_identify_4',
            'state': 'unknown',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:2',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'VELUX Sensor',
        'model_id': None,
        'name': 'VELUX Sensor',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '**REDACTED**',
        'suggested_area': None,
        'sw_version': '16.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_sensor_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX Sensor Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX Sensor Identify',
            }),
            'entity_id': 'button.velux_sensor_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.velux_sensor_carbon_dioxide_sensor',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.CO2: 'carbon_dioxide'>,
            'original_icon': None,
            'original_name': 'VELUX Sensor Carbon Dioxide sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_14',
            'unit_of_measurement': 'ppm',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'carbon_dioxide',
              'friendly_name': 'VELUX Sensor Carbon Dioxide sensor',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': 'ppm',
            }),
            'entity_id': 'sensor.velux_sensor_carbon_dioxide_sensor',
            'state': '1124.0',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.velux_sensor_humidity_sensor',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
            'original_icon': None,
            'original_name': 'VELUX Sensor Humidity sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_11',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'humidity',
              'friendly_name': 'VELUX Sensor Humidity sensor',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.velux_sensor_humidity_sensor',
            'state': '69.0',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.velux_sensor_temperature_sensor',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'VELUX Sensor Temperature sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_2_8',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'VELUX Sensor Temperature sensor',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.velux_sensor_temperature_sensor',
            'state': '23.9',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:3',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'VELUX Sensor',
        'model_id': None,
        'name': 'VELUX Sensor',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '**REDACTED**',
        'suggested_area': None,
        'sw_version': '16.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_sensor_identify_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX Sensor Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX Sensor Identify',
            }),
            'entity_id': 'button.velux_sensor_identify_2',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.velux_sensor_carbon_dioxide_sensor_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.CO2: 'carbon_dioxide'>,
            'original_icon': None,
            'original_name': 'VELUX Sensor Carbon Dioxide sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_14',
            'unit_of_measurement': 'ppm',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'carbon_dioxide',
              'friendly_name': 'VELUX Sensor Carbon Dioxide sensor',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': 'ppm',
            }),
            'entity_id': 'sensor.velux_sensor_carbon_dioxide_sensor_2',
            'state': '1074.0',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.velux_sensor_humidity_sensor_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
            'original_icon': None,
            'original_name': 'VELUX Sensor Humidity sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_11',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'humidity',
              'friendly_name': 'VELUX Sensor Humidity sensor',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.velux_sensor_humidity_sensor_2',
            'state': '64.0',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.velux_sensor_temperature_sensor_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
            'original_icon': None,
            'original_name': 'VELUX Sensor Temperature sensor',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_3_8',
            'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'temperature',
              'friendly_name': 'VELUX Sensor Temperature sensor',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
            }),
            'entity_id': 'sensor.velux_sensor_temperature_sensor_2',
            'state': '24.5',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:4',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'VELUX Window',
        'model_id': None,
        'name': 'VELUX Window',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '**REDACTED**',
        'suggested_area': None,
        'sw_version': '0.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_window_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX Window Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_4_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX Window Identify',
            }),
            'entity_id': 'button.velux_window_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.velux_window_roof_window',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <CoverDeviceClass.WINDOW: 'window'>,
            'original_icon': None,
            'original_name': 'VELUX Window Roof Window',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_4_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 0,
              'device_class': 'window',
              'friendly_name': 'VELUX Window Roof Window',
              'supported_features': <CoverEntityFeature: 7>,
            }),
            'entity_id': 'cover.velux_window_roof_window',
            'state': 'closed',
          }),
        }),
      ]),
    }),
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:7',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'VELUX Window',
        'model_id': None,
        'name': 'VELUX Window',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '**REDACTED**',
        'suggested_area': None,
        'sw_version': '0.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_window_identify_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX Window Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_7_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX Window Identify',
            }),
            'entity_id': 'button.velux_window_identify_2',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.velux_window_roof_window_2',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <CoverDeviceClass.WINDOW: 'window'>,
            'original_icon': None,
            'original_name': 'VELUX Window Roof Window',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_7_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 0,
              'device_class': 'window',
              'friendly_name': 'VELUX Window Roof Window',
              'supported_features': <CoverEntityFeature: 7>,
            }),
            'entity_id': 'cover.velux_window_roof_window_2',
            'state': 'closed',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[velux_window]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'VELUX Window',
        'model_id': None,
        'name': 'VELUX Window',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '**REDACTED**',
        'suggested_area': None,
        'sw_version': '0.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_window_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX Window Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX Window Identify',
            }),
            'entity_id': 'button.velux_window_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.velux_window_roof_window',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <CoverDeviceClass.WINDOW: 'window'>,
            'original_icon': None,
            'original_name': 'VELUX Window Roof Window',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 0,
              'device_class': 'window',
              'friendly_name': 'VELUX Window Roof Window',
              'supported_features': <CoverEntityFeature: 7>,
            }),
            'entity_id': 'cover.velux_window_roof_window',
            'state': 'closed',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[velux_window_cover]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'Netatmo',
        'model': 'VELUX External Cover',
        'model_id': None,
        'name': 'VELUX External Cover',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': '**REDACTED**',
        'suggested_area': None,
        'sw_version': '15.0.0',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.velux_external_cover_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VELUX External Cover Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_7',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VELUX External Cover Identify',
            }),
            'entity_id': 'button.velux_external_cover_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'cover',
            'entity_category': None,
            'entity_id': 'cover.velux_external_cover_awning_blinds',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'VELUX External Cover Awning Blinds',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <CoverEntityFeature: 7>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_8',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'current_position': 0,
              'friendly_name': 'VELUX External Cover Awning Blinds',
              'supported_features': <CoverEntityFeature: 7>,
            }),
            'entity_id': 'cover.velux_external_cover_awning_blinds',
            'state': 'closed',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[vocolinc_flowerbud]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '0.1',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'VOCOlinc',
        'model': 'Flowerbud',
        'model_id': None,
        'name': 'VOCOlinc-Flowerbud-0d324b',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'AM01121849000327',
        'suggested_area': None,
        'sw_version': '3.121.2',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.vocolinc_flowerbud_0d324b_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VOCOlinc-Flowerbud-0d324b Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VOCOlinc-Flowerbud-0d324b Identify',
            }),
            'entity_id': 'button.vocolinc_flowerbud_0d324b_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'available_modes': list([
                'normal',
                'auto',
              ]),
              'max_humidity': 100,
              'min_humidity': 0,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'humidifier',
            'entity_category': None,
            'entity_id': 'humidifier.vocolinc_flowerbud_0d324b',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <HumidifierDeviceClass.HUMIDIFIER: 'humidifier'>,
            'original_icon': None,
            'original_name': 'VOCOlinc-Flowerbud-0d324b',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': <HumidifierEntityFeature: 1>,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_30',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'available_modes': list([
                'normal',
                'auto',
              ]),
              'current_humidity': 45.0,
              'device_class': 'humidifier',
              'friendly_name': 'VOCOlinc-Flowerbud-0d324b',
              'humidity': 100.0,
              'max_humidity': 100,
              'min_humidity': 0,
              'mode': 'normal',
              'supported_features': <HumidifierEntityFeature: 1>,
            }),
            'entity_id': 'humidifier.vocolinc_flowerbud_0d324b',
            'state': 'off',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'max_color_temp_kelvin': 6535,
              'max_mireds': 500,
              'min_color_temp_kelvin': 2000,
              'min_mireds': 153,
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
                <ColorMode.HS: 'hs'>,
              ]),
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'light',
            'entity_category': None,
            'entity_id': 'light.vocolinc_flowerbud_0d324b_mood_light',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'VOCOlinc-Flowerbud-0d324b Mood Light',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_9',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'brightness': 127.5,
              'color_mode': <ColorMode.HS: 'hs'>,
              'color_temp': None,
              'color_temp_kelvin': None,
              'friendly_name': 'VOCOlinc-Flowerbud-0d324b Mood Light',
              'hs_color': tuple(
                120.0,
                100.0,
              ),
              'max_color_temp_kelvin': 6535,
              'max_mireds': 500,
              'min_color_temp_kelvin': 2000,
              'min_mireds': 153,
              'rgb_color': tuple(
                0,
                255,
                0,
              ),
              'supported_color_modes': list([
                <ColorMode.COLOR_TEMP: 'color_temp'>,
                <ColorMode.HS: 'hs'>,
              ]),
              'supported_features': <LightEntityFeature: 0>,
              'xy_color': tuple(
                0.172,
                0.747,
              ),
            }),
            'entity_id': 'light.vocolinc_flowerbud_0d324b_mood_light',
            'state': 'on',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'max': 5,
              'min': 1,
              'mode': <NumberMode.AUTO: 'auto'>,
              'step': 1,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'number',
            'entity_category': <EntityCategory.CONFIG: 'config'>,
            'entity_id': 'number.vocolinc_flowerbud_0d324b_spray_quantity',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'VOCOlinc-Flowerbud-0d324b Spray Quantity',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': 'spray_quantity',
            'unique_id': '00:00:00:00:00:00_1_30_38',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'VOCOlinc-Flowerbud-0d324b Spray Quantity',
              'max': 5,
              'min': 1,
              'mode': <NumberMode.AUTO: 'auto'>,
              'step': 1,
            }),
            'entity_id': 'number.vocolinc_flowerbud_0d324b_spray_quantity',
            'state': '5',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.vocolinc_flowerbud_0d324b_current_humidity',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
            'original_icon': None,
            'original_name': 'VOCOlinc-Flowerbud-0d324b Current Humidity',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_30_33',
            'unit_of_measurement': '%',
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'humidity',
              'friendly_name': 'VOCOlinc-Flowerbud-0d324b Current Humidity',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.vocolinc_flowerbud_0d324b_current_humidity',
            'state': '45.0',
          }),
        }),
      ]),
    }),
  ])
# ---
# name: test_snapshots[vocolinc_vp3]
  list([
    dict({
      'device': dict({
        'area_id': None,
        'config_entries': list([
          'TestData',
        ]),
        'configuration_url': None,
        'connections': list([
        ]),
        'disabled_by': None,
        'entry_type': None,
        'hw_version': '1.0.3',
        'identifiers': list([
          list([
            'homekit_controller:accessory-id',
            '00:00:00:00:00:00:aid:1',
          ]),
        ]),
        'is_new': False,
        'labels': list([
        ]),
        'manufacturer': 'VOCOlinc',
        'model': 'VP3',
        'model_id': None,
        'name': 'VOCOlinc-VP3-123456',
        'name_by_user': None,
        'primary_config_entry': 'TestData',
        'serial_number': 'EU0121203xxxxx07',
        'suggested_area': None,
        'sw_version': '1.101.2',
      }),
      'entities': list([
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'button',
            'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
            'entity_id': 'button.vocolinc_vp3_123456_identify',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <ButtonDeviceClass.IDENTIFY: 'identify'>,
            'original_icon': None,
            'original_name': 'VOCOlinc-VP3-123456 Identify',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_1_2',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'identify',
              'friendly_name': 'VOCOlinc-VP3-123456 Identify',
            }),
            'entity_id': 'button.vocolinc_vp3_123456_identify',
            'state': 'unknown',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': dict({
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
            }),
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'sensor',
            'entity_category': None,
            'entity_id': 'sensor.vocolinc_vp3_123456_power',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': <SensorDeviceClass.POWER: 'power'>,
            'original_icon': None,
            'original_name': 'VOCOlinc-VP3-123456 Power',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_48_97',
            'unit_of_measurement': <UnitOfPower.WATT: 'W'>,
          }),
          'state': dict({
            'attributes': dict({
              'device_class': 'power',
              'friendly_name': 'VOCOlinc-VP3-123456 Power',
              'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
              'unit_of_measurement': <UnitOfPower.WATT: 'W'>,
            }),
            'entity_id': 'sensor.vocolinc_vp3_123456_power',
            'state': '0',
          }),
        }),
        dict({
          'entry': dict({
            'aliases': list([
            ]),
            'area_id': None,
            'capabilities': None,
            'categories': dict({
            }),
            'config_entry_id': 'TestData',
            'device_class': None,
            'disabled_by': None,
            'domain': 'switch',
            'entity_category': None,
            'entity_id': 'switch.vocolinc_vp3_123456_outlet',
            'has_entity_name': False,
            'hidden_by': None,
            'icon': None,
            'labels': list([
            ]),
            'name': None,
            'options': dict({
            }),
            'original_device_class': None,
            'original_icon': None,
            'original_name': 'VOCOlinc-VP3-123456 Outlet',
            'platform': 'homekit_controller',
            'previous_unique_id': None,
            'supported_features': 0,
            'translation_key': None,
            'unique_id': '00:00:00:00:00:00_1_48',
            'unit_of_measurement': None,
          }),
          'state': dict({
            'attributes': dict({
              'friendly_name': 'VOCOlinc-VP3-123456 Outlet',
            }),
            'entity_id': 'switch.vocolinc_vp3_123456_outlet',
            'state': 'on',
          }),
        }),
      ]),
    }),
  ])
# ---
