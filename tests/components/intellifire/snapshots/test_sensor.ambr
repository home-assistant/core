# serializer version: 1
# name: test_all_sensor_entities[sensor.intellifire_connection_quality-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.intellifire_connection_quality',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Connection quality',
    'platform': 'intellifire',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'connection_quality',
    'unique_id': 'connection_quality_mock_serial',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_connection_quality-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by unpublished Intellifire API',
      'friendly_name': 'IntelliFire Connection quality',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.intellifire_connection_quality',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '988451',
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_downtime-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.intellifire_downtime',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Downtime',
    'platform': 'intellifire',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'downtime',
    'unique_id': 'downtime_mock_serial',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_downtime-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by unpublished Intellifire API',
      'device_class': 'timestamp',
      'friendly_name': 'IntelliFire Downtime',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.intellifire_downtime',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_ecm_latency-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.intellifire_ecm_latency',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'ECM latency',
    'platform': 'intellifire',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'ecm_latency',
    'unique_id': 'ecm_latency_mock_serial',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_ecm_latency-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by unpublished Intellifire API',
      'friendly_name': 'IntelliFire ECM latency',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.intellifire_ecm_latency',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_fan_speed-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.intellifire_fan_speed',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Fan Speed',
    'platform': 'intellifire',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'fan_speed',
    'unique_id': 'fan_speed_mock_serial',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_fan_speed-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by unpublished Intellifire API',
      'friendly_name': 'IntelliFire Fan Speed',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.intellifire_fan_speed',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1',
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_flame_height-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.intellifire_flame_height',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Flame height',
    'platform': 'intellifire',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'flame_height',
    'unique_id': 'flame_height_mock_serial',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_flame_height-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by unpublished Intellifire API',
      'friendly_name': 'IntelliFire Flame height',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.intellifire_flame_height',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_ip_address-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.intellifire_ip_address',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'IP address',
    'platform': 'intellifire',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'ipv4_address',
    'unique_id': 'ipv4_address_mock_serial',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_ip_address-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by unpublished Intellifire API',
      'friendly_name': 'IntelliFire IP address',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.intellifire_ip_address',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '192.168.2.108',
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_local_connectivity-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.intellifire_local_connectivity',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Local connectivity',
    'platform': 'intellifire',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'local_connectivity',
    'unique_id': 'local_connectivity_mock_serial',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_local_connectivity-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by unpublished Intellifire API',
      'friendly_name': 'IntelliFire Local connectivity',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.intellifire_local_connectivity',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'True',
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_none-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.intellifire_none',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': None,
    'platform': 'intellifire',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'local_connectivity',
    'unique_id': 'local_connectivity_mock_serial',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_none-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by unpublished Intellifire API',
      'friendly_name': 'IntelliFire None',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.intellifire_none',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'True',
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_target_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.intellifire_target_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Target temperature',
    'platform': 'intellifire',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'target_temp',
    'unique_id': 'target_temp_mock_serial',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_target_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by unpublished Intellifire API',
      'device_class': 'temperature',
      'friendly_name': 'IntelliFire Target temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.intellifire_target_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.intellifire_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature',
    'platform': 'intellifire',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'temperature_mock_serial',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by unpublished Intellifire API',
      'device_class': 'temperature',
      'friendly_name': 'IntelliFire Temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.intellifire_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '17',
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_timer_end-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.intellifire_timer_end',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Timer end',
    'platform': 'intellifire',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'timer_end_timestamp',
    'unique_id': 'timer_end_timestamp_mock_serial',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_timer_end-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by unpublished Intellifire API',
      'device_class': 'timestamp',
      'friendly_name': 'IntelliFire Timer end',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.intellifire_timer_end',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_uptime-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.intellifire_uptime',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Uptime',
    'platform': 'intellifire',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'uptime',
    'unique_id': 'uptime_mock_serial',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_sensor_entities[sensor.intellifire_uptime-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by unpublished Intellifire API',
      'device_class': 'timestamp',
      'friendly_name': 'IntelliFire Uptime',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.intellifire_uptime',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2021-01-01T11:58:03+00:00',
  })
# ---
