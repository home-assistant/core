# serializer version: 1
# name: test_async_get_config_entry_diagnostics__no_devices
  dict({
    'devices': list([
    ]),
    'vesync': dict({
      'Total Device Count': 0,
      'air_purifiers': 0,
      'bulb_count': 0,
      'fan_count': 0,
      'humidifers_count': 0,
      'outlets_count': 0,
      'switch_count': 0,
      'timezone': 'America/New_York',
    }),
  })
# ---
# name: test_async_get_config_entry_diagnostics__single_humidifier
  dict({
    'devices': list([
      dict({
        'assert_any_call': 'Method',
        'assert_called': 'Method',
        'assert_called_once': 'Method',
        'assert_called_once_with': 'Method',
        'assert_called_with': 'Method',
        'assert_has_calls': 'Method',
        'assert_not_called': 'Method',
        'attach_mock': 'Method',
        'automatic_stop_off': 'Method',
        'automatic_stop_on': 'Method',
        'call_args': None,
        'call_args_list': list([
        ]),
        'call_bypassv2_api': 'Method',
        'call_count': 0,
        'called': False,
        'cid': '200s-humidifier',
        'clear_timer': 'Method',
        'config': dict({
          'auto_target_humidity': 40,
          'automatic_stop': 'true',
          'display': 'true',
        }),
        'config_module': 'Method',
        'configure_mock': 'Method',
        'connection_status': 'online',
        'connection_type': 'Method',
        'current_firm_version': '1.0.0',
        'device_image': 'Method',
        'device_name': 'Humidifier 200s',
        'device_region': 'Method',
        'device_status': 'on',
        'device_type': 'Classic200S',
        'display': 'Method',
        'displayJSON': 'Method',
        'enabled': 'Method',
        'features': list([
          'night_light',
        ]),
        'firmware_update': 'Method',
        'get_details': 'Method',
        'get_state': 'Method',
        'get_timer': 'Method',
        'is_on': 'Method',
        'last_response': 'Method',
        'latest_firm_version': 'Method',
        'mac_id': 'Method',
        'manager': 'Method',
        'method_calls': list([
        ]),
        'mist_levels': list([
          1,
          2,
          3,
          4,
          5,
          6,
        ]),
        'mist_modes': list([
          'auto',
          'manual',
        ]),
        'mock_add_spec': 'Method',
        'mock_calls': list([
        ]),
        'pid': 'Method',
        'product_type': 'Method',
        'request_keys': 'Method',
        'reset_mock': 'Method',
        'return_value': 'Method',
        'set_auto_mode': 'Method',
        'set_automatic_stop': 'Method',
        'set_display': 'Method',
        'set_humidity': 'Method',
        'set_humidity_mode': 'Method',
        'set_manual_mode': 'Method',
        'set_mist_level': 'Method',
        'set_mode': 'Method',
        'set_nightlight_brightness': 'Method',
        'set_sleep_mode': 'Method',
        'set_state': 'Method',
        'set_timer': 'Method',
        'set_warm_level': 'Method',
        'side_effect': None,
        'state': 'Method',
        'sub_device_no': 0,
        'supports_drying_mode': 'Method',
        'supports_nightlight': 'Method',
        'supports_nightlight_brightness': 'Method',
        'supports_warm_mist': 'Method',
        'target_minmax': list([
          30,
          80,
        ]),
        'to_dict': 'Method',
        'to_json': 'Method',
        'to_jsonb': 'Method',
        'toggle_automatic_stop': 'Method',
        'toggle_display': 'Method',
        'toggle_drying_mode': 'Method',
        'toggle_switch': 'Method',
        'turn_off': 'Method',
        'turn_off_automatic_stop': 'Method',
        'turn_off_display': 'Method',
        'turn_on': 'Method',
        'turn_on_automatic_stop': 'Method',
        'turn_on_display': 'Method',
        'type': 'Method',
        'update': 'Method',
        'uuid': 'Method',
        'warm_mist_levels': 'Method',
      }),
    ]),
    'vesync': dict({
      'Total Device Count': 1,
      'air_purifiers': 0,
      'bulb_count': 0,
      'fan_count': 0,
      'humidifers_count': 1,
      'outlets_count': 0,
      'switch_count': 0,
      'timezone': 'America/New_York',
    }),
  })
# ---
# name: test_async_get_device_diagnostics__single_fan
  dict({
    'advanced_sleep_mode': 'Method',
    'assert_any_call': 'Method',
    'assert_called': 'Method',
    'assert_called_once': 'Method',
    'assert_called_once_with': 'Method',
    'assert_called_with': 'Method',
    'assert_has_calls': 'Method',
    'assert_not_called': 'Method',
    'attach_mock': 'Method',
    'call_args': None,
    'call_args_list': list([
    ]),
    'call_count': 0,
    'called': False,
    'cid': 'fan',
    'clear_timer': 'Method',
    'config_module': 'Method',
    'configure_mock': 'Method',
    'connection_status': 'online',
    'connection_type': 'Method',
    'current_firm_version': '1.0.0',
    'device_image': 'Method',
    'device_name': 'Test Fan',
    'device_region': 'Method',
    'device_status': 'on',
    'device_type': 'fan',
    'display': 'Method',
    'displayJSON': 'Method',
    'enabled': 'Method',
    'fan_levels': 'Method',
    'features': 'Method',
    'firmware_update': 'Method',
    'get_details': 'Method',
    'get_state': 'Method',
    'get_timer': 'Method',
    'home_assistant': dict({
      'disabled': False,
      'disabled_by': None,
      'entities': list([
        dict({
          'device_class': None,
          'disabled': False,
          'disabled_by': None,
          'domain': 'binary_sensor',
          'entity_category': None,
          'entity_id': 'binary_sensor.test_fan_low_water',
          'icon': None,
          'name': None,
          'original_device_class': 'problem',
          'original_icon': None,
          'original_name': 'Low water',
          'state': dict({
            'attributes': dict({
              'device_class': 'problem',
              'friendly_name': 'Test Fan Low water',
            }),
            'entity_id': 'binary_sensor.test_fan_low_water',
            'last_changed': str,
            'last_reported': str,
            'last_updated': str,
            'state': 'unavailable',
          }),
          'unit_of_measurement': None,
        }),
        dict({
          'device_class': None,
          'disabled': False,
          'disabled_by': None,
          'domain': 'binary_sensor',
          'entity_category': None,
          'entity_id': 'binary_sensor.test_fan_water_tank_lifted',
          'icon': None,
          'name': None,
          'original_device_class': 'problem',
          'original_icon': None,
          'original_name': 'Water tank lifted',
          'state': dict({
            'attributes': dict({
              'device_class': 'problem',
              'friendly_name': 'Test Fan Water tank lifted',
            }),
            'entity_id': 'binary_sensor.test_fan_water_tank_lifted',
            'last_changed': str,
            'last_reported': str,
            'last_updated': str,
            'state': 'unavailable',
          }),
          'unit_of_measurement': None,
        }),
        dict({
          'device_class': None,
          'disabled': False,
          'disabled_by': None,
          'domain': 'fan',
          'entity_category': None,
          'entity_id': 'fan.test_fan',
          'icon': None,
          'name': None,
          'original_device_class': None,
          'original_icon': None,
          'original_name': None,
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Test Fan',
              'preset_modes': list([
              ]),
              'supported_features': 57,
            }),
            'entity_id': 'fan.test_fan',
            'last_changed': str,
            'last_reported': str,
            'last_updated': str,
            'state': 'unavailable',
          }),
          'unit_of_measurement': None,
        }),
        dict({
          'device_class': None,
          'disabled': False,
          'disabled_by': None,
          'domain': 'sensor',
          'entity_category': None,
          'entity_id': 'sensor.test_fan_air_quality',
          'icon': None,
          'name': None,
          'original_device_class': None,
          'original_icon': None,
          'original_name': 'Air quality',
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Test Fan Air quality',
            }),
            'entity_id': 'sensor.test_fan_air_quality',
            'last_changed': str,
            'last_reported': str,
            'last_updated': str,
            'state': 'unavailable',
          }),
          'unit_of_measurement': None,
        }),
        dict({
          'device_class': None,
          'disabled': False,
          'disabled_by': None,
          'domain': 'sensor',
          'entity_category': 'diagnostic',
          'entity_id': 'sensor.test_fan_filter_lifetime',
          'icon': None,
          'name': None,
          'original_device_class': None,
          'original_icon': None,
          'original_name': 'Filter lifetime',
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Test Fan Filter lifetime',
              'state_class': 'measurement',
              'unit_of_measurement': '%',
            }),
            'entity_id': 'sensor.test_fan_filter_lifetime',
            'last_changed': str,
            'last_reported': str,
            'last_updated': str,
            'state': 'unavailable',
          }),
          'unit_of_measurement': '%',
        }),
        dict({
          'device_class': None,
          'disabled': False,
          'disabled_by': None,
          'domain': 'sensor',
          'entity_category': None,
          'entity_id': 'sensor.test_fan_pm2_5',
          'icon': None,
          'name': None,
          'original_device_class': 'pm25',
          'original_icon': None,
          'original_name': 'PM2.5',
          'state': dict({
            'attributes': dict({
              'device_class': 'pm25',
              'friendly_name': 'Test Fan PM2.5',
              'state_class': 'measurement',
              'unit_of_measurement': 'μg/m³',
            }),
            'entity_id': 'sensor.test_fan_pm2_5',
            'last_changed': str,
            'last_reported': str,
            'last_updated': str,
            'state': 'unavailable',
          }),
          'unit_of_measurement': 'μg/m³',
        }),
        dict({
          'device_class': None,
          'disabled': False,
          'disabled_by': None,
          'domain': 'switch',
          'entity_category': None,
          'entity_id': 'switch.test_fan_display',
          'icon': None,
          'name': None,
          'original_device_class': None,
          'original_icon': None,
          'original_name': 'Display',
          'state': dict({
            'attributes': dict({
              'friendly_name': 'Test Fan Display',
            }),
            'entity_id': 'switch.test_fan_display',
            'last_changed': str,
            'last_reported': str,
            'last_updated': str,
            'state': 'unavailable',
          }),
          'unit_of_measurement': None,
        }),
      ]),
      'name': 'Test Fan',
      'name_by_user': None,
    }),
    'is_on': 'Method',
    'last_response': 'Method',
    'latest_firm_version': 'Method',
    'mac_id': 'Method',
    'manager': 'Method',
    'manual_mode': 'Method',
    'method_calls': list([
    ]),
    'mock_add_spec': 'Method',
    'mock_calls': list([
    ]),
    'mode_toggle': 'Method',
    'modes': list([
    ]),
    'normal_mode': 'Method',
    'pid': 'Method',
    'product_type': 'Method',
    'request_keys': 'Method',
    'reset_mock': 'Method',
    'return_value': 'Method',
    'set_advanced_sleep_mode': 'Method',
    'set_auto_mode': 'Method',
    'set_fan_speed': 'Method',
    'set_manual_mode': 'Method',
    'set_mode': 'Method',
    'set_normal_mode': 'Method',
    'set_sleep_mode': 'Method',
    'set_state': 'Method',
    'set_timer': 'Method',
    'set_turbo_mode': 'Method',
    'side_effect': None,
    'sleep_mode': 'Method',
    'sleep_preferences': 'Method',
    'state': 'Method',
    'sub_device_no': 'Method',
    'supports_displaying_type': 'Method',
    'supports_mute': 'Method',
    'supports_oscillation': 'Method',
    'to_dict': 'Method',
    'to_json': 'Method',
    'to_jsonb': 'Method',
    'toggle_display': 'Method',
    'toggle_displaying_type': 'Method',
    'toggle_mute': 'Method',
    'toggle_oscillation': 'Method',
    'toggle_switch': 'Method',
    'turn_off': 'Method',
    'turn_off_display': 'Method',
    'turn_off_mute': 'Method',
    'turn_off_oscillation': 'Method',
    'turn_on': 'Method',
    'turn_on_display': 'Method',
    'turn_on_mute': 'Method',
    'turn_on_oscillation': 'Method',
    'type': 'Method',
    'update': 'Method',
    'uuid': 'Method',
  })
# ---
