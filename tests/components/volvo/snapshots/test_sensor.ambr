# serializer version: 1
# name: test_sensor[keys0]
  tuple(
    '58.0',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 30, 8, tzinfo=datetime.timezone.utc),
      'device_class': 'battery',
      'friendly_name': 'Volvo XC40 Battery charge level',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'yv1abcdefg1234567_battery_charge_level',
  )
# ---
# name: test_sensor[keys0].1
  tuple(
    'available',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 32, 26, 169000, tzinfo=datetime.timezone.utc),
      'device_class': 'enum',
      'friendly_name': 'Volvo XC40 Car connection',
      'options': list([
        'available',
        'car_in_use',
        'no_internet',
        'power_saving_mode',
        'unspecified',
      ]),
    }),
    'yv1abcdefg1234567_availability',
  )
# ---
# name: test_sensor[keys0].10
  tuple(
    '53',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 18, 56, 849000, tzinfo=datetime.timezone.utc),
      'device_class': 'speed',
      'friendly_name': 'Volvo XC40 TM avg. speed',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'yv1abcdefg1234567_average_speed',
  )
# ---
# name: test_sensor[keys0].11
  tuple(
    '3822.9',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 18, 56, 849000, tzinfo=datetime.timezone.utc),
      'device_class': 'distance',
      'friendly_name': 'Volvo XC40 TM distance',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'yv1abcdefg1234567_trip_meter_manual',
  )
# ---
# name: test_sensor[keys0].2
  tuple(
    'connection_status_connected_ac',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 30, 8, tzinfo=datetime.timezone.utc),
      'device_class': 'enum',
      'friendly_name': 'Volvo XC40 Charging connection status',
      'options': list([
        'connection_status_connected_ac',
        'connection_status_connected_dc',
        'connection_status_disconnected',
        'connection_status_fault',
        'connection_status_unspecified',
      ]),
    }),
    'yv1abcdefg1234567_charging_connection_status',
  )
# ---
# name: test_sensor[keys0].3
  tuple(
    '250',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 30, 8, 338000, tzinfo=datetime.timezone.utc),
      'device_class': 'distance',
      'friendly_name': 'Volvo XC40 Distance to empty battery',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'yv1abcdefg1234567_distance_to_empty_battery',
  )
# ---
# name: test_sensor[keys0].4
  tuple(
    '29000',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 18, 56, 849000, tzinfo=datetime.timezone.utc),
      'device_class': 'distance',
      'friendly_name': 'Volvo XC40 Distance to service',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'yv1abcdefg1234567_distance_to_service',
  )
# ---
# name: test_sensor[keys0].5
  tuple(
    '1266',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 18, 56, 849000, tzinfo=datetime.timezone.utc),
      'friendly_name': 'Volvo XC40 Engine time to service',
      'unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
    }),
    'yv1abcdefg1234567_engine_time_to_service',
  )
# ---
# name: test_sensor[keys0].6
  tuple(
    '780',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 30, 8, tzinfo=datetime.timezone.utc),
      'device_class': 'duration',
      'friendly_name': 'Volvo XC40 Est. charging time',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'yv1abcdefg1234567_estimated_charging_time',
  )
# ---
# name: test_sensor[keys0].7
  tuple(
    '30000',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 18, 56, 849000, tzinfo=datetime.timezone.utc),
      'device_class': 'distance',
      'friendly_name': 'Volvo XC40 Odometer',
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'yv1abcdefg1234567_odometer',
  )
# ---
# name: test_sensor[keys0].8
  tuple(
    '2027-04-04',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 18, 56, 849000, tzinfo=datetime.timezone.utc),
      'device_class': 'date',
      'friendly_name': 'Volvo XC40 Time to service',
    }),
    'yv1abcdefg1234567_time_to_service',
  )
# ---
# name: test_sensor[keys0].9
  tuple(
    '22.6',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 53, 44, 785000, tzinfo=datetime.timezone.utc),
      'friendly_name': 'Volvo XC40 TM avg. energy consumption',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergyDistance.KILO_WATT_HOUR_PER_100_KM: 'kWh/100km'>,
    }),
    'yv1abcdefg1234567_average_energy_consumption',
  )
# ---
# name: test_sensor[keys1]
  tuple(
    'available',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 32, 26, 169000, tzinfo=datetime.timezone.utc),
      'device_class': 'enum',
      'friendly_name': 'Volvo S90 Car connection',
      'options': list([
        'available',
        'car_in_use',
        'no_internet',
        'power_saving_mode',
        'unspecified',
      ]),
    }),
    'yv1abcdefg1234567_availability',
  )
# ---
# name: test_sensor[keys1].1
  tuple(
    '147',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 30, 8, 338000, tzinfo=datetime.timezone.utc),
      'device_class': 'distance',
      'friendly_name': 'Volvo S90 Distance to empty tank',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'yv1abcdefg1234567_distance_to_empty_tank',
  )
# ---
# name: test_sensor[keys1].2
  tuple(
    '29000',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 18, 56, 849000, tzinfo=datetime.timezone.utc),
      'device_class': 'distance',
      'friendly_name': 'Volvo S90 Distance to service',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'yv1abcdefg1234567_distance_to_service',
  )
# ---
# name: test_sensor[keys1].3
  tuple(
    '1266',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 18, 56, 849000, tzinfo=datetime.timezone.utc),
      'friendly_name': 'Volvo S90 Engine time to service',
      'unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
    }),
    'yv1abcdefg1234567_engine_time_to_service',
  )
# ---
# name: test_sensor[keys1].4
  tuple(
    '47.3',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2020, 11, 19, 21, 23, 24, 123000, tzinfo=datetime.timezone.utc),
      'device_class': 'volume_storage',
      'friendly_name': 'Volvo S90 Fuel amount',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
    }),
    'yv1abcdefg1234567_fuel_amount',
  )
# ---
# name: test_sensor[keys1].5
  tuple(
    '30000',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 18, 56, 849000, tzinfo=datetime.timezone.utc),
      'device_class': 'distance',
      'friendly_name': 'Volvo S90 Odometer',
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'yv1abcdefg1234567_odometer',
  )
# ---
# name: test_sensor[keys1].6
  tuple(
    '2025-05-31',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 18, 56, 849000, tzinfo=datetime.timezone.utc),
      'device_class': 'date',
      'friendly_name': 'Volvo S90 Time to service',
    }),
    'yv1abcdefg1234567_time_to_service',
  )
# ---
# name: test_sensor[keys1].7
  tuple(
    '7.23',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 53, 44, 785000, tzinfo=datetime.timezone.utc),
      'friendly_name': 'Volvo S90 TM avg. fuel consumption',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'l/100 km',
    }),
    'yv1abcdefg1234567_average_fuel_consumption',
  )
# ---
# name: test_sensor[keys1].8
  tuple(
    '53',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 18, 56, 849000, tzinfo=datetime.timezone.utc),
      'device_class': 'speed',
      'friendly_name': 'Volvo S90 TM avg. speed',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'yv1abcdefg1234567_average_speed',
  )
# ---
# name: test_sensor[keys1].9
  tuple(
    '3822.9',
    ReadOnlyDict({
      'api_timestamp': datetime.datetime(2024, 12, 30, 14, 18, 56, 849000, tzinfo=datetime.timezone.utc),
      'device_class': 'distance',
      'friendly_name': 'Volvo S90 TM distance',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'yv1abcdefg1234567_trip_meter_manual',
  )
# ---
