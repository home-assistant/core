# serializer version: 1
# name: test_device_diagnostics
  dict({
    'entities': list([
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'binary_sensor',
        'entity_category': None,
        'entity_id': 'binary_sensor.multisensor_6_any',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Any',
        'primary_value': dict({
          'command_class': 48,
          'command_class_name': 'Binary Sensor',
          'endpoint': 0,
          'property': 'Any',
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Any',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-48-0-Any',
      }),
      dict({
        'disabled': False,
        'disabled_by': None,
        'domain': 'binary_sensor',
        'entity_category': 'diagnostic',
        'entity_id': 'binary_sensor.multisensor_6_low_battery_level',
        'hidden_by': None,
        'original_device_class': 'battery',
        'original_icon': None,
        'original_name': 'Low battery level',
        'primary_value': dict({
          'command_class': 128,
          'command_class_name': 'Battery',
          'endpoint': 0,
          'property': 'isLow',
          'property_key': None,
          'property_key_name': None,
          'property_name': 'isLow',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-128-0-isLow',
      }),
      dict({
        'disabled': False,
        'disabled_by': None,
        'domain': 'binary_sensor',
        'entity_category': None,
        'entity_id': 'binary_sensor.multisensor_6_motion_detection',
        'hidden_by': None,
        'original_device_class': 'motion',
        'original_icon': None,
        'original_name': 'Motion detection',
        'primary_value': dict({
          'command_class': 113,
          'command_class_name': 'Notification',
          'endpoint': 0,
          'property': 'Home Security',
          'property_key': 'Motion sensor status',
          'property_key_name': 'Motion sensor status',
          'property_name': 'Home Security',
          'state_key': 8,
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-113-0-Home Security-Motion sensor status',
      }),
      dict({
        'disabled': False,
        'disabled_by': None,
        'domain': 'binary_sensor',
        'entity_category': 'diagnostic',
        'entity_id': 'binary_sensor.multisensor_6_tampering_product_cover_removed',
        'hidden_by': None,
        'original_device_class': 'tamper',
        'original_icon': None,
        'original_name': 'Tampering, product cover removed',
        'primary_value': dict({
          'command_class': 113,
          'command_class_name': 'Notification',
          'endpoint': 0,
          'property': 'Home Security',
          'property_key': 'Cover status',
          'property_key_name': 'Cover status',
          'property_name': 'Home Security',
          'state_key': 3,
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-113-0-Home Security-Cover status',
      }),
      dict({
        'disabled': False,
        'disabled_by': None,
        'domain': 'button',
        'entity_category': 'config',
        'entity_id': 'button.multisensor_6_idle_home_security_cover_status',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Idle Home Security Cover status',
        'primary_value': dict({
          'command_class': 113,
          'command_class_name': 'Notification',
          'endpoint': 0,
          'property': 'Home Security',
          'property_key': 'Cover status',
          'property_key_name': 'Cover status',
          'property_name': 'Home Security',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-113-0-Home Security-Cover status',
      }),
      dict({
        'disabled': False,
        'disabled_by': None,
        'domain': 'button',
        'entity_category': 'config',
        'entity_id': 'button.multisensor_6_idle_home_security_motion_sensor_status',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Idle Home Security Motion sensor status',
        'primary_value': dict({
          'command_class': 113,
          'command_class_name': 'Notification',
          'endpoint': 0,
          'property': 'Home Security',
          'property_key': 'Motion sensor status',
          'property_key_name': 'Motion sensor status',
          'property_name': 'Home Security',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-113-0-Home Security-Motion sensor status',
      }),
      dict({
        'disabled': False,
        'disabled_by': None,
        'domain': 'light',
        'entity_category': None,
        'entity_id': 'light.multisensor_6_basic',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Basic',
        'primary_value': dict({
          'command_class': 32,
          'command_class_name': 'Basic',
          'endpoint': 0,
          'property': 'currentValue',
          'property_key': None,
          'property_key_name': None,
          'property_name': 'currentValue',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-32-0-currentValue',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_battery_threshold',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Battery Threshold',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 44,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Battery Threshold',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-44',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_default_unit_of_the_automatic_temperature_report',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Default unit of the automatic temperature report',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 64,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Default unit of the automatic temperature report',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-64',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_group_1_report_interval',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Group 1 Report Interval',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 111,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Group 1 Report Interval',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-111',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_group_2_report_interval',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Group 2 Report Interval',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 112,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Group 2 Report Interval',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-112',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_group_3_report_interval',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Group 3 Report Interval',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 113,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Group 3 Report Interval',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-113',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_humidity_sensor_calibration',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Humidity Sensor Calibration',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 202,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Humidity Sensor Calibration',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-202',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_humidity_threshold',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Humidity Threshold',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 42,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Humidity Threshold',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-42',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_low_battery_report',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Low Battery Report',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 39,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Low Battery Report',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-39',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_lower_limit_value_of_humidity_sensor',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Lower limit value of humidity sensor',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 52,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Lower limit value of humidity sensor',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-52',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_lower_limit_value_of_lighting_sensor',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Lower limit value of Lighting sensor',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 54,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Lower limit value of Lighting sensor',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-54',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_lower_limit_value_of_ultraviolet_sensor',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Lower limit value of ultraviolet sensor',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 56,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Lower limit value of ultraviolet sensor',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-56',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_lower_temperature_limit',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Lower temperature limit',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 50,
          'property_key': 4294901760,
          'property_key_name': None,
          'property_name': 'Lower temperature limit',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-50-4294901760',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_luminance_sensor_calibration',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Luminance Sensor Calibration',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 203,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Luminance Sensor Calibration',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-203',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_luminance_threshold',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Luminance Threshold',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 43,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Luminance Threshold',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-43',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_motion_sensor_reset_timeout',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Motion Sensor reset timeout',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 3,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Motion Sensor reset timeout',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-3',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_recover_limit_value_of_humidity_sensor',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Recover limit value of humidity sensor',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 58,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Recover limit value of humidity sensor',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-58',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_recover_limit_value_of_lighting_sensor',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Recover limit value of Lighting sensor.',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 59,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Recover limit value of Lighting sensor.',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-59',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_recover_limit_value_of_temperature_sensor',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Recover limit value of temperature sensor',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 57,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Recover limit value of temperature sensor',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-57',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_recover_limit_value_of_ultraviolet_sensor',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Recover limit value of Ultraviolet sensor',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 60,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Recover limit value of Ultraviolet sensor',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-60',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_send_a_report_if_the_measurement_is_out_of_limits',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Send a report if the measurement is out of limits',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 48,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Send a report if the measurement is out of limits',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-48',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_temperature_calibration',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Temperature Calibration',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 201,
          'property_key': 65280,
          'property_key_name': None,
          'property_name': 'Temperature Calibration',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-201-65280',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_temperature_threshold',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Temperature Threshold',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 41,
          'property_key': 16776960,
          'property_key_name': None,
          'property_name': 'Temperature Threshold',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-41-16776960',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_timeout_after_wake_up',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Timeout after wake up',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 8,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Timeout after wake up',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-8',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_ultraviolet_sensor_calibration',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Ultraviolet Sensor Calibration',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 204,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Ultraviolet Sensor Calibration',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-204',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_ultraviolet_threshold',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Ultraviolet Threshold',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 45,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Ultraviolet Threshold',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-45',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_upper_limit_value_of_humidity_sensor',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Upper limit value of humidity sensor',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 51,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Upper limit value of humidity sensor',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-51',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_upper_limit_value_of_lighting_sensor',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Upper limit value of Lighting sensor',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 53,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Upper limit value of Lighting sensor',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-53',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_upper_limit_value_of_ultraviolet_sensor',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Upper limit value of ultraviolet sensor',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 55,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Upper limit value of ultraviolet sensor',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-55',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'number',
        'entity_category': 'config',
        'entity_id': 'number.multisensor_6_upper_temperature_limit',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Upper temperature limit',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 49,
          'property_key': 4294901760,
          'property_key_name': None,
          'property_name': 'Upper temperature limit',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-49-4294901760',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'select',
        'entity_category': 'config',
        'entity_id': 'select.multisensor_6_disable_enable_configuration_lock',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Disable/Enable Configuration Lock',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 252,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Disable/Enable Configuration Lock',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-252',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'select',
        'entity_category': 'config',
        'entity_id': 'select.multisensor_6_led_function',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'LED function',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 81,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'LED function',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-81',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'select',
        'entity_category': 'config',
        'entity_id': 'select.multisensor_6_motion_sensor_sensitivity',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Motion sensor sensitivity',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 4,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Motion sensor sensitivity',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-4',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'select',
        'entity_category': 'config',
        'entity_id': 'select.multisensor_6_motion_sensor_triggered_command',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Motion Sensor Triggered Command',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 5,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Motion Sensor Triggered Command',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-5',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'select',
        'entity_category': 'config',
        'entity_id': 'select.multisensor_6_selective_reporting',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Selective Reporting',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 40,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Selective Reporting',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-40',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'select',
        'entity_category': 'config',
        'entity_id': 'select.multisensor_6_send_alarm_report_if_low_temperature',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Send Alarm Report if low temperature',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 46,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Send Alarm Report if low temperature',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-46',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'select',
        'entity_category': 'config',
        'entity_id': 'select.multisensor_6_stay_awake_in_battery_mode',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Stay Awake in Battery Mode',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 2,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Stay Awake in Battery Mode',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-2',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'select',
        'entity_category': 'config',
        'entity_id': 'select.multisensor_6_temperature_calibration_unit',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Temperature Calibration (Unit)',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 201,
          'property_key': 255,
          'property_key_name': None,
          'property_name': 'Temperature Calibration (Unit)',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-201-255',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'select',
        'entity_category': 'config',
        'entity_id': 'select.multisensor_6_temperature_threshold_unit',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Temperature Threshold (Unit)',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 41,
          'property_key': 15,
          'property_key_name': None,
          'property_name': 'Temperature Threshold (Unit)',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-41-15',
      }),
      dict({
        'disabled': False,
        'disabled_by': None,
        'domain': 'sensor',
        'entity_category': None,
        'entity_id': 'sensor.multisensor_6_air_temperature',
        'hidden_by': None,
        'original_device_class': 'temperature',
        'original_icon': None,
        'original_name': 'Air temperature',
        'primary_value': dict({
          'command_class': 49,
          'command_class_name': 'Multilevel Sensor',
          'endpoint': 0,
          'property': 'Air temperature',
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Air temperature',
        }),
        'supported_features': 0,
        'unit_of_measurement': '°C',
        'value_id': '52-49-0-Air temperature',
      }),
      dict({
        'disabled': False,
        'disabled_by': None,
        'domain': 'sensor',
        'entity_category': 'diagnostic',
        'entity_id': 'sensor.multisensor_6_battery_level',
        'hidden_by': None,
        'original_device_class': 'battery',
        'original_icon': None,
        'original_name': 'Battery level',
        'primary_value': dict({
          'command_class': 128,
          'command_class_name': 'Battery',
          'endpoint': 0,
          'property': 'level',
          'property_key': None,
          'property_key_name': None,
          'property_name': 'level',
        }),
        'supported_features': 0,
        'unit_of_measurement': '%',
        'value_id': '52-128-0-level',
      }),
      dict({
        'disabled': False,
        'disabled_by': None,
        'domain': 'sensor',
        'entity_category': None,
        'entity_id': 'sensor.multisensor_6_humidity',
        'hidden_by': None,
        'original_device_class': 'humidity',
        'original_icon': None,
        'original_name': 'Humidity',
        'primary_value': dict({
          'command_class': 49,
          'command_class_name': 'Multilevel Sensor',
          'endpoint': 0,
          'property': 'Humidity',
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Humidity',
        }),
        'supported_features': 0,
        'unit_of_measurement': '%',
        'value_id': '52-49-0-Humidity',
      }),
      dict({
        'disabled': False,
        'disabled_by': None,
        'domain': 'sensor',
        'entity_category': None,
        'entity_id': 'sensor.multisensor_6_illuminance',
        'hidden_by': None,
        'original_device_class': 'illuminance',
        'original_icon': None,
        'original_name': 'Illuminance',
        'primary_value': dict({
          'command_class': 49,
          'command_class_name': 'Multilevel Sensor',
          'endpoint': 0,
          'property': 'Illuminance',
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Illuminance',
        }),
        'supported_features': 0,
        'unit_of_measurement': 'lx',
        'value_id': '52-49-0-Illuminance',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'sensor',
        'entity_category': 'diagnostic',
        'entity_id': 'sensor.multisensor_6_out_of_limit_state_of_the_sensors',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Out-of-limit state of the Sensors',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 61,
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Out-of-limit state of the Sensors',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-61',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'sensor',
        'entity_category': 'diagnostic',
        'entity_id': 'sensor.multisensor_6_power_mode',
        'hidden_by': None,
        'original_device_class': 'enum',
        'original_icon': None,
        'original_name': 'Power Mode',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 9,
          'property_key': 256,
          'property_key_name': None,
          'property_name': 'Power Mode',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-9-256',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'sensor',
        'entity_category': 'diagnostic',
        'entity_id': 'sensor.multisensor_6_sleep_state',
        'hidden_by': None,
        'original_device_class': 'enum',
        'original_icon': None,
        'original_name': 'Sleep State',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 9,
          'property_key': 1,
          'property_key_name': None,
          'property_name': 'Sleep State',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-9-1',
      }),
      dict({
        'disabled': False,
        'disabled_by': None,
        'domain': 'sensor',
        'entity_category': None,
        'entity_id': 'sensor.multisensor_6_ultraviolet',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Ultraviolet',
        'primary_value': dict({
          'command_class': 49,
          'command_class_name': 'Multilevel Sensor',
          'endpoint': 0,
          'property': 'Ultraviolet',
          'property_key': None,
          'property_key_name': None,
          'property_name': 'Ultraviolet',
        }),
        'supported_features': 0,
        'unit_of_measurement': 'UV index',
        'value_id': '52-49-0-Ultraviolet',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'switch',
        'entity_category': 'config',
        'entity_id': 'switch.multisensor_6_group_1_send_battery_reports',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Group 1: Send battery reports',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 101,
          'property_key': 1,
          'property_key_name': None,
          'property_name': 'Group 1: Send battery reports',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-101-1',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'switch',
        'entity_category': 'config',
        'entity_id': 'switch.multisensor_6_group_1_send_humidity_reports',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Group 1: Send humidity reports',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 101,
          'property_key': 64,
          'property_key_name': None,
          'property_name': 'Group 1: Send humidity reports',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-101-64',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'switch',
        'entity_category': 'config',
        'entity_id': 'switch.multisensor_6_group_1_send_luminance_reports',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Group 1: Send luminance reports',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 101,
          'property_key': 128,
          'property_key_name': None,
          'property_name': 'Group 1: Send luminance reports',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-101-128',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'switch',
        'entity_category': 'config',
        'entity_id': 'switch.multisensor_6_group_1_send_temperature_reports',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Group 1: Send temperature reports',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 101,
          'property_key': 32,
          'property_key_name': None,
          'property_name': 'Group 1: Send temperature reports',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-101-32',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'switch',
        'entity_category': 'config',
        'entity_id': 'switch.multisensor_6_group_1_send_ultraviolet_reports',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Group 1: Send ultraviolet reports',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 101,
          'property_key': 16,
          'property_key_name': None,
          'property_name': 'Group 1: Send ultraviolet reports',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-101-16',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'switch',
        'entity_category': 'config',
        'entity_id': 'switch.multisensor_6_group_2_send_battery_reports',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Group 2: Send battery reports',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 102,
          'property_key': 1,
          'property_key_name': None,
          'property_name': 'Group 2: Send battery reports',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-102-1',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'switch',
        'entity_category': 'config',
        'entity_id': 'switch.multisensor_6_group_2_send_humidity_reports',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Group 2: Send humidity reports',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 102,
          'property_key': 64,
          'property_key_name': None,
          'property_name': 'Group 2: Send humidity reports',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-102-64',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'switch',
        'entity_category': 'config',
        'entity_id': 'switch.multisensor_6_group_2_send_luminance_reports',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Group 2: Send luminance reports',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 102,
          'property_key': 128,
          'property_key_name': None,
          'property_name': 'Group 2: Send luminance reports',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-102-128',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'switch',
        'entity_category': 'config',
        'entity_id': 'switch.multisensor_6_group_2_send_temperature_reports',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Group 2: Send temperature reports',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 102,
          'property_key': 32,
          'property_key_name': None,
          'property_name': 'Group 2: Send temperature reports',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-102-32',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'switch',
        'entity_category': 'config',
        'entity_id': 'switch.multisensor_6_group_2_send_ultraviolet_reports',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Group 2: Send ultraviolet reports',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 102,
          'property_key': 16,
          'property_key_name': None,
          'property_name': 'Group 2: Send ultraviolet reports',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-102-16',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'switch',
        'entity_category': 'config',
        'entity_id': 'switch.multisensor_6_group_3_send_battery_reports',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Group 3: Send battery reports',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 103,
          'property_key': 1,
          'property_key_name': None,
          'property_name': 'Group 3: Send battery reports',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-103-1',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'switch',
        'entity_category': 'config',
        'entity_id': 'switch.multisensor_6_group_3_send_humidity_reports',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Group 3: Send humidity reports',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 103,
          'property_key': 64,
          'property_key_name': None,
          'property_name': 'Group 3: Send humidity reports',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-103-64',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'switch',
        'entity_category': 'config',
        'entity_id': 'switch.multisensor_6_group_3_send_luminance_reports',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Group 3: Send luminance reports',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 103,
          'property_key': 128,
          'property_key_name': None,
          'property_name': 'Group 3: Send luminance reports',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-103-128',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'switch',
        'entity_category': 'config',
        'entity_id': 'switch.multisensor_6_group_3_send_temperature_reports',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Group 3: Send temperature reports',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 103,
          'property_key': 32,
          'property_key_name': None,
          'property_name': 'Group 3: Send temperature reports',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-103-32',
      }),
      dict({
        'disabled': True,
        'disabled_by': 'integration',
        'domain': 'switch',
        'entity_category': 'config',
        'entity_id': 'switch.multisensor_6_group_3_send_ultraviolet_reports',
        'hidden_by': None,
        'original_device_class': None,
        'original_icon': None,
        'original_name': 'Group 3: Send ultraviolet reports',
        'primary_value': dict({
          'command_class': 112,
          'command_class_name': 'Configuration',
          'endpoint': 0,
          'property': 103,
          'property_key': 16,
          'property_key_name': None,
          'property_name': 'Group 3: Send ultraviolet reports',
        }),
        'supported_features': 0,
        'unit_of_measurement': None,
        'value_id': '52-112-0-103-16',
      }),
    ]),
    'state': dict({
      'deviceClass': dict({
        'basic': dict({
          'key': 2,
          'label': 'Static Controller',
        }),
        'generic': dict({
          'key': 21,
          'label': 'Multilevel Sensor',
        }),
        'mandatoryControlledCCs': list([
        ]),
        'mandatorySupportedCCs': list([
        ]),
        'specific': dict({
          'key': 1,
          'label': 'Routing Multilevel Sensor',
        }),
      }),
      'deviceConfig': dict({
        'description': 'Multisensor 6',
        'devices': list([
          dict({
            'productId': '0x0064',
            'productType': '0x0002',
          }),
          dict({
            'productId': '0x0064',
            'productType': '0x0102',
          }),
          dict({
            'productId': '0x0064',
            'productType': '0x0202',
          }),
        ]),
        'firmwareVersion': dict({
          'max': '255.255',
          'min': '1.10',
        }),
        'label': 'ZW100',
        'manufacturer': 'AEON Labs',
        'manufacturerId': 134,
        'paramInformation': dict({
          '_map': dict({
          }),
        }),
      }),
      'endpoints': dict({
        '0': dict({
          'commandClasses': list([
            dict({
              'id': 113,
              'isSecure': False,
              'name': 'Notification',
              'version': 8,
            }),
          ]),
          'index': 0,
          'installerIcon': 3079,
          'nodeId': 52,
          'userIcon': 3079,
        }),
      }),
      'firmwareVersion': '1.12',
      'highestSecurityClass': 7,
      'index': 0,
      'installerIcon': 3079,
      'interviewAttempts': 1,
      'isBeaming': True,
      'isControllerNode': False,
      'isFrequentListening': False,
      'isListening': True,
      'isRouting': True,
      'isSecure': False,
      'label': 'ZW100',
      'manufacturerId': 134,
      'maxBaudRate': 40000,
      'neighbors': list([
        1,
        32,
      ]),
      'nodeId': 52,
      'nodeType': 0,
      'productId': 100,
      'productType': 258,
      'ready': True,
      'roleType': 5,
      'status': 1,
      'userIcon': 3079,
      'values': dict({
        '52-112-0-100': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 0,
            'description': 'Reset 101-103 to defaults',
            'format': 0,
            'isFromConfig': True,
            'label': 'Set parameters 101-103 to default.',
            'max': 1,
            'min': 0,
            'readable': False,
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 100,
          'propertyName': 'Set parameters 101-103 to default.',
        }),
        '52-112-0-101-1': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 1,
            'description': 'Include battery information in periodic reports to Group 1',
            'format': 0,
            'isFromConfig': True,
            'label': 'Group 1: Send battery reports',
            'max': 1,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 101,
          'propertyKey': 1,
          'propertyName': 'Group 1: Send battery reports',
          'value': 1,
        }),
        '52-112-0-101-128': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 1,
            'description': 'Include luminance information in periodic reports to Group 1',
            'format': 0,
            'isFromConfig': True,
            'label': 'Group 1: Send luminance reports',
            'max': 1,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 101,
          'propertyKey': 128,
          'propertyName': 'Group 1: Send luminance reports',
          'value': 1,
        }),
        '52-112-0-101-16': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 1,
            'description': 'Include ultraviolet information in periodic reports to Group 1',
            'format': 0,
            'isFromConfig': True,
            'label': 'Group 1: Send ultraviolet reports',
            'max': 1,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 101,
          'propertyKey': 16,
          'propertyName': 'Group 1: Send ultraviolet reports',
          'value': 1,
        }),
        '52-112-0-101-32': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 1,
            'description': 'Include temperature information in periodic reports to Group 1',
            'format': 0,
            'isFromConfig': True,
            'label': 'Group 1: Send temperature reports',
            'max': 1,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 101,
          'propertyKey': 32,
          'propertyName': 'Group 1: Send temperature reports',
          'value': 1,
        }),
        '52-112-0-101-64': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 1,
            'description': 'Include humidity information in periodic reports to Group 1',
            'format': 0,
            'isFromConfig': True,
            'label': 'Group 1: Send humidity reports',
            'max': 1,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 101,
          'propertyKey': 64,
          'propertyName': 'Group 1: Send humidity reports',
          'value': 1,
        }),
        '52-112-0-102-1': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 1,
            'description': 'Include battery information in periodic reports to Group 2',
            'format': 0,
            'isFromConfig': True,
            'label': 'Group 2: Send battery reports',
            'max': 1,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 102,
          'propertyKey': 1,
          'propertyName': 'Group 2: Send battery reports',
          'value': 0,
        }),
        '52-112-0-102-128': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 1,
            'description': 'Include luminance information in periodic reports to Group 2',
            'format': 0,
            'isFromConfig': True,
            'label': 'Group 2: Send luminance reports',
            'max': 1,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 102,
          'propertyKey': 128,
          'propertyName': 'Group 2: Send luminance reports',
          'value': 0,
        }),
        '52-112-0-102-16': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 1,
            'description': 'Include ultraviolet information in periodic reports to Group 2',
            'format': 0,
            'isFromConfig': True,
            'label': 'Group 2: Send ultraviolet reports',
            'max': 1,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 102,
          'propertyKey': 16,
          'propertyName': 'Group 2: Send ultraviolet reports',
          'value': 0,
        }),
        '52-112-0-102-32': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 1,
            'description': 'Include temperature information in periodic reports to Group 2',
            'format': 0,
            'isFromConfig': True,
            'label': 'Group 2: Send temperature reports',
            'max': 1,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 102,
          'propertyKey': 32,
          'propertyName': 'Group 2: Send temperature reports',
          'value': 0,
        }),
        '52-112-0-102-64': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 1,
            'description': 'Include humidity information in periodic reports to Group 2',
            'format': 0,
            'isFromConfig': True,
            'label': 'Group 2: Send humidity reports',
            'max': 1,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 102,
          'propertyKey': 64,
          'propertyName': 'Group 2: Send humidity reports',
          'value': 0,
        }),
        '52-112-0-103-1': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 1,
            'description': 'Include battery information in periodic reports to Group 3',
            'format': 0,
            'isFromConfig': True,
            'label': 'Group 3: Send battery reports',
            'max': 1,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 103,
          'propertyKey': 1,
          'propertyName': 'Group 3: Send battery reports',
          'value': 0,
        }),
        '52-112-0-103-128': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 1,
            'description': 'Include luminance information in periodic reports to Group 3',
            'format': 0,
            'isFromConfig': True,
            'label': 'Group 3: Send luminance reports',
            'max': 1,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 103,
          'propertyKey': 128,
          'propertyName': 'Group 3: Send luminance reports',
          'value': 0,
        }),
        '52-112-0-103-16': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 1,
            'description': 'Include ultraviolet information in periodic reports to Group 3',
            'format': 0,
            'isFromConfig': True,
            'label': 'Group 3: Send ultraviolet reports',
            'max': 1,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 103,
          'propertyKey': 16,
          'propertyName': 'Group 3: Send ultraviolet reports',
          'value': 0,
        }),
        '52-112-0-103-32': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 1,
            'description': 'Include temperature information in periodic reports to Group 3',
            'format': 0,
            'isFromConfig': True,
            'label': 'Group 3: Send temperature reports',
            'max': 1,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 103,
          'propertyKey': 32,
          'propertyName': 'Group 3: Send temperature reports',
          'value': 0,
        }),
        '52-112-0-103-64': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 1,
            'description': 'Include humidity information in periodic reports to Group 3',
            'format': 0,
            'isFromConfig': True,
            'label': 'Group 3: Send humidity reports',
            'max': 1,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 103,
          'propertyKey': 64,
          'propertyName': 'Group 3: Send humidity reports',
          'value': 0,
        }),
        '52-112-0-110': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 0,
            'description': 'Set parameters 111-113 to default.',
            'format': 0,
            'isFromConfig': True,
            'label': 'Set parameters 111-113 to default.',
            'max': 1,
            'min': 0,
            'readable': False,
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 110,
          'propertyName': 'Set parameters 111-113 to default.',
        }),
        '52-112-0-111': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 3600,
            'description': 'How often to update Group 1',
            'format': 0,
            'isFromConfig': True,
            'label': 'Group 1 Report Interval',
            'max': 2678400,
            'min': 5,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 111,
          'propertyName': 'Group 1 Report Interval',
          'value': 3600,
        }),
        '52-112-0-112': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 3600,
            'description': 'Group 2 Report Interval',
            'format': 0,
            'isFromConfig': True,
            'label': 'Group 2 Report Interval',
            'max': 2678400,
            'min': 5,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 112,
          'propertyName': 'Group 2 Report Interval',
          'value': 3600,
        }),
        '52-112-0-113': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 3600,
            'description': 'Group 3 Report Interval',
            'format': 0,
            'isFromConfig': True,
            'label': 'Group 3 Report Interval',
            'max': 2678400,
            'min': 5,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 113,
          'propertyName': 'Group 3 Report Interval',
          'value': 3600,
        }),
        '52-112-0-2': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': False,
            'default': 0,
            'description': 'Stay awake for 10 minutes at power on',
            'format': 0,
            'isFromConfig': True,
            'label': 'Stay Awake in Battery Mode',
            'max': 1,
            'min': 0,
            'readable': True,
            'states': dict({
              '0': 'Disable',
              '1': 'Enable',
            }),
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 2,
          'propertyName': 'Stay Awake in Battery Mode',
          'value': 0,
        }),
        '52-112-0-201-255': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': False,
            'default': 1,
            'format': 0,
            'isFromConfig': True,
            'label': 'Temperature Calibration (Unit)',
            'max': 2,
            'min': 1,
            'readable': True,
            'states': dict({
              '1': 'Celsius',
              '2': 'Fahrenheit',
            }),
            'type': 'number',
            'valueSize': 2,
            'writeable': True,
          }),
          'property': 201,
          'propertyKey': 255,
          'propertyName': 'Temperature Calibration (Unit)',
          'value': 2,
        }),
        '52-112-0-201-65280': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 0,
            'format': 0,
            'isFromConfig': True,
            'label': 'Temperature Calibration',
            'max': 127,
            'min': -127,
            'readable': True,
            'type': 'number',
            'valueSize': 2,
            'writeable': True,
          }),
          'property': 201,
          'propertyKey': 65280,
          'propertyName': 'Temperature Calibration',
          'value': 0,
        }),
        '52-112-0-202': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 0,
            'description': 'Humidity Sensor Calibration',
            'format': 0,
            'isFromConfig': True,
            'label': 'Humidity Sensor Calibration',
            'max': 50,
            'min': -50,
            'readable': True,
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 202,
          'propertyName': 'Humidity Sensor Calibration',
          'value': 0,
        }),
        '52-112-0-203': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 0,
            'description': 'Luminance Sensor Calibration',
            'format': 0,
            'isFromConfig': True,
            'label': 'Luminance Sensor Calibration',
            'max': 1000,
            'min': -1000,
            'readable': True,
            'type': 'number',
            'valueSize': 2,
            'writeable': True,
          }),
          'property': 203,
          'propertyName': 'Luminance Sensor Calibration',
          'value': 0,
        }),
        '52-112-0-204': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 0,
            'description': 'Ultraviolet Sensor Calibration',
            'format': 0,
            'isFromConfig': True,
            'label': 'Ultraviolet Sensor Calibration',
            'max': 10,
            'min': -10,
            'readable': True,
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 204,
          'propertyName': 'Ultraviolet Sensor Calibration',
          'value': 0,
        }),
        '52-112-0-252': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': False,
            'default': 0,
            'description': 'Disable/Enable Configuration Lock (0=Disable, 1=Enable)',
            'format': 0,
            'isFromConfig': True,
            'label': 'Disable/Enable Configuration Lock',
            'max': 1,
            'min': 0,
            'readable': True,
            'states': dict({
              '0': 'Disable',
              '1': 'Enable',
            }),
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 252,
          'propertyName': 'Disable/Enable Configuration Lock',
          'value': 0,
        }),
        '52-112-0-255': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': False,
            'default': 0,
            'format': 0,
            'isFromConfig': True,
            'label': 'Reset to default factory settings',
            'max': 1431655765,
            'min': 0,
            'readable': False,
            'states': dict({
              '1': 'Resets all configuration parameters to defaults',
              '1431655765': 'Reset to default factory settings and be excluded',
            }),
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 255,
          'propertyName': 'Reset to default factory settings',
        }),
        '52-112-0-3': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 240,
            'description': 'Motion Sensor reset timeout',
            'format': 0,
            'isFromConfig': True,
            'label': 'Motion Sensor reset timeout',
            'max': 3600,
            'min': 10,
            'readable': True,
            'type': 'number',
            'valueSize': 2,
            'writeable': True,
          }),
          'property': 3,
          'propertyName': 'Motion Sensor reset timeout',
          'value': 240,
        }),
        '52-112-0-39': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 20,
            'description': 'Report Low Battery if below this value',
            'format': 0,
            'isFromConfig': True,
            'label': 'Low Battery Report',
            'max': 50,
            'min': 10,
            'readable': True,
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 39,
          'propertyName': 'Low Battery Report',
          'value': 20,
        }),
        '52-112-0-4': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': False,
            'default': 5,
            'description': 'Sensitivity level of PIR sensor (1=minimum, 5=maximum)',
            'format': 1,
            'isFromConfig': True,
            'label': 'Motion sensor sensitivity',
            'max': 255,
            'min': 0,
            'readable': True,
            'states': dict({
              '0': 'Disable',
              '1': 'Enable, sensitivity level 1 (minimum)',
              '2': 'Enable, sensitivity level 2',
              '3': 'Enable, sensitivity level 3',
              '4': 'Enable, sensitivity level 4',
              '5': 'Enable, sensitivity level 5 (maximum)',
            }),
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 4,
          'propertyName': 'Motion sensor sensitivity',
          'value': 5,
        }),
        '52-112-0-40': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': False,
            'default': 0,
            'description': 'Select to report on thresholds',
            'format': 0,
            'isFromConfig': True,
            'label': 'Selective Reporting',
            'max': 1,
            'min': 0,
            'readable': True,
            'states': dict({
              '0': 'Disable',
              '1': 'Enable',
            }),
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 40,
          'propertyName': 'Selective Reporting',
          'value': 0,
        }),
        '52-112-0-41-15': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': False,
            'default': 1,
            'format': 0,
            'isFromConfig': True,
            'label': 'Temperature Threshold (Unit)',
            'max': 2,
            'min': 1,
            'readable': True,
            'states': dict({
              '1': 'Celsius',
              '2': 'Fahrenheit',
            }),
            'type': 'number',
            'valueSize': 3,
            'writeable': True,
          }),
          'property': 41,
          'propertyKey': 15,
          'propertyName': 'Temperature Threshold (Unit)',
          'value': 0,
        }),
        '52-112-0-41-16776960': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 20,
            'description': 'Threshold change in temperature to induce an automatic report.',
            'format': 0,
            'isFromConfig': True,
            'label': 'Temperature Threshold',
            'max': 100,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 3,
            'writeable': True,
          }),
          'property': 41,
          'propertyKey': 16776960,
          'propertyName': 'Temperature Threshold',
          'value': 5122,
        }),
        '52-112-0-42': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 10,
            'description': 'Humidity percent change threshold',
            'format': 0,
            'isFromConfig': True,
            'label': 'Humidity Threshold',
            'max': 100,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 42,
          'propertyName': 'Humidity Threshold',
          'value': 10,
        }),
        '52-112-0-43': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 100,
            'description': 'Luminance change threshold',
            'format': 0,
            'isFromConfig': True,
            'label': 'Luminance Threshold',
            'max': 1000,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 2,
            'writeable': True,
          }),
          'property': 43,
          'propertyName': 'Luminance Threshold',
          'value': 100,
        }),
        '52-112-0-44': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 10,
            'description': 'Battery level threshold',
            'format': 0,
            'isFromConfig': True,
            'label': 'Battery Threshold',
            'max': 100,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 44,
          'propertyName': 'Battery Threshold',
          'value': 10,
        }),
        '52-112-0-45': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 2,
            'description': 'Ultraviolet change threshold',
            'format': 0,
            'isFromConfig': True,
            'label': 'Ultraviolet Threshold',
            'max': 100,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 45,
          'propertyName': 'Ultraviolet Threshold',
          'value': 2,
        }),
        '52-112-0-46': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': False,
            'default': 0,
            'description': 'Send an alarm report if temperature is less than -15 °C',
            'format': 1,
            'isFromConfig': True,
            'label': 'Send Alarm Report if low temperature',
            'max': 255,
            'min': 0,
            'readable': True,
            'states': dict({
              '0': 'Disable',
              '1': 'Enable',
            }),
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 46,
          'propertyName': 'Send Alarm Report if low temperature',
          'value': 0,
        }),
        '52-112-0-48': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 0,
            'description': 'Send report when measurement is at upper/lower limit',
            'format': 1,
            'isFromConfig': True,
            'label': 'Send a report if the measurement is out of limits',
            'max': 255,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 48,
          'propertyName': 'Send a report if the measurement is out of limits',
          'value': 0,
        }),
        '52-112-0-49-4294901760': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 280,
            'format': 0,
            'isFromConfig': True,
            'label': 'Upper temperature limit',
            'max': 2120,
            'min': -400,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 49,
          'propertyKey': 4294901760,
          'propertyName': 'Upper temperature limit',
          'value': 824,
        }),
        '52-112-0-49-65280': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': False,
            'default': 1,
            'format': 0,
            'isFromConfig': True,
            'label': 'Upper temperature limit (Unit)',
            'max': 2,
            'min': 1,
            'readable': False,
            'states': dict({
              '1': 'Celsius',
              '2': 'Fahrenheit',
            }),
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 49,
          'propertyKey': 65280,
          'propertyName': 'Upper temperature limit (Unit)',
          'value': 2,
        }),
        '52-112-0-5': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': False,
            'default': 1,
            'format': 1,
            'isFromConfig': True,
            'label': 'Motion Sensor Triggered Command',
            'max': 255,
            'min': 0,
            'readable': True,
            'states': dict({
              '1': 'Send Basic Set CC',
              '2': 'Send Sensor Binary Report CC',
            }),
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 5,
          'propertyName': 'Motion Sensor Triggered Command',
          'value': 1,
        }),
        '52-112-0-50-4294901760': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 0,
            'format': 0,
            'isFromConfig': True,
            'label': 'Lower temperature limit',
            'max': 2120,
            'min': -400,
            'readable': True,
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 50,
          'propertyKey': 4294901760,
          'propertyName': 'Lower temperature limit',
          'value': 320,
        }),
        '52-112-0-50-65280': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': False,
            'default': 1,
            'format': 0,
            'isFromConfig': True,
            'label': 'Lower temperature limit (Unit)',
            'max': 2,
            'min': 1,
            'readable': False,
            'states': dict({
              '1': 'Celsius',
              '2': 'Fahrenheit',
            }),
            'type': 'number',
            'valueSize': 4,
            'writeable': True,
          }),
          'property': 50,
          'propertyKey': 65280,
          'propertyName': 'Lower temperature limit (Unit)',
          'value': 2,
        }),
        '52-112-0-51': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 60,
            'description': 'Upper limit value of humidity sensor',
            'format': 0,
            'isFromConfig': True,
            'label': 'Upper limit value of humidity sensor',
            'max': 100,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 51,
          'propertyName': 'Upper limit value of humidity sensor',
          'value': 60,
        }),
        '52-112-0-52': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 50,
            'description': 'Lower limit value of humidity sensor',
            'format': 0,
            'isFromConfig': True,
            'label': 'Lower limit value of humidity sensor',
            'max': 100,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 52,
          'propertyName': 'Lower limit value of humidity sensor',
          'value': 50,
        }),
        '52-112-0-53': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 1000,
            'description': 'Upper limit value of Lighting sensor',
            'format': 0,
            'isFromConfig': True,
            'label': 'Upper limit value of Lighting sensor',
            'max': 30000,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 2,
            'writeable': True,
          }),
          'property': 53,
          'propertyName': 'Upper limit value of Lighting sensor',
          'value': 1000,
        }),
        '52-112-0-54': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 100,
            'description': 'Lower limit value of Lighting sensor',
            'format': 0,
            'isFromConfig': True,
            'label': 'Lower limit value of Lighting sensor',
            'max': 30000,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 2,
            'writeable': True,
          }),
          'property': 54,
          'propertyName': 'Lower limit value of Lighting sensor',
          'value': 100,
        }),
        '52-112-0-55': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 8,
            'description': 'Upper limit value of ultraviolet sensor',
            'format': 0,
            'isFromConfig': True,
            'label': 'Upper limit value of ultraviolet sensor',
            'max': 11,
            'min': 1,
            'readable': True,
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 55,
          'propertyName': 'Upper limit value of ultraviolet sensor',
          'value': 8,
        }),
        '52-112-0-56': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 4,
            'description': 'Lower limit value of ultraviolet sensor',
            'format': 0,
            'isFromConfig': True,
            'label': 'Lower limit value of ultraviolet sensor',
            'max': 11,
            'min': 1,
            'readable': True,
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 56,
          'propertyName': 'Lower limit value of ultraviolet sensor',
          'value': 4,
        }),
        '52-112-0-57': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 0,
            'description': 'Recover limit value of temperature sensor',
            'format': 1,
            'isFromConfig': True,
            'label': 'Recover limit value of temperature sensor',
            'max': 65535,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 2,
            'writeable': True,
          }),
          'property': 57,
          'propertyName': 'Recover limit value of temperature sensor',
          'value': 5122,
        }),
        '52-112-0-58': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 5,
            'description': 'Recover limit value of humidity sensor',
            'format': 0,
            'isFromConfig': True,
            'label': 'Recover limit value of humidity sensor',
            'max': 50,
            'min': 1,
            'readable': True,
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 58,
          'propertyName': 'Recover limit value of humidity sensor',
          'value': 5,
        }),
        '52-112-0-59': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 10,
            'description': 'Recover limit value of Lighting sensor.',
            'format': 1,
            'isFromConfig': True,
            'label': 'Recover limit value of Lighting sensor.',
            'max': 255,
            'min': 1,
            'readable': True,
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 59,
          'propertyName': 'Recover limit value of Lighting sensor.',
          'value': 10,
        }),
        '52-112-0-60': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 2,
            'description': 'Recover limit value of Ultraviolet sensor',
            'format': 0,
            'isFromConfig': True,
            'label': 'Recover limit value of Ultraviolet sensor',
            'max': 5,
            'min': 1,
            'readable': True,
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 60,
          'propertyName': 'Recover limit value of Ultraviolet sensor',
          'value': 2,
        }),
        '52-112-0-61': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 0,
            'description': 'Out-of-limit state of the Sensors',
            'format': 1,
            'isFromConfig': True,
            'label': 'Out-of-limit state of the Sensors',
            'max': 255,
            'min': 0,
            'readable': True,
            'type': 'number',
            'valueSize': 1,
            'writeable': False,
          }),
          'property': 61,
          'propertyName': 'Out-of-limit state of the Sensors',
          'value': 0,
        }),
        '52-112-0-64': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 1,
            'description': 'Default unit of the automatic temperature report',
            'format': 0,
            'isFromConfig': True,
            'label': 'Default unit of the automatic temperature report',
            'max': 2,
            'min': 1,
            'readable': True,
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 64,
          'propertyName': 'Default unit of the automatic temperature report',
          'value': 2,
        }),
        '52-112-0-8': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': True,
            'default': 30,
            'description': 'Set the timeout of awake after the Wake Up CC is sent out...',
            'format': 1,
            'isFromConfig': True,
            'label': 'Timeout after wake up',
            'max': 255,
            'min': 8,
            'readable': True,
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 8,
          'propertyName': 'Timeout after wake up',
          'value': 15,
        }),
        '52-112-0-81': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': False,
            'default': 0,
            'description': 'Disable/Enable LED function',
            'format': 0,
            'isFromConfig': True,
            'label': 'LED function',
            'max': 2,
            'min': 0,
            'readable': True,
            'states': dict({
              '0': 'Enable LED blinking',
              '1': 'Disable PIR LED',
              '2': 'Disable ALL',
            }),
            'type': 'number',
            'valueSize': 1,
            'writeable': True,
          }),
          'property': 81,
          'propertyName': 'LED function',
          'value': 0,
        }),
        '52-112-0-9-1': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': False,
            'default': 0,
            'format': 0,
            'isFromConfig': True,
            'label': 'Sleep State',
            'max': 1,
            'min': 0,
            'readable': True,
            'states': dict({
              '0': 'Asleep',
              '1': 'Awake',
            }),
            'type': 'number',
            'valueSize': 2,
            'writeable': False,
          }),
          'property': 9,
          'propertyKey': 1,
          'propertyName': 'Sleep State',
          'value': 0,
        }),
        '52-112-0-9-256': dict({
          'commandClass': 112,
          'commandClassName': 'Configuration',
          'endpoint': 0,
          'metadata': dict({
            'allowManualEntry': False,
            'default': 0,
            'format': 0,
            'isFromConfig': True,
            'label': 'Power Mode',
            'max': 1,
            'min': 0,
            'readable': True,
            'states': dict({
              '0': 'USB',
              '1': 'Battery',
            }),
            'type': 'number',
            'valueSize': 2,
            'writeable': False,
          }),
          'property': 9,
          'propertyKey': 256,
          'propertyName': 'Power Mode',
          'value': 0,
        }),
        '52-113-0-Home Security-Cover status': dict({
          'commandClass': 113,
          'commandClassName': 'Notification',
          'endpoint': 0,
          'metadata': dict({
            'ccSpecific': dict({
              'notificationType': 7,
            }),
            'label': 'Cover status',
            'max': 255,
            'min': 0,
            'readable': True,
            'states': dict({
              '0': 'idle',
              '3': 'Tampering, product cover removed',
            }),
            'type': 'number',
            'writeable': False,
          }),
          'property': 'Home Security',
          'propertyKey': 'Cover status',
          'propertyKeyName': 'Cover status',
          'propertyName': 'Home Security',
          'value': 0,
        }),
        '52-113-0-Home Security-Motion sensor status': dict({
          'commandClass': 113,
          'commandClassName': 'Notification',
          'endpoint': 0,
          'metadata': dict({
            'ccSpecific': dict({
              'notificationType': 7,
            }),
            'label': 'Motion sensor status',
            'max': 255,
            'min': 0,
            'readable': True,
            'states': dict({
              '0': 'idle',
              '8': 'Motion detection',
            }),
            'type': 'number',
            'writeable': False,
          }),
          'property': 'Home Security',
          'propertyKey': 'Motion sensor status',
          'propertyKeyName': 'Motion sensor status',
          'propertyName': 'Home Security',
          'value': 8,
        }),
        '52-114-0-manufacturerId': dict({
          'commandClass': 114,
          'commandClassName': 'Manufacturer Specific',
          'endpoint': 0,
          'metadata': dict({
            'label': 'Manufacturer ID',
            'max': 65535,
            'min': 0,
            'readable': True,
            'type': 'number',
            'writeable': False,
          }),
          'property': 'manufacturerId',
          'propertyName': 'manufacturerId',
          'value': 134,
        }),
        '52-114-0-productId': dict({
          'commandClass': 114,
          'commandClassName': 'Manufacturer Specific',
          'endpoint': 0,
          'metadata': dict({
            'label': 'Product ID',
            'max': 65535,
            'min': 0,
            'readable': True,
            'type': 'number',
            'writeable': False,
          }),
          'property': 'productId',
          'propertyName': 'productId',
          'value': 100,
        }),
        '52-114-0-productType': dict({
          'commandClass': 114,
          'commandClassName': 'Manufacturer Specific',
          'endpoint': 0,
          'metadata': dict({
            'label': 'Product type',
            'max': 65535,
            'min': 0,
            'readable': True,
            'type': 'number',
            'writeable': False,
          }),
          'property': 'productType',
          'propertyName': 'productType',
          'value': 258,
        }),
        '52-128-0-isLow': dict({
          'commandClass': 128,
          'commandClassName': 'Battery',
          'endpoint': 0,
          'metadata': dict({
            'label': 'Low battery level',
            'readable': True,
            'type': 'boolean',
            'writeable': False,
          }),
          'property': 'isLow',
          'propertyName': 'isLow',
          'value': False,
        }),
        '52-128-0-level': dict({
          'commandClass': 128,
          'commandClassName': 'Battery',
          'endpoint': 0,
          'metadata': dict({
            'label': 'Battery level',
            'max': 100,
            'min': 0,
            'readable': True,
            'type': 'number',
            'unit': '%',
            'writeable': False,
          }),
          'property': 'level',
          'propertyName': 'level',
          'value': 100,
        }),
        '52-132-0-controllerNodeId': dict({
          'commandClass': 132,
          'commandClassName': 'Wake Up',
          'endpoint': 0,
          'metadata': dict({
            'label': 'Node ID of the controller',
            'readable': True,
            'type': 'any',
            'writeable': False,
          }),
          'property': 'controllerNodeId',
          'propertyName': 'controllerNodeId',
          'value': 1,
        }),
        '52-132-0-wakeUpInterval': dict({
          'commandClass': 132,
          'commandClassName': 'Wake Up',
          'endpoint': 0,
          'metadata': dict({
            'default': 3600,
            'label': 'Wake Up interval',
            'max': 3600,
            'min': 240,
            'readable': False,
            'steps': 60,
            'type': 'number',
            'writeable': True,
          }),
          'property': 'wakeUpInterval',
          'propertyName': 'wakeUpInterval',
          'value': 3600,
        }),
        '52-134-0-firmwareVersions': dict({
          'commandClass': 134,
          'commandClassName': 'Version',
          'endpoint': 0,
          'metadata': dict({
            'label': 'Z-Wave chip firmware versions',
            'readable': True,
            'type': 'any',
            'writeable': False,
          }),
          'property': 'firmwareVersions',
          'propertyName': 'firmwareVersions',
          'value': list([
            '1.12',
          ]),
        }),
        '52-134-0-hardwareVersion': dict({
          'commandClass': 134,
          'commandClassName': 'Version',
          'endpoint': 0,
          'metadata': dict({
            'label': 'Z-Wave chip hardware version',
            'readable': True,
            'type': 'any',
            'writeable': False,
          }),
          'property': 'hardwareVersion',
          'propertyName': 'hardwareVersion',
        }),
        '52-134-0-libraryType': dict({
          'commandClass': 134,
          'commandClassName': 'Version',
          'endpoint': 0,
          'metadata': dict({
            'label': 'Libary type',
            'readable': True,
            'type': 'any',
            'writeable': False,
          }),
          'property': 'libraryType',
          'propertyName': 'libraryType',
          'value': 3,
        }),
        '52-134-0-protocolVersion': dict({
          'commandClass': 134,
          'commandClassName': 'Version',
          'endpoint': 0,
          'metadata': dict({
            'label': 'Z-Wave protocol version',
            'readable': True,
            'type': 'any',
            'writeable': False,
          }),
          'property': 'protocolVersion',
          'propertyName': 'protocolVersion',
          'value': '4.54',
        }),
        '52-32-0-currentValue': dict({
          'commandClass': 32,
          'commandClassName': 'Basic',
          'endpoint': 0,
          'metadata': dict({
            'label': 'Current value',
            'max': 99,
            'min': 0,
            'readable': True,
            'type': 'number',
            'writeable': False,
          }),
          'property': 'currentValue',
          'propertyName': 'currentValue',
          'value': 255,
        }),
        '52-32-0-targetValue': dict({
          'commandClass': 32,
          'commandClassName': 'Basic',
          'endpoint': 0,
          'metadata': dict({
            'label': 'Target value',
            'max': 99,
            'min': 0,
            'readable': True,
            'type': 'number',
            'writeable': True,
          }),
          'property': 'targetValue',
          'propertyName': 'targetValue',
        }),
        '52-48-0-Any': dict({
          'commandClass': 48,
          'commandClassName': 'Binary Sensor',
          'endpoint': 0,
          'metadata': dict({
            'ccSpecific': dict({
              'sensorType': 255,
            }),
            'label': 'Any',
            'readable': True,
            'type': 'boolean',
            'writeable': False,
          }),
          'property': 'Any',
          'propertyName': 'Any',
          'value': False,
        }),
        '52-49-0-Air temperature': dict({
          'commandClass': 49,
          'commandClassName': 'Multilevel Sensor',
          'endpoint': 0,
          'metadata': dict({
            'ccSpecific': dict({
              'scale': 0,
              'sensorType': 1,
            }),
            'label': 'Air temperature',
            'readable': True,
            'type': 'number',
            'unit': '°C',
            'writeable': False,
          }),
          'property': 'Air temperature',
          'propertyName': 'Air temperature',
          'value': 9,
        }),
        '52-49-0-Humidity': dict({
          'commandClass': 49,
          'commandClassName': 'Multilevel Sensor',
          'endpoint': 0,
          'metadata': dict({
            'ccSpecific': dict({
              'scale': 0,
              'sensorType': 5,
            }),
            'label': 'Humidity',
            'readable': True,
            'type': 'number',
            'unit': '%',
            'writeable': False,
          }),
          'property': 'Humidity',
          'propertyName': 'Humidity',
          'value': 65,
        }),
        '52-49-0-Illuminance': dict({
          'commandClass': 49,
          'commandClassName': 'Multilevel Sensor',
          'endpoint': 0,
          'metadata': dict({
            'ccSpecific': dict({
              'scale': 1,
              'sensorType': 3,
            }),
            'label': 'Illuminance',
            'readable': True,
            'type': 'number',
            'unit': 'Lux',
            'writeable': False,
          }),
          'property': 'Illuminance',
          'propertyName': 'Illuminance',
          'value': 0,
        }),
        '52-49-0-Ultraviolet': dict({
          'commandClass': 49,
          'commandClassName': 'Multilevel Sensor',
          'endpoint': 0,
          'metadata': dict({
            'ccSpecific': dict({
              'scale': 0,
              'sensorType': 27,
            }),
            'label': 'Ultraviolet',
            'readable': True,
            'type': 'number',
            'writeable': False,
          }),
          'property': 'Ultraviolet',
          'propertyName': 'Ultraviolet',
          'value': 1,
        }),
      }),
      'version': 4,
      'zwavePlusVersion': 1,
    }),
    'versionInfo': dict({
      'driverVersion': '6.0.0-beta.0',
      'maxSchemaVersion': 0,
      'minSchemaVersion': 0,
      'serverVersion': '1.0.0',
    }),
  })
# ---
