# serializer version: 1
# name: test_all_entities[sensor.henk_active_calories_burnt_today-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL: 'total'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_active_calories_burnt_today',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Active calories burnt today',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'activity_active_calories_burnt_today',
    'unique_id': 'withings_12345_activity_active_calories_burnt_today',
    'unit_of_measurement': 'calories',
  })
# ---
# name: test_all_entities[sensor.henk_active_calories_burnt_today-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Active calories burnt today',
      'last_reset': '2023-10-20T00:00:00-07:00',
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': 'calories',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_active_calories_burnt_today',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '221.132',
  })
# ---
# name: test_all_entities[sensor.henk_active_time_today-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL: 'total'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_active_time_today',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Active time today',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'activity_active_duration_today',
    'unique_id': 'withings_12345_activity_active_duration_today',
    'unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
  })
# ---
# name: test_all_entities[sensor.henk_active_time_today-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'henk Active time today',
      'last_reset': '2023-10-20T00:00:00-07:00',
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_active_time_today',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.530',
  })
# ---
# name: test_all_entities[sensor.henk_average_heart_rate-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_average_heart_rate',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Average heart rate',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'average_heart_rate',
    'unique_id': 'withings_12345_sleep_heart_rate_average_bpm',
    'unit_of_measurement': 'bpm',
  })
# ---
# name: test_all_entities[sensor.henk_average_heart_rate-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Average heart rate',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'bpm',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_average_heart_rate',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '103',
  })
# ---
# name: test_all_entities[sensor.henk_average_respiratory_rate-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_average_respiratory_rate',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Average respiratory rate',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'average_respiratory_rate',
    'unique_id': 'withings_12345_sleep_respiratory_average_bpm',
    'unit_of_measurement': 'br/min',
  })
# ---
# name: test_all_entities[sensor.henk_average_respiratory_rate-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Average respiratory rate',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'br/min',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_average_respiratory_rate',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '14',
  })
# ---
# name: test_all_entities[sensor.henk_body_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_body_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Body temperature',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'body_temperature',
    'unique_id': 'withings_12345_body_temperature_c',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_all_entities[sensor.henk_body_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'henk Body temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_body_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '40',
  })
# ---
# name: test_all_entities[sensor.henk_bone_mass-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_bone_mass',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Bone mass',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'bone_mass',
    'unique_id': 'withings_12345_bone_mass_kg',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_bone_mass-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Bone mass',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_bone_mass',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '10',
  })
# ---
# name: test_all_entities[sensor.henk_breathing_disturbances_intensity-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_breathing_disturbances_intensity',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Breathing disturbances intensity',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'breathing_disturbances_intensity',
    'unique_id': 'withings_12345_sleep_breathing_disturbances_intensity',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_entities[sensor.henk_breathing_disturbances_intensity-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Breathing disturbances intensity',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_breathing_disturbances_intensity',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '9',
  })
# ---
# name: test_all_entities[sensor.henk_calories_burnt_last_workout-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_calories_burnt_last_workout',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Calories burnt last workout',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'workout_active_calories_burnt',
    'unique_id': 'withings_12345_workout_active_calories_burnt',
    'unit_of_measurement': 'calories',
  })
# ---
# name: test_all_entities[sensor.henk_calories_burnt_last_workout-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Calories burnt last workout',
      'unit_of_measurement': 'calories',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_calories_burnt_last_workout',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '24',
  })
# ---
# name: test_all_entities[sensor.henk_deep_sleep-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_deep_sleep',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Deep sleep',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'deep_sleep',
    'unique_id': 'withings_12345_sleep_deep_duration_seconds',
    'unit_of_measurement': <UnitOfTime.SECONDS: 's'>,
  })
# ---
# name: test_all_entities[sensor.henk_deep_sleep-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'henk Deep sleep',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTime.SECONDS: 's'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_deep_sleep',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '5820',
  })
# ---
# name: test_all_entities[sensor.henk_diastolic_blood_pressure-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_diastolic_blood_pressure',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Diastolic blood pressure',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'diastolic_blood_pressure',
    'unique_id': 'withings_12345_diastolic_blood_pressure_mmhg',
    'unit_of_measurement': 'mmhg',
  })
# ---
# name: test_all_entities[sensor.henk_diastolic_blood_pressure-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Diastolic blood pressure',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'mmhg',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_diastolic_blood_pressure',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '70',
  })
# ---
# name: test_all_entities[sensor.henk_distance_travelled_last_workout-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_distance_travelled_last_workout',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Distance travelled last workout',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'workout_distance',
    'unique_id': 'withings_12345_workout_distance',
    'unit_of_measurement': <UnitOfLength.METERS: 'm'>,
  })
# ---
# name: test_all_entities[sensor.henk_distance_travelled_last_workout-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'henk Distance travelled last workout',
      'unit_of_measurement': <UnitOfLength.METERS: 'm'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_distance_travelled_last_workout',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '232',
  })
# ---
# name: test_all_entities[sensor.henk_distance_travelled_today-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL: 'total'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_distance_travelled_today',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Distance travelled today',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'activity_distance_today',
    'unique_id': 'withings_12345_activity_distance_today',
    'unit_of_measurement': <UnitOfLength.METERS: 'm'>,
  })
# ---
# name: test_all_entities[sensor.henk_distance_travelled_today-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'henk Distance travelled today',
      'last_reset': '2023-10-20T00:00:00-07:00',
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': <UnitOfLength.METERS: 'm'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_distance_travelled_today',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1020.121',
  })
# ---
# name: test_all_entities[sensor.henk_electrodermal_activity_feet-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_electrodermal_activity_feet',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Electrodermal activity feet',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'electrodermal_activity_feet',
    'unique_id': 'withings_12345_electrodermal_activity_feet',
    'unit_of_measurement': '%',
  })
# ---
# name: test_all_entities[sensor.henk_electrodermal_activity_feet-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Electrodermal activity feet',
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_electrodermal_activity_feet',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '102',
  })
# ---
# name: test_all_entities[sensor.henk_electrodermal_activity_left_foot-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_electrodermal_activity_left_foot',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Electrodermal activity left foot',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'electrodermal_activity_left_foot',
    'unique_id': 'withings_12345_electrodermal_activity_left_foot',
    'unit_of_measurement': '%',
  })
# ---
# name: test_all_entities[sensor.henk_electrodermal_activity_left_foot-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Electrodermal activity left foot',
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_electrodermal_activity_left_foot',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '102',
  })
# ---
# name: test_all_entities[sensor.henk_electrodermal_activity_right_foot-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_electrodermal_activity_right_foot',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Electrodermal activity right foot',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'electrodermal_activity_right_foot',
    'unique_id': 'withings_12345_electrodermal_activity_right_foot',
    'unit_of_measurement': '%',
  })
# ---
# name: test_all_entities[sensor.henk_electrodermal_activity_right_foot-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Electrodermal activity right foot',
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_electrodermal_activity_right_foot',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '102',
  })
# ---
# name: test_all_entities[sensor.henk_elevation_change_last_workout-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_elevation_change_last_workout',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Elevation change last workout',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'workout_elevation',
    'unique_id': 'withings_12345_workout_floors_climbed',
    'unit_of_measurement': <UnitOfLength.METERS: 'm'>,
  })
# ---
# name: test_all_entities[sensor.henk_elevation_change_last_workout-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'henk Elevation change last workout',
      'unit_of_measurement': <UnitOfLength.METERS: 'm'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_elevation_change_last_workout',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '4',
  })
# ---
# name: test_all_entities[sensor.henk_elevation_change_today-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL: 'total'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_elevation_change_today',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Elevation change today',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'activity_elevation_today',
    'unique_id': 'withings_12345_activity_floors_climbed_today',
    'unit_of_measurement': <UnitOfLength.METERS: 'm'>,
  })
# ---
# name: test_all_entities[sensor.henk_elevation_change_today-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'henk Elevation change today',
      'last_reset': '2023-10-20T00:00:00-07:00',
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': <UnitOfLength.METERS: 'm'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_elevation_change_today',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_all_entities[sensor.henk_extracellular_water-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_extracellular_water',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Extracellular water',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'extracellular_water',
    'unique_id': 'withings_12345_extracellular_water',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_extracellular_water-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Extracellular water',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_extracellular_water',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '100',
  })
# ---
# name: test_all_entities[sensor.henk_fat_free_mass-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_fat_free_mass',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Fat free mass',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'fat_free_mass',
    'unique_id': 'withings_12345_fat_free_mass_kg',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_fat_free_mass-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Fat free mass',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_fat_free_mass',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '60',
  })
# ---
# name: test_all_entities[sensor.henk_fat_free_mass_in_left_arm-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_fat_free_mass_in_left_arm',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Fat free mass in left arm',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'fat_free_mass_for_segments_left_arm',
    'unique_id': 'withings_12345_fat_free_mass_for_segments_left_arm',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_fat_free_mass_in_left_arm-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Fat free mass in left arm',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_fat_free_mass_in_left_arm',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '5.05',
  })
# ---
# name: test_all_entities[sensor.henk_fat_free_mass_in_left_leg-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_fat_free_mass_in_left_leg',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Fat free mass in left leg',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'fat_free_mass_for_segments_left_leg',
    'unique_id': 'withings_12345_fat_free_mass_for_segments_left_leg',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_fat_free_mass_in_left_leg-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Fat free mass in left leg',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_fat_free_mass_in_left_leg',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '13.84',
  })
# ---
# name: test_all_entities[sensor.henk_fat_free_mass_in_right_arm-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_fat_free_mass_in_right_arm',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Fat free mass in right arm',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'fat_free_mass_for_segments_right_arm',
    'unique_id': 'withings_12345_fat_free_mass_for_segments_right_arm',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_fat_free_mass_in_right_arm-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Fat free mass in right arm',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_fat_free_mass_in_right_arm',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '5.18',
  })
# ---
# name: test_all_entities[sensor.henk_fat_free_mass_in_right_leg-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_fat_free_mass_in_right_leg',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Fat free mass in right leg',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'fat_free_mass_for_segments_right_leg',
    'unique_id': 'withings_12345_fat_free_mass_for_segments_right_leg',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_fat_free_mass_in_right_leg-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Fat free mass in right leg',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_fat_free_mass_in_right_leg',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '14.05',
  })
# ---
# name: test_all_entities[sensor.henk_fat_free_mass_in_torso-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_fat_free_mass_in_torso',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Fat free mass in torso',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'fat_free_mass_for_segments_torso',
    'unique_id': 'withings_12345_fat_free_mass_for_segments_torso',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_fat_free_mass_in_torso-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Fat free mass in torso',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_fat_free_mass_in_torso',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '40.49',
  })
# ---
# name: test_all_entities[sensor.henk_fat_mass-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_fat_mass',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Fat mass',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'fat_mass',
    'unique_id': 'withings_12345_fat_mass_kg',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_fat_mass-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Fat mass',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_fat_mass',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '5',
  })
# ---
# name: test_all_entities[sensor.henk_fat_mass_in_left_arm-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_fat_mass_in_left_arm',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Fat mass in left arm',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'fat_mass_for_segments_left_arm',
    'unique_id': 'withings_12345_fat_mass_for_segments_left_arm',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_fat_mass_in_left_arm-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Fat mass in left arm',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_fat_mass_in_left_arm',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1.03',
  })
# ---
# name: test_all_entities[sensor.henk_fat_mass_in_left_leg-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_fat_mass_in_left_leg',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Fat mass in left leg',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'fat_mass_for_segments_left_leg',
    'unique_id': 'withings_12345_fat_mass_for_segments_left_leg',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_fat_mass_in_left_leg-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Fat mass in left leg',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_fat_mass_in_left_leg',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2.45',
  })
# ---
# name: test_all_entities[sensor.henk_fat_mass_in_right_arm-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_fat_mass_in_right_arm',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Fat mass in right arm',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'fat_mass_for_segments_right_arm',
    'unique_id': 'withings_12345_fat_mass_for_segments_right_arm',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_fat_mass_in_right_arm-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Fat mass in right arm',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_fat_mass_in_right_arm',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.99',
  })
# ---
# name: test_all_entities[sensor.henk_fat_mass_in_right_leg-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_fat_mass_in_right_leg',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Fat mass in right leg',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'fat_mass_for_segments_right_leg',
    'unique_id': 'withings_12345_fat_mass_for_segments_right_leg',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_fat_mass_in_right_leg-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Fat mass in right leg',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_fat_mass_in_right_leg',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2.33',
  })
# ---
# name: test_all_entities[sensor.henk_fat_mass_in_torso-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_fat_mass_in_torso',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Fat mass in torso',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'fat_mass_for_segments_torso',
    'unique_id': 'withings_12345_fat_mass_for_segments_torso',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_fat_mass_in_torso-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Fat mass in torso',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_fat_mass_in_torso',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '10.99',
  })
# ---
# name: test_all_entities[sensor.henk_fat_ratio-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_fat_ratio',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Fat ratio',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'fat_ratio',
    'unique_id': 'withings_12345_fat_ratio_pct',
    'unit_of_measurement': '%',
  })
# ---
# name: test_all_entities[sensor.henk_fat_ratio-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Fat ratio',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_fat_ratio',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.07',
  })
# ---
# name: test_all_entities[sensor.henk_heart_pulse-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_heart_pulse',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Heart pulse',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'heart_pulse',
    'unique_id': 'withings_12345_heart_pulse_bpm',
    'unit_of_measurement': 'bpm',
  })
# ---
# name: test_all_entities[sensor.henk_heart_pulse-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Heart pulse',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'bpm',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_heart_pulse',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '60',
  })
# ---
# name: test_all_entities[sensor.henk_height-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_height',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Height',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'height',
    'unique_id': 'withings_12345_height_m',
    'unit_of_measurement': <UnitOfLength.METERS: 'm'>,
  })
# ---
# name: test_all_entities[sensor.henk_height-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'henk Height',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.METERS: 'm'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_height',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_all_entities[sensor.henk_hydration-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_hydration',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Hydration',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'hydration',
    'unique_id': 'withings_12345_hydration',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_hydration-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Hydration',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_hydration',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.95',
  })
# ---
# name: test_all_entities[sensor.henk_intense_activity_today-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL: 'total'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_intense_activity_today',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Intense activity today',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'activity_intense_duration_today',
    'unique_id': 'withings_12345_activity_intense_duration_today',
    'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
  })
# ---
# name: test_all_entities[sensor.henk_intense_activity_today-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'henk Intense activity today',
      'last_reset': '2023-10-20T00:00:00-07:00',
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_intense_activity_today',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '7.0',
  })
# ---
# name: test_all_entities[sensor.henk_intracellular_water-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_intracellular_water',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Intracellular water',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'intracellular_water',
    'unique_id': 'withings_12345_intracellular_water',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_intracellular_water-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Intracellular water',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_intracellular_water',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '100',
  })
# ---
# name: test_all_entities[sensor.henk_last_workout_duration-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_last_workout_duration',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Last workout duration',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'workout_duration',
    'unique_id': 'withings_12345_workout_duration',
    'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
  })
# ---
# name: test_all_entities[sensor.henk_last_workout_duration-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'henk Last workout duration',
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_last_workout_duration',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '4.25',
  })
# ---
# name: test_all_entities[sensor.henk_last_workout_intensity-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_last_workout_intensity',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Last workout intensity',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'workout_intensity',
    'unique_id': 'withings_12345_workout_intensity',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_entities[sensor.henk_last_workout_intensity-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Last workout intensity',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_last_workout_intensity',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '30',
  })
# ---
# name: test_all_entities[sensor.henk_last_workout_type-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'walk',
        'run',
        'hiking',
        'skating',
        'bmx',
        'bicycling',
        'swimming',
        'surfing',
        'kitesurfing',
        'windsurfing',
        'bodyboard',
        'tennis',
        'table_tennis',
        'squash',
        'badminton',
        'lift_weights',
        'calisthenics',
        'elliptical',
        'pilates',
        'basket_ball',
        'soccer',
        'football',
        'rugby',
        'volley_ball',
        'waterpolo',
        'horse_riding',
        'golf',
        'yoga',
        'dancing',
        'boxing',
        'fencing',
        'wrestling',
        'martial_arts',
        'skiing',
        'snowboarding',
        'other',
        'no_activity',
        'rowing',
        'zumba',
        'baseball',
        'handball',
        'hockey',
        'ice_hockey',
        'climbing',
        'ice_skating',
        'multi_sport',
        'indoor_walk',
        'indoor_running',
        'indoor_cycling',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_last_workout_type',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Last workout type',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'workout_type',
    'unique_id': 'withings_12345_workout_type',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_entities[sensor.henk_last_workout_type-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'henk Last workout type',
      'options': list([
        'walk',
        'run',
        'hiking',
        'skating',
        'bmx',
        'bicycling',
        'swimming',
        'surfing',
        'kitesurfing',
        'windsurfing',
        'bodyboard',
        'tennis',
        'table_tennis',
        'squash',
        'badminton',
        'lift_weights',
        'calisthenics',
        'elliptical',
        'pilates',
        'basket_ball',
        'soccer',
        'football',
        'rugby',
        'volley_ball',
        'waterpolo',
        'horse_riding',
        'golf',
        'yoga',
        'dancing',
        'boxing',
        'fencing',
        'wrestling',
        'martial_arts',
        'skiing',
        'snowboarding',
        'other',
        'no_activity',
        'rowing',
        'zumba',
        'baseball',
        'handball',
        'hockey',
        'ice_hockey',
        'climbing',
        'ice_skating',
        'multi_sport',
        'indoor_walk',
        'indoor_running',
        'indoor_cycling',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_last_workout_type',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'walk',
  })
# ---
# name: test_all_entities[sensor.henk_light_sleep-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_light_sleep',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Light sleep',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'light_sleep',
    'unique_id': 'withings_12345_sleep_light_duration_seconds',
    'unit_of_measurement': <UnitOfTime.SECONDS: 's'>,
  })
# ---
# name: test_all_entities[sensor.henk_light_sleep-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'henk Light sleep',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTime.SECONDS: 's'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_light_sleep',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '10440',
  })
# ---
# name: test_all_entities[sensor.henk_maximum_heart_rate-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_maximum_heart_rate',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Maximum heart rate',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'maximum_heart_rate',
    'unique_id': 'withings_12345_sleep_heart_rate_max_bpm',
    'unit_of_measurement': 'bpm',
  })
# ---
# name: test_all_entities[sensor.henk_maximum_heart_rate-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Maximum heart rate',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'bpm',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_maximum_heart_rate',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '120',
  })
# ---
# name: test_all_entities[sensor.henk_maximum_respiratory_rate-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_maximum_respiratory_rate',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Maximum respiratory rate',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'maximum_respiratory_rate',
    'unique_id': 'withings_12345_sleep_respiratory_max_bpm',
    'unit_of_measurement': 'br/min',
  })
# ---
# name: test_all_entities[sensor.henk_maximum_respiratory_rate-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Maximum respiratory rate',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'br/min',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_maximum_respiratory_rate',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '20',
  })
# ---
# name: test_all_entities[sensor.henk_minimum_heart_rate-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_minimum_heart_rate',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Minimum heart rate',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'minimum_heart_rate',
    'unique_id': 'withings_12345_sleep_heart_rate_min_bpm',
    'unit_of_measurement': 'bpm',
  })
# ---
# name: test_all_entities[sensor.henk_minimum_heart_rate-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Minimum heart rate',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'bpm',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_minimum_heart_rate',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '70',
  })
# ---
# name: test_all_entities[sensor.henk_minimum_respiratory_rate-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_minimum_respiratory_rate',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Minimum respiratory rate',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'minimum_respiratory_rate',
    'unique_id': 'withings_12345_sleep_respiratory_min_bpm',
    'unit_of_measurement': 'br/min',
  })
# ---
# name: test_all_entities[sensor.henk_minimum_respiratory_rate-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Minimum respiratory rate',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'br/min',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_minimum_respiratory_rate',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '10',
  })
# ---
# name: test_all_entities[sensor.henk_moderate_activity_today-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL: 'total'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_moderate_activity_today',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Moderate activity today',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'activity_moderate_duration_today',
    'unique_id': 'withings_12345_activity_moderate_duration_today',
    'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
  })
# ---
# name: test_all_entities[sensor.henk_moderate_activity_today-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'henk Moderate activity today',
      'last_reset': '2023-10-20T00:00:00-07:00',
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_moderate_activity_today',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '24.8',
  })
# ---
# name: test_all_entities[sensor.henk_muscle_mass-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_muscle_mass',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Muscle mass',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'muscle_mass',
    'unique_id': 'withings_12345_muscle_mass_kg',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_muscle_mass-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Muscle mass',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_muscle_mass',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '50',
  })
# ---
# name: test_all_entities[sensor.henk_muscle_mass_in_left_arm-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_muscle_mass_in_left_arm',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Muscle mass in left arm',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'muscle_mass_for_segments_left_arm',
    'unique_id': 'withings_12345_muscle_mass_for_segments_left_arm',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_muscle_mass_in_left_arm-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Muscle mass in left arm',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_muscle_mass_in_left_arm',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '4.77',
  })
# ---
# name: test_all_entities[sensor.henk_muscle_mass_in_left_leg-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_muscle_mass_in_left_leg',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Muscle mass in left leg',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'muscle_mass_for_segments_left_leg',
    'unique_id': 'withings_12345_muscle_mass_for_segments_left_leg',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_muscle_mass_in_left_leg-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Muscle mass in left leg',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_muscle_mass_in_left_leg',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '13.09',
  })
# ---
# name: test_all_entities[sensor.henk_muscle_mass_in_right_arm-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_muscle_mass_in_right_arm',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Muscle mass in right arm',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'muscle_mass_for_segments_right_arm',
    'unique_id': 'withings_12345_muscle_mass_for_segments_right_arm',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_muscle_mass_in_right_arm-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Muscle mass in right arm',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_muscle_mass_in_right_arm',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '4.89',
  })
# ---
# name: test_all_entities[sensor.henk_muscle_mass_in_right_leg-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_muscle_mass_in_right_leg',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Muscle mass in right leg',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'muscle_mass_for_segments_right_leg',
    'unique_id': 'withings_12345_muscle_mass_for_segments_right_leg',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_muscle_mass_in_right_leg-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Muscle mass in right leg',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_muscle_mass_in_right_leg',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '13.29',
  })
# ---
# name: test_all_entities[sensor.henk_muscle_mass_in_torso-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_muscle_mass_in_torso',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Muscle mass in torso',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'muscle_mass_for_segments_torso',
    'unique_id': 'withings_12345_muscle_mass_for_segments_torso',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_muscle_mass_in_torso-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Muscle mass in torso',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_muscle_mass_in_torso',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '38.7',
  })
# ---
# name: test_all_entities[sensor.henk_pause_during_last_workout-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_pause_during_last_workout',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Pause during last workout',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'workout_pause_duration',
    'unique_id': 'withings_12345_workout_pause_duration',
    'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
  })
# ---
# name: test_all_entities[sensor.henk_pause_during_last_workout-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'henk Pause during last workout',
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_pause_during_last_workout',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_all_entities[sensor.henk_pulse_wave_velocity-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_pulse_wave_velocity',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.SPEED: 'speed'>,
    'original_icon': None,
    'original_name': 'Pulse wave velocity',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'pulse_wave_velocity',
    'unique_id': 'withings_12345_pulse_wave_velocity',
    'unit_of_measurement': <UnitOfSpeed.METERS_PER_SECOND: 'm/s'>,
  })
# ---
# name: test_all_entities[sensor.henk_pulse_wave_velocity-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'speed',
      'friendly_name': 'henk Pulse wave velocity',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.METERS_PER_SECOND: 'm/s'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_pulse_wave_velocity',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '100',
  })
# ---
# name: test_all_entities[sensor.henk_rem_sleep-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_rem_sleep',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'REM sleep',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'rem_sleep',
    'unique_id': 'withings_12345_sleep_rem_duration_seconds',
    'unit_of_measurement': <UnitOfTime.SECONDS: 's'>,
  })
# ---
# name: test_all_entities[sensor.henk_rem_sleep-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'henk REM sleep',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTime.SECONDS: 's'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_rem_sleep',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2400',
  })
# ---
# name: test_all_entities[sensor.henk_skin_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_skin_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Skin temperature',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'skin_temperature',
    'unique_id': 'withings_12345_skin_temperature_c',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_all_entities[sensor.henk_skin_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'henk Skin temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_skin_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '20',
  })
# ---
# name: test_all_entities[sensor.henk_sleep_goal-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_sleep_goal',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Sleep goal',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'sleep_goal',
    'unique_id': 'withings_12345_sleep_goal',
    'unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
  })
# ---
# name: test_all_entities[sensor.henk_sleep_goal-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'henk Sleep goal',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTime.HOURS: 'h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_sleep_goal',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '8.000',
  })
# ---
# name: test_all_entities[sensor.henk_sleep_score-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_sleep_score',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Sleep score',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'sleep_score',
    'unique_id': 'withings_12345_sleep_score',
    'unit_of_measurement': 'points',
  })
# ---
# name: test_all_entities[sensor.henk_sleep_score-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Sleep score',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'points',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_sleep_score',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '37',
  })
# ---
# name: test_all_entities[sensor.henk_snoring-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_snoring',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Snoring',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'snoring',
    'unique_id': 'withings_12345_sleep_snoring',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_entities[sensor.henk_snoring-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Snoring',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_snoring',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1080',
  })
# ---
# name: test_all_entities[sensor.henk_snoring_episode_count-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_snoring_episode_count',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Snoring episode count',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'snoring_episode_count',
    'unique_id': 'withings_12345_sleep_snoring_eposode_count',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_entities[sensor.henk_snoring_episode_count-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Snoring episode count',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_snoring_episode_count',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '18',
  })
# ---
# name: test_all_entities[sensor.henk_soft_activity_today-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL: 'total'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_soft_activity_today',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Soft activity today',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'activity_soft_duration_today',
    'unique_id': 'withings_12345_activity_soft_duration_today',
    'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
  })
# ---
# name: test_all_entities[sensor.henk_soft_activity_today-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'henk Soft activity today',
      'last_reset': '2023-10-20T00:00:00-07:00',
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_soft_activity_today',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '25.3',
  })
# ---
# name: test_all_entities[sensor.henk_spo2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_spo2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'SpO2',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'spo2',
    'unique_id': 'withings_12345_spo2_pct',
    'unit_of_measurement': '%',
  })
# ---
# name: test_all_entities[sensor.henk_spo2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk SpO2',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_spo2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.95',
  })
# ---
# name: test_all_entities[sensor.henk_step_goal-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_step_goal',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Step goal',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'step_goal',
    'unique_id': 'withings_12345_step_goal',
    'unit_of_measurement': 'steps',
  })
# ---
# name: test_all_entities[sensor.henk_step_goal-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Step goal',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'steps',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_step_goal',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '10000',
  })
# ---
# name: test_all_entities[sensor.henk_steps_today-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL: 'total'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_steps_today',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Steps today',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'activity_steps_today',
    'unique_id': 'withings_12345_activity_steps_today',
    'unit_of_measurement': 'steps',
  })
# ---
# name: test_all_entities[sensor.henk_steps_today-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Steps today',
      'last_reset': '2023-10-20T00:00:00-07:00',
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': 'steps',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_steps_today',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1155',
  })
# ---
# name: test_all_entities[sensor.henk_systolic_blood_pressure-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_systolic_blood_pressure',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Systolic blood pressure',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'systolic_blood_pressure',
    'unique_id': 'withings_12345_systolic_blood_pressure_mmhg',
    'unit_of_measurement': 'mmhg',
  })
# ---
# name: test_all_entities[sensor.henk_systolic_blood_pressure-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Systolic blood pressure',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'mmhg',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_systolic_blood_pressure',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '100',
  })
# ---
# name: test_all_entities[sensor.henk_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'withings_12345_temperature_c',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_all_entities[sensor.henk_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'henk Temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '40',
  })
# ---
# name: test_all_entities[sensor.henk_time_to_sleep-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_time_to_sleep',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Time to sleep',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'time_to_sleep',
    'unique_id': 'withings_12345_sleep_tosleep_duration_seconds',
    'unit_of_measurement': <UnitOfTime.SECONDS: 's'>,
  })
# ---
# name: test_all_entities[sensor.henk_time_to_sleep-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'henk Time to sleep',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTime.SECONDS: 's'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_time_to_sleep',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '540',
  })
# ---
# name: test_all_entities[sensor.henk_time_to_wakeup-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_time_to_wakeup',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Time to wakeup',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'time_to_wakeup',
    'unique_id': 'withings_12345_sleep_towakeup_duration_seconds',
    'unit_of_measurement': <UnitOfTime.SECONDS: 's'>,
  })
# ---
# name: test_all_entities[sensor.henk_time_to_wakeup-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'henk Time to wakeup',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTime.SECONDS: 's'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_time_to_wakeup',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1140',
  })
# ---
# name: test_all_entities[sensor.henk_total_calories_burnt_today-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL: 'total'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_total_calories_burnt_today',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Total calories burnt today',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'activity_total_calories_burnt_today',
    'unique_id': 'withings_12345_activity_total_calories_burnt_today',
    'unit_of_measurement': 'calories',
  })
# ---
# name: test_all_entities[sensor.henk_total_calories_burnt_today-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Total calories burnt today',
      'last_reset': '2023-10-20T00:00:00-07:00',
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': 'calories',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_total_calories_burnt_today',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2444.149',
  })
# ---
# name: test_all_entities[sensor.henk_vascular_age-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_vascular_age',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Vascular age',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vascular_age',
    'unique_id': 'withings_12345_vascular_age',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_entities[sensor.henk_vascular_age-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Vascular age',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_vascular_age',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '100',
  })
# ---
# name: test_all_entities[sensor.henk_visceral_fat_index-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_visceral_fat_index',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Visceral fat index',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'visceral_fat_index',
    'unique_id': 'withings_12345_visceral_fat',
    'unit_of_measurement': None,
  })
# ---
# name: test_all_entities[sensor.henk_visceral_fat_index-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Visceral fat index',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_visceral_fat_index',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '102',
  })
# ---
# name: test_all_entities[sensor.henk_vo2_max-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_vo2_max',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'VO2 max',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vo2_max',
    'unique_id': 'withings_12345_vo2_max',
    'unit_of_measurement': 'ml/min/kg',
  })
# ---
# name: test_all_entities[sensor.henk_vo2_max-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk VO2 max',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'ml/min/kg',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_vo2_max',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '100',
  })
# ---
# name: test_all_entities[sensor.henk_wakeup_count-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_wakeup_count',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Wakeup count',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wakeup_count',
    'unique_id': 'withings_12345_sleep_wakeup_count',
    'unit_of_measurement': 'times',
  })
# ---
# name: test_all_entities[sensor.henk_wakeup_count-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'henk Wakeup count',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'times',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_wakeup_count',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1',
  })
# ---
# name: test_all_entities[sensor.henk_wakeup_time-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_wakeup_time',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Wakeup time',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wakeup_time',
    'unique_id': 'withings_12345_sleep_wakeup_duration_seconds',
    'unit_of_measurement': <UnitOfTime.SECONDS: 's'>,
  })
# ---
# name: test_all_entities[sensor.henk_wakeup_time-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'henk Wakeup time',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTime.SECONDS: 's'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_wakeup_time',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '3060',
  })
# ---
# name: test_all_entities[sensor.henk_weight-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_weight',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Weight',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'withings_12345_weight_kg',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_weight-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Weight',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_weight',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '70',
  })
# ---
# name: test_all_entities[sensor.henk_weight_goal-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.henk_weight_goal',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.WEIGHT: 'weight'>,
    'original_icon': None,
    'original_name': 'Weight goal',
    'platform': 'withings',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'weight_goal',
    'unique_id': 'withings_12345_weight_goal',
    'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
  })
# ---
# name: test_all_entities[sensor.henk_weight_goal-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'weight',
      'friendly_name': 'henk Weight goal',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfMass.KILOGRAMS: 'kg'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.henk_weight_goal',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '70.5',
  })
# ---
