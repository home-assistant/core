# serializer version: 1
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_absolute_pressure-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_a_absolute_pressure',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Absolute pressure',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'absolute_pressure',
    'unique_id': 'AA:AA:AA:AA:AA:AA_baromabsin',
    'unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_absolute_pressure-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'pressure',
      'friendly_name': 'Station A Absolute pressure',
      'last_measured': HAFakeDatetime(2023, 11, 8, 12, 12, 0, 914000, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_a_absolute_pressure',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '977.616536580043',
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_daily_rain-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL: 'total'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_a_daily_rain',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRECIPITATION: 'precipitation'>,
    'original_icon': None,
    'original_name': 'Daily rain',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'daily_rain',
    'unique_id': 'AA:AA:AA:AA:AA:AA_dailyrainin',
    'unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_daily_rain-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'precipitation',
      'friendly_name': 'Station A Daily rain',
      'last_measured': HAFakeDatetime(2023, 11, 8, 12, 12, 0, 914000, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_a_daily_rain',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_dew_point-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_a_dew_point',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Dew point',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'dew_point',
    'unique_id': 'AA:AA:AA:AA:AA:AA_dewPoint',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_dew_point-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'temperature',
      'friendly_name': 'Station A Dew point',
      'last_measured': HAFakeDatetime(2023, 11, 8, 12, 12, 0, 914000, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_a_dew_point',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '27.7777777777778',
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_feels_like-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_a_feels_like',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Feels like',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'feels_like',
    'unique_id': 'AA:AA:AA:AA:AA:AA_feelsLike',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_feels_like-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'temperature',
      'friendly_name': 'Station A Feels like',
      'last_measured': HAFakeDatetime(2023, 11, 8, 12, 12, 0, 914000, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_a_feels_like',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '29.4444444444444',
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_hourly_rain-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_a_hourly_rain',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR: 'mm/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRECIPITATION_INTENSITY: 'precipitation_intensity'>,
    'original_icon': None,
    'original_name': 'Hourly rain',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'hourly_rain',
    'unique_id': 'AA:AA:AA:AA:AA:AA_hourlyrainin',
    'unit_of_measurement': <UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR: 'mm/h'>,
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_hourly_rain-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'precipitation_intensity',
      'friendly_name': 'Station A Hourly rain',
      'last_measured': HAFakeDatetime(2023, 11, 8, 12, 12, 0, 914000, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR: 'mm/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_a_hourly_rain',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_humidity-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_a_humidity',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
    'original_icon': None,
    'original_name': 'Humidity',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'AA:AA:AA:AA:AA:AA_humidity',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_humidity-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'humidity',
      'friendly_name': 'Station A Humidity',
      'last_measured': HAFakeDatetime(2023, 11, 8, 12, 12, 0, 914000, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_a_humidity',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '60',
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_irradiance-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_a_irradiance',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.IRRADIANCE: 'irradiance'>,
    'original_icon': None,
    'original_name': 'Irradiance',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'AA:AA:AA:AA:AA:AA_solarradiation',
    'unit_of_measurement': <UnitOfIrradiance.WATTS_PER_SQUARE_METER: 'W/m짼'>,
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_irradiance-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'irradiance',
      'friendly_name': 'Station A Irradiance',
      'last_measured': HAFakeDatetime(2023, 11, 8, 12, 12, 0, 914000, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfIrradiance.WATTS_PER_SQUARE_METER: 'W/m짼'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_a_irradiance',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '37.64',
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_last_rain-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_a_last_rain',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Last rain',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'last_rain',
    'unique_id': 'AA:AA:AA:AA:AA:AA_lastRain',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_last_rain-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'timestamp',
      'friendly_name': 'Station A Last rain',
      'last_measured': HAFakeDatetime(2023, 11, 8, 12, 12, 0, 914000, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_a_last_rain',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2023-10-30T09:45:00+00:00',
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_max_daily_gust-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_a_max_daily_gust',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WIND_SPEED: 'wind_speed'>,
    'original_icon': None,
    'original_name': 'Max daily gust',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'max_daily_gust',
    'unique_id': 'AA:AA:AA:AA:AA:AA_maxdailygust',
    'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_max_daily_gust-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'wind_speed',
      'friendly_name': 'Station A Max daily gust',
      'last_measured': HAFakeDatetime(2023, 11, 8, 12, 12, 0, 914000, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_a_max_daily_gust',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '36.72523008',
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_monthly_rain-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL: 'total'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_a_monthly_rain',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRECIPITATION: 'precipitation'>,
    'original_icon': None,
    'original_name': 'Monthly rain',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'monthly_rain',
    'unique_id': 'AA:AA:AA:AA:AA:AA_monthlyrainin',
    'unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_monthly_rain-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'precipitation',
      'friendly_name': 'Station A Monthly rain',
      'last_measured': HAFakeDatetime(2023, 11, 8, 12, 12, 0, 914000, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_a_monthly_rain',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_relative_pressure-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_a_relative_pressure',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Relative pressure',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'relative_pressure',
    'unique_id': 'AA:AA:AA:AA:AA:AA_baromrelin',
    'unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_relative_pressure-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'pressure',
      'friendly_name': 'Station A Relative pressure',
      'last_measured': HAFakeDatetime(2023, 11, 8, 12, 12, 0, 914000, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_a_relative_pressure',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1001.89694313129',
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_a_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'AA:AA:AA:AA:AA:AA_tempf',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'temperature',
      'friendly_name': 'Station A Temperature',
      'last_measured': HAFakeDatetime(2023, 11, 8, 12, 12, 0, 914000, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_a_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '28.2777777777778',
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_uv_index-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_a_uv_index',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'UV index',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'uv_index',
    'unique_id': 'AA:AA:AA:AA:AA:AA_uv',
    'unit_of_measurement': 'index',
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_uv_index-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'friendly_name': 'Station A UV index',
      'last_measured': HAFakeDatetime(2023, 11, 8, 12, 12, 0, 914000, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'index',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_a_uv_index',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_weekly_rain-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL: 'total'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_a_weekly_rain',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRECIPITATION: 'precipitation'>,
    'original_icon': None,
    'original_name': 'Weekly rain',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'weekly_rain',
    'unique_id': 'AA:AA:AA:AA:AA:AA_weeklyrainin',
    'unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_weekly_rain-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'precipitation',
      'friendly_name': 'Station A Weekly rain',
      'last_measured': HAFakeDatetime(2023, 11, 8, 12, 12, 0, 914000, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_a_weekly_rain',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_wind_direction-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_a_wind_direction',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Wind direction',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wind_direction',
    'unique_id': 'AA:AA:AA:AA:AA:AA_winddir',
    'unit_of_measurement': '째',
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_wind_direction-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'friendly_name': 'Station A Wind direction',
      'last_measured': HAFakeDatetime(2023, 11, 8, 12, 12, 0, 914000, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'unit_of_measurement': '째',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_a_wind_direction',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '11',
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_wind_gust-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_a_wind_gust',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WIND_SPEED: 'wind_speed'>,
    'original_icon': None,
    'original_name': 'Wind gust',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wind_gust',
    'unique_id': 'AA:AA:AA:AA:AA:AA_windgustmph',
    'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_wind_gust-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'wind_speed',
      'friendly_name': 'Station A Wind gust',
      'last_measured': HAFakeDatetime(2023, 11, 8, 12, 12, 0, 914000, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_a_wind_gust',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '14.75768448',
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_wind_speed-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_a_wind_speed',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WIND_SPEED: 'wind_speed'>,
    'original_icon': None,
    'original_name': 'Wind speed',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'AA:AA:AA:AA:AA:AA_windspeedmph',
    'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
  })
# ---
# name: test_sensors[AA:AA:AA:AA:AA:AA][sensor.station_a_wind_speed-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'wind_speed',
      'friendly_name': 'Station A Wind speed',
      'last_measured': HAFakeDatetime(2023, 11, 8, 12, 12, 0, 914000, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_a_wind_speed',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '14.03347968',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_absolute_pressure-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_c_absolute_pressure',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Absolute pressure',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'absolute_pressure',
    'unique_id': 'CC:CC:CC:CC:CC:CC_baromabsin',
    'unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_absolute_pressure-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'pressure',
      'friendly_name': 'Station C Absolute pressure',
      'last_measured': HAFakeDatetime(2024, 6, 6, 8, 28, 3, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_c_absolute_pressure',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '977.616536580043',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_daily_rain-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL: 'total'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_c_daily_rain',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRECIPITATION: 'precipitation'>,
    'original_icon': None,
    'original_name': 'Daily rain',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'daily_rain',
    'unique_id': 'CC:CC:CC:CC:CC:CC_dailyrainin',
    'unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_daily_rain-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'precipitation',
      'friendly_name': 'Station C Daily rain',
      'last_measured': HAFakeDatetime(2024, 6, 6, 8, 28, 3, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_c_daily_rain',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_dew_point-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_c_dew_point',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Dew point',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'dew_point',
    'unique_id': 'CC:CC:CC:CC:CC:CC_dewPoint',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_dew_point-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'temperature',
      'friendly_name': 'Station C Dew point',
      'last_measured': HAFakeDatetime(2024, 6, 6, 8, 28, 3, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_c_dew_point',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '27.7777777777778',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_feels_like-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_c_feels_like',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Feels like',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'feels_like',
    'unique_id': 'CC:CC:CC:CC:CC:CC_feelsLike',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_feels_like-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'temperature',
      'friendly_name': 'Station C Feels like',
      'last_measured': HAFakeDatetime(2024, 6, 6, 8, 28, 3, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_c_feels_like',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '29.4444444444444',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_hourly_rain-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_c_hourly_rain',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR: 'mm/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRECIPITATION_INTENSITY: 'precipitation_intensity'>,
    'original_icon': None,
    'original_name': 'Hourly rain',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'hourly_rain',
    'unique_id': 'CC:CC:CC:CC:CC:CC_hourlyrainin',
    'unit_of_measurement': <UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR: 'mm/h'>,
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_hourly_rain-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'precipitation_intensity',
      'friendly_name': 'Station C Hourly rain',
      'last_measured': HAFakeDatetime(2024, 6, 6, 8, 28, 3, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR: 'mm/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_c_hourly_rain',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_humidity-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_c_humidity',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
    'original_icon': None,
    'original_name': 'Humidity',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'CC:CC:CC:CC:CC:CC_humidity',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_humidity-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'humidity',
      'friendly_name': 'Station C Humidity',
      'last_measured': HAFakeDatetime(2024, 6, 6, 8, 28, 3, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_c_humidity',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '60',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_irradiance-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_c_irradiance',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.IRRADIANCE: 'irradiance'>,
    'original_icon': None,
    'original_name': 'Irradiance',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'CC:CC:CC:CC:CC:CC_solarradiation',
    'unit_of_measurement': <UnitOfIrradiance.WATTS_PER_SQUARE_METER: 'W/m짼'>,
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_irradiance-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'irradiance',
      'friendly_name': 'Station C Irradiance',
      'last_measured': HAFakeDatetime(2024, 6, 6, 8, 28, 3, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfIrradiance.WATTS_PER_SQUARE_METER: 'W/m짼'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_c_irradiance',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '37.64',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_last_rain-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_c_last_rain',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Last rain',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'last_rain',
    'unique_id': 'CC:CC:CC:CC:CC:CC_lastRain',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_last_rain-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'timestamp',
      'friendly_name': 'Station C Last rain',
      'last_measured': HAFakeDatetime(2024, 6, 6, 8, 28, 3, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_c_last_rain',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2023-10-30T09:45:00+00:00',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_max_daily_gust-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_c_max_daily_gust',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WIND_SPEED: 'wind_speed'>,
    'original_icon': None,
    'original_name': 'Max daily gust',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'max_daily_gust',
    'unique_id': 'CC:CC:CC:CC:CC:CC_maxdailygust',
    'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_max_daily_gust-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'wind_speed',
      'friendly_name': 'Station C Max daily gust',
      'last_measured': HAFakeDatetime(2024, 6, 6, 8, 28, 3, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_c_max_daily_gust',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '36.72523008',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_monthly_rain-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL: 'total'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_c_monthly_rain',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRECIPITATION: 'precipitation'>,
    'original_icon': None,
    'original_name': 'Monthly rain',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'monthly_rain',
    'unique_id': 'CC:CC:CC:CC:CC:CC_monthlyrainin',
    'unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_monthly_rain-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'precipitation',
      'friendly_name': 'Station C Monthly rain',
      'last_measured': HAFakeDatetime(2024, 6, 6, 8, 28, 3, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_c_monthly_rain',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_relative_pressure-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_c_relative_pressure',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Relative pressure',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'relative_pressure',
    'unique_id': 'CC:CC:CC:CC:CC:CC_baromrelin',
    'unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_relative_pressure-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'pressure',
      'friendly_name': 'Station C Relative pressure',
      'last_measured': HAFakeDatetime(2024, 6, 6, 8, 28, 3, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_c_relative_pressure',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1001.89694313129',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_c_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'CC:CC:CC:CC:CC:CC_tempf',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'temperature',
      'friendly_name': 'Station C Temperature',
      'last_measured': HAFakeDatetime(2024, 6, 6, 8, 28, 3, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_c_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '28.2777777777778',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_uv_index-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_c_uv_index',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'UV index',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'uv_index',
    'unique_id': 'CC:CC:CC:CC:CC:CC_uv',
    'unit_of_measurement': 'index',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_uv_index-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'friendly_name': 'Station C UV index',
      'last_measured': HAFakeDatetime(2024, 6, 6, 8, 28, 3, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'index',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_c_uv_index',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_weekly_rain-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL: 'total'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_c_weekly_rain',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRECIPITATION: 'precipitation'>,
    'original_icon': None,
    'original_name': 'Weekly rain',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'weekly_rain',
    'unique_id': 'CC:CC:CC:CC:CC:CC_weeklyrainin',
    'unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_weekly_rain-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'precipitation',
      'friendly_name': 'Station C Weekly rain',
      'last_measured': HAFakeDatetime(2024, 6, 6, 8, 28, 3, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_c_weekly_rain',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_wind_direction-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_c_wind_direction',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Wind direction',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wind_direction',
    'unique_id': 'CC:CC:CC:CC:CC:CC_winddir',
    'unit_of_measurement': '째',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_wind_direction-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'friendly_name': 'Station C Wind direction',
      'last_measured': HAFakeDatetime(2024, 6, 6, 8, 28, 3, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'unit_of_measurement': '째',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_c_wind_direction',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '11',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_wind_gust-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_c_wind_gust',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WIND_SPEED: 'wind_speed'>,
    'original_icon': None,
    'original_name': 'Wind gust',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wind_gust',
    'unique_id': 'CC:CC:CC:CC:CC:CC_windgustmph',
    'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_wind_gust-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'wind_speed',
      'friendly_name': 'Station C Wind gust',
      'last_measured': HAFakeDatetime(2024, 6, 6, 8, 28, 3, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_c_wind_gust',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '14.75768448',
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_wind_speed-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_c_wind_speed',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WIND_SPEED: 'wind_speed'>,
    'original_icon': None,
    'original_name': 'Wind speed',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'CC:CC:CC:CC:CC:CC_windspeedmph',
    'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
  })
# ---
# name: test_sensors[CC:CC:CC:CC:CC:CC][sensor.station_c_wind_speed-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'wind_speed',
      'friendly_name': 'Station C Wind speed',
      'last_measured': HAFakeDatetime(2024, 6, 6, 8, 28, 3, tzinfo=zoneinfo.ZoneInfo(key='US/Pacific')),
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_c_wind_speed',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '14.03347968',
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_absolute_pressure-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_d_absolute_pressure',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Absolute pressure',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'absolute_pressure',
    'unique_id': 'DD:DD:DD:DD:DD:DD_baromabsin',
    'unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_absolute_pressure-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'pressure',
      'friendly_name': 'Station D Absolute pressure',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_d_absolute_pressure',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '977.616536580043',
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_daily_rain-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL: 'total'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_d_daily_rain',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRECIPITATION: 'precipitation'>,
    'original_icon': None,
    'original_name': 'Daily rain',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'daily_rain',
    'unique_id': 'DD:DD:DD:DD:DD:DD_dailyrainin',
    'unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_daily_rain-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'precipitation',
      'friendly_name': 'Station D Daily rain',
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_d_daily_rain',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_dew_point-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_d_dew_point',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Dew point',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'dew_point',
    'unique_id': 'DD:DD:DD:DD:DD:DD_dewPoint',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_dew_point-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'temperature',
      'friendly_name': 'Station D Dew point',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_d_dew_point',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '27.7777777777778',
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_feels_like-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_d_feels_like',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Feels like',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'feels_like',
    'unique_id': 'DD:DD:DD:DD:DD:DD_feelsLike',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_feels_like-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'temperature',
      'friendly_name': 'Station D Feels like',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_d_feels_like',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '29.4444444444444',
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_hourly_rain-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_d_hourly_rain',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR: 'mm/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRECIPITATION_INTENSITY: 'precipitation_intensity'>,
    'original_icon': None,
    'original_name': 'Hourly rain',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'hourly_rain',
    'unique_id': 'DD:DD:DD:DD:DD:DD_hourlyrainin',
    'unit_of_measurement': <UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR: 'mm/h'>,
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_hourly_rain-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'precipitation_intensity',
      'friendly_name': 'Station D Hourly rain',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR: 'mm/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_d_hourly_rain',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_humidity-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_d_humidity',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.HUMIDITY: 'humidity'>,
    'original_icon': None,
    'original_name': 'Humidity',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'DD:DD:DD:DD:DD:DD_humidity',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_humidity-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'humidity',
      'friendly_name': 'Station D Humidity',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_d_humidity',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '60',
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_irradiance-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_d_irradiance',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.IRRADIANCE: 'irradiance'>,
    'original_icon': None,
    'original_name': 'Irradiance',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'DD:DD:DD:DD:DD:DD_solarradiation',
    'unit_of_measurement': <UnitOfIrradiance.WATTS_PER_SQUARE_METER: 'W/m짼'>,
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_irradiance-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'irradiance',
      'friendly_name': 'Station D Irradiance',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfIrradiance.WATTS_PER_SQUARE_METER: 'W/m짼'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_d_irradiance',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '37.64',
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_max_daily_gust-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_d_max_daily_gust',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WIND_SPEED: 'wind_speed'>,
    'original_icon': None,
    'original_name': 'Max daily gust',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'max_daily_gust',
    'unique_id': 'DD:DD:DD:DD:DD:DD_maxdailygust',
    'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_max_daily_gust-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'wind_speed',
      'friendly_name': 'Station D Max daily gust',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_d_max_daily_gust',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '36.72523008',
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_monthly_rain-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL: 'total'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_d_monthly_rain',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRECIPITATION: 'precipitation'>,
    'original_icon': None,
    'original_name': 'Monthly rain',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'monthly_rain',
    'unique_id': 'DD:DD:DD:DD:DD:DD_monthlyrainin',
    'unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_monthly_rain-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'precipitation',
      'friendly_name': 'Station D Monthly rain',
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_d_monthly_rain',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_relative_pressure-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_d_relative_pressure',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Relative pressure',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'relative_pressure',
    'unique_id': 'DD:DD:DD:DD:DD:DD_baromrelin',
    'unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_relative_pressure-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'pressure',
      'friendly_name': 'Station D Relative pressure',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.HPA: 'hPa'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_d_relative_pressure',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1001.89694313129',
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_d_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'DD:DD:DD:DD:DD:DD_tempf',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'temperature',
      'friendly_name': 'Station D Temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '째C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_d_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '28.2777777777778',
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_uv_index-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_d_uv_index',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'UV index',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'uv_index',
    'unique_id': 'DD:DD:DD:DD:DD:DD_uv',
    'unit_of_measurement': 'index',
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_uv_index-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'friendly_name': 'Station D UV index',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': 'index',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_d_uv_index',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_weekly_rain-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL: 'total'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_d_weekly_rain',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRECIPITATION: 'precipitation'>,
    'original_icon': None,
    'original_name': 'Weekly rain',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'weekly_rain',
    'unique_id': 'DD:DD:DD:DD:DD:DD_weeklyrainin',
    'unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_weekly_rain-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'precipitation',
      'friendly_name': 'Station D Weekly rain',
      'state_class': <SensorStateClass.TOTAL: 'total'>,
      'unit_of_measurement': <UnitOfLength.MILLIMETERS: 'mm'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_d_weekly_rain',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_wind_direction-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_d_wind_direction',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Wind direction',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wind_direction',
    'unique_id': 'DD:DD:DD:DD:DD:DD_winddir',
    'unit_of_measurement': '째',
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_wind_direction-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'friendly_name': 'Station D Wind direction',
      'unit_of_measurement': '째',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_d_wind_direction',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '11',
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_wind_gust-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_d_wind_gust',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WIND_SPEED: 'wind_speed'>,
    'original_icon': None,
    'original_name': 'Wind gust',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wind_gust',
    'unique_id': 'DD:DD:DD:DD:DD:DD_windgustmph',
    'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_wind_gust-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'wind_speed',
      'friendly_name': 'Station D Wind gust',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_d_wind_gust',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '14.75768448',
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_wind_speed-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.station_d_wind_speed',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.WIND_SPEED: 'wind_speed'>,
    'original_icon': None,
    'original_name': 'Wind speed',
    'platform': 'ambient_network',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': None,
    'unique_id': 'DD:DD:DD:DD:DD:DD_windspeedmph',
    'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
  })
# ---
# name: test_sensors[DD:DD:DD:DD:DD:DD][sensor.station_d_wind_speed-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'attribution': 'Data provided by ambientnetwork.net',
      'device_class': 'wind_speed',
      'friendly_name': 'Station D Wind speed',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.station_d_wind_speed',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '14.03347968',
  })
# ---
