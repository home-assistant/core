# serializer version: 1
# name: test_climate[climate.test_cabin_overheat_protection-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'hvac_modes': list([
        <HVACMode.OFF: 'off'>,
        <HVACMode.COOL: 'cool'>,
        <HVACMode.FAN_ONLY: 'fan_only'>,
      ]),
      'max_temp': 40,
      'min_temp': 30,
      'target_temp_step': 5,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'climate',
    'entity_category': None,
    'entity_id': 'climate.test_cabin_overheat_protection',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Cabin overheat protection',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': <ClimateEntityFeature: 385>,
    'translation_key': 'climate_state_cabin_overheat_protection',
    'unique_id': 'LRWXF7EK4KC700000-climate_state_cabin_overheat_protection',
    'unit_of_measurement': None,
  })
# ---
# name: test_climate[climate.test_cabin_overheat_protection-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'current_temperature': 30,
      'friendly_name': 'Test Cabin overheat protection',
      'hvac_modes': list([
        <HVACMode.OFF: 'off'>,
        <HVACMode.COOL: 'cool'>,
        <HVACMode.FAN_ONLY: 'fan_only'>,
      ]),
      'max_temp': 40,
      'min_temp': 30,
      'supported_features': <ClimateEntityFeature: 385>,
      'target_temp_step': 5,
      'temperature': 40,
    }),
    'context': <ANY>,
    'entity_id': 'climate.test_cabin_overheat_protection',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'cool',
  })
# ---
# name: test_climate[climate.test_climate-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'hvac_modes': list([
        <HVACMode.HEAT_COOL: 'heat_cool'>,
        <HVACMode.OFF: 'off'>,
      ]),
      'max_temp': 28.0,
      'min_temp': 15.0,
      'preset_modes': list([
        'off',
        'keep',
        'dog',
        'camp',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'climate',
    'entity_category': None,
    'entity_id': 'climate.test_climate',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Climate',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': <ClimateEntityFeature: 401>,
    'translation_key': <TeslemetryClimateSide.DRIVER: 'driver_temp'>,
    'unique_id': 'LRWXF7EK4KC700000-driver_temp',
    'unit_of_measurement': None,
  })
# ---
# name: test_climate[climate.test_climate-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'current_temperature': 30.0,
      'friendly_name': 'Test Climate',
      'hvac_modes': list([
        <HVACMode.HEAT_COOL: 'heat_cool'>,
        <HVACMode.OFF: 'off'>,
      ]),
      'max_temp': 28.0,
      'min_temp': 15.0,
      'preset_mode': 'keep',
      'preset_modes': list([
        'off',
        'keep',
        'dog',
        'camp',
      ]),
      'supported_features': <ClimateEntityFeature: 401>,
      'temperature': 22.0,
    }),
    'context': <ANY>,
    'entity_id': 'climate.test_climate',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'heat_cool',
  })
# ---
# name: test_climate_alt[climate.test_cabin_overheat_protection-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'hvac_modes': list([
        <HVACMode.OFF: 'off'>,
        <HVACMode.COOL: 'cool'>,
        <HVACMode.FAN_ONLY: 'fan_only'>,
      ]),
      'max_temp': 40,
      'min_temp': 30,
      'target_temp_step': 5,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'climate',
    'entity_category': None,
    'entity_id': 'climate.test_cabin_overheat_protection',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Cabin overheat protection',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': <ClimateEntityFeature: 384>,
    'translation_key': 'climate_state_cabin_overheat_protection',
    'unique_id': 'LRWXF7EK4KC700000-climate_state_cabin_overheat_protection',
    'unit_of_measurement': None,
  })
# ---
# name: test_climate_alt[climate.test_cabin_overheat_protection-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'current_temperature': 30,
      'friendly_name': 'Test Cabin overheat protection',
      'hvac_modes': list([
        <HVACMode.OFF: 'off'>,
        <HVACMode.COOL: 'cool'>,
        <HVACMode.FAN_ONLY: 'fan_only'>,
      ]),
      'max_temp': 40,
      'min_temp': 30,
      'supported_features': <ClimateEntityFeature: 384>,
      'target_temp_step': 5,
    }),
    'context': <ANY>,
    'entity_id': 'climate.test_cabin_overheat_protection',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_climate_alt[climate.test_climate-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'hvac_modes': list([
        <HVACMode.HEAT_COOL: 'heat_cool'>,
        <HVACMode.OFF: 'off'>,
      ]),
      'max_temp': 28.0,
      'min_temp': 15.0,
      'preset_modes': list([
        'off',
        'keep',
        'dog',
        'camp',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'climate',
    'entity_category': None,
    'entity_id': 'climate.test_climate',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Climate',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': <ClimateEntityFeature: 401>,
    'translation_key': <TeslemetryClimateSide.DRIVER: 'driver_temp'>,
    'unique_id': 'LRWXF7EK4KC700000-driver_temp',
    'unit_of_measurement': None,
  })
# ---
# name: test_climate_alt[climate.test_climate-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'current_temperature': 30.0,
      'friendly_name': 'Test Climate',
      'hvac_modes': list([
        <HVACMode.HEAT_COOL: 'heat_cool'>,
        <HVACMode.OFF: 'off'>,
      ]),
      'max_temp': 28.0,
      'min_temp': 15.0,
      'preset_mode': 'off',
      'preset_modes': list([
        'off',
        'keep',
        'dog',
        'camp',
      ]),
      'supported_features': <ClimateEntityFeature: 401>,
      'temperature': 22.0,
    }),
    'context': <ANY>,
    'entity_id': 'climate.test_climate',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_climate_offline[climate.test_cabin_overheat_protection-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'hvac_modes': list([
        <HVACMode.OFF: 'off'>,
        <HVACMode.COOL: 'cool'>,
        <HVACMode.FAN_ONLY: 'fan_only'>,
      ]),
      'max_temp': 40,
      'min_temp': 30,
      'target_temp_step': 5,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'climate',
    'entity_category': None,
    'entity_id': 'climate.test_cabin_overheat_protection',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Cabin overheat protection',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': <ClimateEntityFeature: 384>,
    'translation_key': 'climate_state_cabin_overheat_protection',
    'unique_id': 'LRWXF7EK4KC700000-climate_state_cabin_overheat_protection',
    'unit_of_measurement': None,
  })
# ---
# name: test_climate_offline[climate.test_cabin_overheat_protection-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'current_temperature': None,
      'friendly_name': 'Test Cabin overheat protection',
      'hvac_modes': list([
        <HVACMode.OFF: 'off'>,
        <HVACMode.COOL: 'cool'>,
        <HVACMode.FAN_ONLY: 'fan_only'>,
      ]),
      'max_temp': 40,
      'min_temp': 30,
      'supported_features': <ClimateEntityFeature: 384>,
      'target_temp_step': 5,
    }),
    'context': <ANY>,
    'entity_id': 'climate.test_cabin_overheat_protection',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_climate_offline[climate.test_climate-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'hvac_modes': list([
        <HVACMode.HEAT_COOL: 'heat_cool'>,
        <HVACMode.OFF: 'off'>,
      ]),
      'max_temp': 28.0,
      'min_temp': 15.0,
      'preset_modes': list([
        'off',
        'keep',
        'dog',
        'camp',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'climate',
    'entity_category': None,
    'entity_id': 'climate.test_climate',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Climate',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': <ClimateEntityFeature: 401>,
    'translation_key': <TeslemetryClimateSide.DRIVER: 'driver_temp'>,
    'unique_id': 'LRWXF7EK4KC700000-driver_temp',
    'unit_of_measurement': None,
  })
# ---
# name: test_climate_offline[climate.test_climate-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'current_temperature': None,
      'friendly_name': 'Test Climate',
      'hvac_modes': list([
        <HVACMode.HEAT_COOL: 'heat_cool'>,
        <HVACMode.OFF: 'off'>,
      ]),
      'max_temp': 28.0,
      'min_temp': 15.0,
      'preset_mode': None,
      'preset_modes': list([
        'off',
        'keep',
        'dog',
        'camp',
      ]),
      'supported_features': <ClimateEntityFeature: 401>,
      'temperature': None,
    }),
    'context': <ANY>,
    'entity_id': 'climate.test_climate',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
