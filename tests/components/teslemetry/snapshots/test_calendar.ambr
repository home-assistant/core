# serializer version: 1
# name: test_calandar[calendar.test_charging_schedule-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'calendar',
    'entity_category': None,
    'entity_id': 'calendar.test_charging_schedule',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Charging schedule',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_schedule_data_charge_schedules',
    'unique_id': 'LRW3F7EK4NC700000-charge_schedule_data_charge_schedules',
    'unit_of_measurement': None,
  })
# ---
# name: test_calandar[calendar.test_charging_schedule-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'all_day': False,
      'description': '-30.222626,-97.6236871',
      'end_time': '2025-04-14 16:00:00',
      'friendly_name': 'Test Charging schedule',
      'location': '-30.222626,-97.6236871',
      'message': 'Charge scheduled for Test',
      'start_time': '2025-04-14 09:00:00',
    }),
    'context': <ANY>,
    'entity_id': 'calendar.test_charging_schedule',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_calandar[calendar.test_precondition_schedule-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'config_subentry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'calendar',
    'entity_category': None,
    'entity_id': 'calendar.test_precondition_schedule',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Precondition schedule',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'preconditioning_schedule_data_precondition_schedules',
    'unique_id': 'LRW3F7EK4NC700000-preconditioning_schedule_data_precondition_schedules',
    'unit_of_measurement': None,
  })
# ---
# name: test_calandar[calendar.test_precondition_schedule-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Precondition schedule',
    }),
    'context': <ANY>,
    'entity_id': 'calendar.test_precondition_schedule',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
