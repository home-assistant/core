# serializer version: 1
# name: test_sensors[sensor.energy_site_battery_charged-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_battery_charged',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Battery charged',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'total_battery_charge',
    'unique_id': '123456-total_battery_charge',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_battery_charged-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Battery charged',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_charged',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.684',
  })
# ---
# name: test_sensors[sensor.energy_site_battery_charged-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Battery charged',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_charged',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.684',
  })
# ---
# name: test_sensors[sensor.energy_site_battery_discharged-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_battery_discharged',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Battery discharged',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'total_battery_discharge',
    'unique_id': '123456-total_battery_discharge',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_battery_discharged-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Battery discharged',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_discharged',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.036',
  })
# ---
# name: test_sensors[sensor.energy_site_battery_discharged-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Battery discharged',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_discharged',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.036',
  })
# ---
# name: test_sensors[sensor.energy_site_battery_exported-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_battery_exported',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Battery exported',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'battery_energy_exported',
    'unique_id': '123456-battery_energy_exported',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_battery_exported-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Battery exported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_exported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.036',
  })
# ---
# name: test_sensors[sensor.energy_site_battery_exported-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Battery exported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_exported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.036',
  })
# ---
# name: test_sensors[sensor.energy_site_battery_imported_from_generator-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_battery_imported_from_generator',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Battery imported from generator',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'battery_energy_imported_from_generator',
    'unique_id': '123456-battery_energy_imported_from_generator',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_battery_imported_from_generator-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Battery imported from generator',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_imported_from_generator',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_battery_imported_from_generator-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Battery imported from generator',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_imported_from_generator',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_battery_imported_from_grid-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_battery_imported_from_grid',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Battery imported from grid',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'battery_energy_imported_from_grid',
    'unique_id': '123456-battery_energy_imported_from_grid',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_battery_imported_from_grid-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Battery imported from grid',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_imported_from_grid',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_battery_imported_from_grid-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Battery imported from grid',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_imported_from_grid',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_battery_imported_from_solar-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_battery_imported_from_solar',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Battery imported from solar',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'battery_energy_imported_from_solar',
    'unique_id': '123456-battery_energy_imported_from_solar',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_battery_imported_from_solar-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Battery imported from solar',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_imported_from_solar',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.684',
  })
# ---
# name: test_sensors[sensor.energy_site_battery_imported_from_solar-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Battery imported from solar',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_imported_from_solar',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.684',
  })
# ---
# name: test_sensors[sensor.energy_site_battery_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_battery_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Battery power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'battery_power',
    'unique_id': '123456-battery_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_battery_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Battery power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '5.06',
  })
# ---
# name: test_sensors[sensor.energy_site_battery_power-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Battery power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '5.06',
  })
# ---
# name: test_sensors[sensor.energy_site_consumer_imported_from_battery-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_consumer_imported_from_battery',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Consumer imported from battery',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'consumer_energy_imported_from_battery',
    'unique_id': '123456-consumer_energy_imported_from_battery',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_consumer_imported_from_battery-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Consumer imported from battery',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_consumer_imported_from_battery',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.036',
  })
# ---
# name: test_sensors[sensor.energy_site_consumer_imported_from_battery-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Consumer imported from battery',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_consumer_imported_from_battery',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.036',
  })
# ---
# name: test_sensors[sensor.energy_site_consumer_imported_from_generator-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_consumer_imported_from_generator',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Consumer imported from generator',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'consumer_energy_imported_from_generator',
    'unique_id': '123456-consumer_energy_imported_from_generator',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_consumer_imported_from_generator-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Consumer imported from generator',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_consumer_imported_from_generator',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_consumer_imported_from_generator-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Consumer imported from generator',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_consumer_imported_from_generator',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_consumer_imported_from_grid-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_consumer_imported_from_grid',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Consumer imported from grid',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'consumer_energy_imported_from_grid',
    'unique_id': '123456-consumer_energy_imported_from_grid',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_consumer_imported_from_grid-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Consumer imported from grid',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_consumer_imported_from_grid',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_consumer_imported_from_grid-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Consumer imported from grid',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_consumer_imported_from_grid',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_consumer_imported_from_solar-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_consumer_imported_from_solar',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Consumer imported from solar',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'consumer_energy_imported_from_solar',
    'unique_id': '123456-consumer_energy_imported_from_solar',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_consumer_imported_from_solar-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Consumer imported from solar',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_consumer_imported_from_solar',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.038',
  })
# ---
# name: test_sensors[sensor.energy_site_consumer_imported_from_solar-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Consumer imported from solar',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_consumer_imported_from_solar',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.038',
  })
# ---
# name: test_sensors[sensor.energy_site_energy_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.energy_site_energy_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY_STORAGE: 'energy_storage'>,
    'original_icon': None,
    'original_name': 'Energy left',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'energy_left',
    'unique_id': '123456-energy_left',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_energy_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'Energy Site Energy left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_energy_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '38.8964736842105',
  })
# ---
# name: test_sensors[sensor.energy_site_energy_left-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'Energy Site Energy left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_energy_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '38.8964736842105',
  })
# ---
# name: test_sensors[sensor.energy_site_generator_exported-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_generator_exported',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Generator exported',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'generator_energy_exported',
    'unique_id': '123456-generator_energy_exported',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_generator_exported-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Generator exported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_generator_exported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_generator_exported-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Generator exported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_generator_exported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_generator_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_generator_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Generator power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'generator_power',
    'unique_id': '123456-generator_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_generator_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Generator power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_generator_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_generator_power-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Generator power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_generator_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_exported-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_exported',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Grid exported',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'total_grid_energy_exported',
    'unique_id': '123456-total_grid_energy_exported',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_grid_exported-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid exported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_exported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.002',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_exported-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid exported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_exported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.002',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_exported_from_battery-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_exported_from_battery',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Grid exported from battery',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_energy_exported_from_battery',
    'unique_id': '123456-grid_energy_exported_from_battery',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_grid_exported_from_battery-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid exported from battery',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_exported_from_battery',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_exported_from_battery-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid exported from battery',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_exported_from_battery',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_exported_from_generator-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_exported_from_generator',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Grid exported from generator',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_energy_exported_from_generator',
    'unique_id': '123456-grid_energy_exported_from_generator',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_grid_exported_from_generator-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid exported from generator',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_exported_from_generator',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_exported_from_generator-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid exported from generator',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_exported_from_generator',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_exported_from_solar-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_exported_from_solar',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Grid exported from solar',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_energy_exported_from_solar',
    'unique_id': '123456-grid_energy_exported_from_solar',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_grid_exported_from_solar-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid exported from solar',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_exported_from_solar',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.002',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_exported_from_solar-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid exported from solar',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_exported_from_solar',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.002',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_imported-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_imported',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Grid imported',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_energy_imported',
    'unique_id': '123456-grid_energy_imported',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_grid_imported-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid imported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_imported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_imported-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid imported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_imported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Grid power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_power',
    'unique_id': '123456-grid_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_grid_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Grid power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_power-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Grid power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_services_exported-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_services_exported',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Grid services exported',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_services_energy_exported',
    'unique_id': '123456-grid_services_energy_exported',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_grid_services_exported-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid services exported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_services_exported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_services_exported-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid services exported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_services_exported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_services_imported-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_services_imported',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Grid services imported',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_services_energy_imported',
    'unique_id': '123456-grid_services_energy_imported',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_grid_services_imported-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid services imported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_services_imported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_services_imported-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid services imported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_services_imported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_services_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_services_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Grid services power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_services_power',
    'unique_id': '123456-grid_services_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_grid_services_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Grid services power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_services_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_services_power-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Grid services power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_services_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_home_usage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_home_usage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Home usage',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'total_home_usage',
    'unique_id': '123456-total_home_usage',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_home_usage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Home usage',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_home_usage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.074',
  })
# ---
# name: test_sensors[sensor.energy_site_home_usage-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Home usage',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_home_usage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.074',
  })
# ---
# name: test_sensors[sensor.energy_site_island_status-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'on_grid',
        'off_grid',
        'off_grid_intentional',
        'off_grid_unintentional',
        'island_status_unknown',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_island_status',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Island status',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'island_status',
    'unique_id': '123456-island_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.energy_site_island_status-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Energy Site Island status',
      'options': list([
        'on_grid',
        'off_grid',
        'off_grid_intentional',
        'off_grid_unintentional',
        'island_status_unknown',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_island_status',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on_grid',
  })
# ---
# name: test_sensors[sensor.energy_site_island_status-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Energy Site Island status',
      'options': list([
        'on_grid',
        'off_grid',
        'off_grid_intentional',
        'off_grid_unintentional',
        'island_status_unknown',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_island_status',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on_grid',
  })
# ---
# name: test_sensors[sensor.energy_site_load_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_load_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Load power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'load_power',
    'unique_id': '123456-load_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_load_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Load power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_load_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '6.245',
  })
# ---
# name: test_sensors[sensor.energy_site_load_power-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Load power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_load_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '6.245',
  })
# ---
# name: test_sensors[sensor.energy_site_percentage_charged-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_percentage_charged',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Percentage charged',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'percentage_charged',
    'unique_id': '123456-percentage_charged',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors[sensor.energy_site_percentage_charged-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Energy Site Percentage charged',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_percentage_charged',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '95.5053740373966',
  })
# ---
# name: test_sensors[sensor.energy_site_percentage_charged-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Energy Site Percentage charged',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_percentage_charged',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '95.5053740373966',
  })
# ---
# name: test_sensors[sensor.energy_site_solar_exported-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_solar_exported',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Solar exported',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'solar_energy_exported',
    'unique_id': '123456-solar_energy_exported',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_solar_exported-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Solar exported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_solar_exported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.724',
  })
# ---
# name: test_sensors[sensor.energy_site_solar_exported-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Solar exported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_solar_exported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.724',
  })
# ---
# name: test_sensors[sensor.energy_site_solar_generated-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_solar_generated',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Solar generated',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'total_solar_generation',
    'unique_id': '123456-total_solar_generation',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_solar_generated-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Solar generated',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_solar_generated',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.724',
  })
# ---
# name: test_sensors[sensor.energy_site_solar_generated-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Solar generated',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_solar_generated',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.724',
  })
# ---
# name: test_sensors[sensor.energy_site_solar_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_solar_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Solar power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'solar_power',
    'unique_id': '123456-solar_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_solar_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Solar power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_solar_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1.185',
  })
# ---
# name: test_sensors[sensor.energy_site_solar_power-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Solar power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_solar_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1.185',
  })
# ---
# name: test_sensors[sensor.energy_site_total_pack_energy-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.energy_site_total_pack_energy',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY_STORAGE: 'energy_storage'>,
    'original_icon': None,
    'original_name': 'Total pack energy',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'total_pack_energy',
    'unique_id': '123456-total_pack_energy',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_total_pack_energy-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'Energy Site Total pack energy',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_total_pack_energy',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '40.727',
  })
# ---
# name: test_sensors[sensor.energy_site_total_pack_energy-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'Energy Site Total pack energy',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_total_pack_energy',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '40.727',
  })
# ---
# name: test_sensors[sensor.energy_site_version-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_version',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'version',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'version',
    'unique_id': '123456-version',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.energy_site_version-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Energy Site version',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_version',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '23.44.0 eb113390',
  })
# ---
# name: test_sensors[sensor.energy_site_version-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Energy Site version',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_version',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '23.44.0 eb113390',
  })
# ---
# name: test_sensors[sensor.energy_site_vpp_backup_reserve-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.energy_site_vpp_backup_reserve',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'VPP backup reserve',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vpp_backup_reserve_percent',
    'unique_id': '123456-vpp_backup_reserve_percent',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors[sensor.energy_site_vpp_backup_reserve-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Energy Site VPP backup reserve',
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_vpp_backup_reserve',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.energy_site_vpp_backup_reserve-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Energy Site VPP backup reserve',
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_vpp_backup_reserve',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_battery_level-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_battery_level',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Battery level',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_battery_level',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_battery_level',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors[sensor.test_battery_level-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Test Battery level',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_battery_level',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '77',
  })
# ---
# name: test_sensors[sensor.test_battery_level-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Test Battery level',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_battery_level',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '77',
  })
# ---
# name: test_sensors[sensor.test_battery_range-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_battery_range',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Battery range',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_battery_range',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_battery_range',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_sensors[sensor.test_battery_range-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Battery range',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_battery_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '429.48563328',
  })
# ---
# name: test_sensors[sensor.test_battery_range-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Battery range',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_battery_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '429.48563328',
  })
# ---
# name: test_sensors[sensor.test_charge_cable-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_charge_cable',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Charge cable',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_conn_charge_cable',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_conn_charge_cable',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_charge_cable-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Charge cable',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charge_cable',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'IEC',
  })
# ---
# name: test_sensors[sensor.test_charge_cable-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Charge cable',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charge_cable',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'IEC',
  })
# ---
# name: test_sensors[sensor.test_charge_energy_added-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_charge_energy_added',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Charge energy added',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charge_energy_added',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_charge_energy_added',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.test_charge_energy_added-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Test Charge energy added',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charge_energy_added',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_charge_energy_added-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Test Charge energy added',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charge_energy_added',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_charge_rate-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_charge_rate',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.SPEED: 'speed'>,
    'original_icon': None,
    'original_name': 'Charge rate',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charge_rate',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_charge_rate',
    'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
  })
# ---
# name: test_sensors[sensor.test_charge_rate-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'speed',
      'friendly_name': 'Test Charge rate',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charge_rate',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_charge_rate-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'speed',
      'friendly_name': 'Test Charge rate',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charge_rate',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_charger_current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_charger_current',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.CURRENT: 'current'>,
    'original_icon': None,
    'original_name': 'Charger current',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charger_actual_current',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_charger_actual_current',
    'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
  })
# ---
# name: test_sensors[sensor.test_charger_current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'current',
      'friendly_name': 'Test Charger current',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charger_current',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_charger_current-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'current',
      'friendly_name': 'Test Charger current',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charger_current',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_charger_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_charger_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Charger power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charger_power',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_charger_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.test_charger_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Test Charger power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charger_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_charger_power-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Test Charger power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charger_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_charger_voltage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_charger_voltage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.VOLTAGE: 'voltage'>,
    'original_icon': None,
    'original_name': 'Charger voltage',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charger_voltage',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_charger_voltage',
    'unit_of_measurement': <UnitOfElectricPotential.VOLT: 'V'>,
  })
# ---
# name: test_sensors[sensor.test_charger_voltage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'voltage',
      'friendly_name': 'Test Charger voltage',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfElectricPotential.VOLT: 'V'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charger_voltage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.test_charger_voltage-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'voltage',
      'friendly_name': 'Test Charger voltage',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfElectricPotential.VOLT: 'V'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charger_voltage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.test_charging-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'starting',
        'charging',
        'stopped',
        'complete',
        'disconnected',
        'no_power',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_charging',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Charging',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charging_state',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_charging_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_charging-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Test Charging',
      'options': list([
        'starting',
        'charging',
        'stopped',
        'complete',
        'disconnected',
        'no_power',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charging',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'stopped',
  })
# ---
# name: test_sensors[sensor.test_charging-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Test Charging',
      'options': list([
        'starting',
        'charging',
        'stopped',
        'complete',
        'disconnected',
        'no_power',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charging',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'stopped',
  })
# ---
# name: test_sensors[sensor.test_distance_to_arrival-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_distance_to_arrival',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Distance to arrival',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_miles_to_arrival',
    'unique_id': 'LRW3F7EK4NC700000-drive_state_active_route_miles_to_arrival',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_sensors[sensor.test_distance_to_arrival-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Distance to arrival',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_distance_to_arrival',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.063555',
  })
# ---
# name: test_sensors[sensor.test_distance_to_arrival-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Distance to arrival',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_distance_to_arrival',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_driver_temperature_setting-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_driver_temperature_setting',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Driver temperature setting',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_driver_temp_setting',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_driver_temp_setting',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensors[sensor.test_driver_temperature_setting-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Driver temperature setting',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_driver_temperature_setting',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '22',
  })
# ---
# name: test_sensors[sensor.test_driver_temperature_setting-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Driver temperature setting',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_driver_temperature_setting',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '22',
  })
# ---
# name: test_sensors[sensor.test_estimate_battery_range-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_estimate_battery_range',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Estimate battery range',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_est_battery_range',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_est_battery_range',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_sensors[sensor.test_estimate_battery_range-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Estimate battery range',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_estimate_battery_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '442.63397376',
  })
# ---
# name: test_sensors[sensor.test_estimate_battery_range-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Estimate battery range',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_estimate_battery_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '442.63397376',
  })
# ---
# name: test_sensors[sensor.test_fast_charger_type-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_fast_charger_type',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Fast charger type',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_fast_charger_type',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_fast_charger_type',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_fast_charger_type-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Fast charger type',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_fast_charger_type',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'ACSingleWireCAN',
  })
# ---
# name: test_sensors[sensor.test_fast_charger_type-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Fast charger type',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_fast_charger_type',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'ACSingleWireCAN',
  })
# ---
# name: test_sensors[sensor.test_ideal_battery_range-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_ideal_battery_range',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Ideal battery range',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_ideal_battery_range',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_ideal_battery_range',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_sensors[sensor.test_ideal_battery_range-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Ideal battery range',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_ideal_battery_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '429.48563328',
  })
# ---
# name: test_sensors[sensor.test_ideal_battery_range-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Ideal battery range',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_ideal_battery_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '429.48563328',
  })
# ---
# name: test_sensors[sensor.test_inside_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_inside_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Inside temperature',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_inside_temp',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_inside_temp',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensors[sensor.test_inside_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Inside temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_inside_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '29.8',
  })
# ---
# name: test_sensors[sensor.test_inside_temperature-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Inside temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_inside_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '29.8',
  })
# ---
# name: test_sensors[sensor.test_odometer-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_odometer',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Odometer',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_odometer',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_odometer',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_sensors[sensor.test_odometer-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Odometer',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_odometer',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '10430.189495371',
  })
# ---
# name: test_sensors[sensor.test_odometer-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Odometer',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_odometer',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '10430.189495371',
  })
# ---
# name: test_sensors[sensor.test_outside_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_outside_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Outside temperature',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_outside_temp',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_outside_temp',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensors[sensor.test_outside_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Outside temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_outside_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '30',
  })
# ---
# name: test_sensors[sensor.test_outside_temperature-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Outside temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_outside_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '30',
  })
# ---
# name: test_sensors[sensor.test_passenger_temperature_setting-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_passenger_temperature_setting',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Passenger temperature setting',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_passenger_temp_setting',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_passenger_temp_setting',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensors[sensor.test_passenger_temperature_setting-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Passenger temperature setting',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_passenger_temperature_setting',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '22',
  })
# ---
# name: test_sensors[sensor.test_passenger_temperature_setting-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Passenger temperature setting',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_passenger_temperature_setting',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '22',
  })
# ---
# name: test_sensors[sensor.test_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_power',
    'unique_id': 'LRW3F7EK4NC700000-drive_state_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.test_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Test Power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '-7',
  })
# ---
# name: test_sensors[sensor.test_power-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Test Power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '-7',
  })
# ---
# name: test_sensors[sensor.test_shift_state-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'p',
        'd',
        'r',
        'n',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_shift_state',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Shift state',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_shift_state',
    'unique_id': 'LRW3F7EK4NC700000-drive_state_shift_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_shift_state-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Test Shift state',
      'options': list([
        'p',
        'd',
        'r',
        'n',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_shift_state',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'p',
  })
# ---
# name: test_sensors[sensor.test_shift_state-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Test Shift state',
      'options': list([
        'p',
        'd',
        'r',
        'n',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_shift_state',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'p',
  })
# ---
# name: test_sensors[sensor.test_speed-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_speed',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.SPEED: 'speed'>,
    'original_icon': None,
    'original_name': 'Speed',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_speed',
    'unique_id': 'LRW3F7EK4NC700000-drive_state_speed',
    'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
  })
# ---
# name: test_sensors[sensor.test_speed-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'speed',
      'friendly_name': 'Test Speed',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_speed',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_sensors[sensor.test_speed-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'speed',
      'friendly_name': 'Test Speed',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_speed',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_sensors[sensor.test_state_of_charge_at_arrival-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_state_of_charge_at_arrival',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'State of charge at arrival',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_energy_at_arrival',
    'unique_id': 'LRW3F7EK4NC700000-drive_state_active_route_energy_at_arrival',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors[sensor.test_state_of_charge_at_arrival-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Test State of charge at arrival',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_state_of_charge_at_arrival',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_sensors[sensor.test_state_of_charge_at_arrival-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Test State of charge at arrival',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_state_of_charge_at_arrival',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_sensors[sensor.test_time_to_arrival-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_time_to_arrival',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Time to arrival',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_minutes_to_arrival',
    'unique_id': 'LRW3F7EK4NC700000-drive_state_active_route_minutes_to_arrival',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_time_to_arrival-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'timestamp',
      'friendly_name': 'Test Time to arrival',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_time_to_arrival',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2024-01-01T00:00:06+00:00',
  })
# ---
# name: test_sensors[sensor.test_time_to_arrival-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'timestamp',
      'friendly_name': 'Test Time to arrival',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_time_to_arrival',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_sensors[sensor.test_time_to_full_charge-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_time_to_full_charge',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Time to full charge',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_minutes_to_full_charge',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_minutes_to_full_charge',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_time_to_full_charge-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'timestamp',
      'friendly_name': 'Test Time to full charge',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_time_to_full_charge',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_sensors[sensor.test_time_to_full_charge-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'timestamp',
      'friendly_name': 'Test Time to full charge',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_time_to_full_charge',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_front_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_tire_pressure_front_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Tire pressure front left',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_fl',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_tpms_pressure_fl',
    'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_front_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Tire pressure front left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_front_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '40.2479739314961',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_front_left-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Tire pressure front left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_front_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '40.2479739314961',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_front_right-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_tire_pressure_front_right',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Tire pressure front right',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_fr',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_tpms_pressure_fr',
    'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_front_right-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Tire pressure front right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_front_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '40.6105682912393',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_front_right-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Tire pressure front right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_front_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '40.6105682912393',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_rear_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_tire_pressure_rear_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Tire pressure rear left',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_rl',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_tpms_pressure_rl',
    'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_rear_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Tire pressure rear left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_rear_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '40.2479739314961',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_rear_left-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Tire pressure rear left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_rear_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '40.2479739314961',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_rear_right-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_tire_pressure_rear_right',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Tire pressure rear right',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_rr',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_tpms_pressure_rr',
    'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_rear_right-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Tire pressure rear right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_rear_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '40.2479739314961',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_rear_right-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Tire pressure rear right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_rear_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '40.2479739314961',
  })
# ---
# name: test_sensors[sensor.test_traffic_delay-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_traffic_delay',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Traffic delay',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_traffic_minutes_delay',
    'unique_id': 'LRW3F7EK4NC700000-drive_state_active_route_traffic_minutes_delay',
    'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
  })
# ---
# name: test_sensors[sensor.test_traffic_delay-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'Test Traffic delay',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_traffic_delay',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_traffic_delay-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'Test Traffic delay',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_traffic_delay',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_usable_battery_level-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_usable_battery_level',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Usable battery level',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_usable_battery_level',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_usable_battery_level',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors[sensor.test_usable_battery_level-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Test Usable battery level',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_usable_battery_level',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '77',
  })
# ---
# name: test_sensors[sensor.test_usable_battery_level-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Test Usable battery level',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_usable_battery_level',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '77',
  })
# ---
# name: test_sensors[sensor.wall_connector_fault_state_code-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_fault_state_code',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Fault state code',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_fault_state',
    'unique_id': '123456-abd-123-wall_connector_fault_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_fault_state_code-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Fault state code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_fault_state_code',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_fault_state_code-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Fault state code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_fault_state_code',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_fault_state_code_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_fault_state_code_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Fault state code',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_fault_state',
    'unique_id': '123456-bcd-234-wall_connector_fault_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_fault_state_code_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Fault state code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_fault_state_code_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_fault_state_code_2-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Fault state code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_fault_state_code_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.wall_connector_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_power',
    'unique_id': '123456-abd-123-wall_connector_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.wall_connector_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Wall Connector Power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.wall_connector_power-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Wall Connector Power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.wall_connector_power_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.wall_connector_power_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_power',
    'unique_id': '123456-bcd-234-wall_connector_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.wall_connector_power_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Wall Connector Power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_power_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.wall_connector_power_2-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Wall Connector Power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_power_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.wall_connector_state_code-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_state_code',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'State code',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_state',
    'unique_id': '123456-abd-123-wall_connector_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_state_code-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector State code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_state_code',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_state_code-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector State code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_state_code',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_state_code_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_state_code_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'State code',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_state',
    'unique_id': '123456-bcd-234-wall_connector_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_state_code_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector State code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_state_code_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_state_code_2-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector State code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_state_code_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_vehicle-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.wall_connector_vehicle',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Vehicle',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vin',
    'unique_id': '123456-abd-123-vin',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_vehicle-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Vehicle',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_vehicle',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.wall_connector_vehicle-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Vehicle',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_vehicle',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.wall_connector_vehicle_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.wall_connector_vehicle_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Vehicle',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vin',
    'unique_id': '123456-bcd-234-vin',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_vehicle_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Vehicle',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_vehicle_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.wall_connector_vehicle_2-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Vehicle',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_vehicle_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[binary_sensor.energy_site_backup_capable-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': None,
    'entity_id': 'binary_sensor.energy_site_backup_capable',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Backup capable',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'backup_capable',
    'unique_id': '123456-backup_capable',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.energy_site_backup_capable-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Energy Site Backup capable',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.energy_site_backup_capable',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on',
  })
# ---
# name: test_sensors_streaming[binary_sensor.energy_site_grid_services_active-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': None,
    'entity_id': 'binary_sensor.energy_site_grid_services_active',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Grid services active',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_services_active',
    'unique_id': '123456-grid_services_active',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.energy_site_grid_services_active-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Energy Site Grid services active',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.energy_site_grid_services_active',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.energy_site_grid_services_enabled-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': None,
    'entity_id': 'binary_sensor.energy_site_grid_services_enabled',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Grid services enabled',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'components_grid_services_enabled',
    'unique_id': '123456-components_grid_services_enabled',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.energy_site_grid_services_enabled-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Energy Site Grid services enabled',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.energy_site_grid_services_enabled',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.energy_site_storm_watch_active-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': None,
    'entity_id': 'binary_sensor.energy_site_storm_watch_active',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Storm watch active',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'storm_mode_active',
    'unique_id': '123456-storm_mode_active',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.energy_site_storm_watch_active-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Energy Site Storm watch active',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.energy_site_storm_watch_active',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_battery_heater-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_battery_heater',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.HEAT: 'heat'>,
    'original_icon': None,
    'original_name': 'Battery heater',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_battery_heater_on',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_battery_heater_on',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_battery_heater-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'heat',
      'friendly_name': 'Test Battery heater',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_battery_heater',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_cabin_overheat_protection_actively_cooling-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_cabin_overheat_protection_actively_cooling',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.HEAT: 'heat'>,
    'original_icon': None,
    'original_name': 'Cabin overheat protection actively cooling',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_cabin_overheat_protection_actively_cooling',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_cabin_overheat_protection_actively_cooling',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_cabin_overheat_protection_actively_cooling-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'heat',
      'friendly_name': 'Test Cabin overheat protection actively cooling',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_cabin_overheat_protection_actively_cooling',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_charge_cable-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_charge_cable',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.CONNECTIVITY: 'connectivity'>,
    'original_icon': None,
    'original_name': 'Charge cable',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_conn_charge_cable',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_conn_charge_cable',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_charge_cable-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'connectivity',
      'friendly_name': 'Test Charge cable',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_charge_cable',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_charger_has_multiple_phases-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': None,
    'entity_id': 'binary_sensor.test_charger_has_multiple_phases',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Charger has multiple phases',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charger_phases',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_charger_phases',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_charger_has_multiple_phases-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Charger has multiple phases',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_charger_has_multiple_phases',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_dashcam-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_dashcam',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.RUNNING: 'running'>,
    'original_icon': None,
    'original_name': 'Dashcam',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_dashcam_state',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_dashcam_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_dashcam-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'running',
      'friendly_name': 'Test Dashcam',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_dashcam',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_front_driver_door-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_front_driver_door',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.DOOR: 'door'>,
    'original_icon': None,
    'original_name': 'Front driver door',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_df',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_df',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_front_driver_door-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'door',
      'friendly_name': 'Test Front driver door',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_front_driver_door',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_front_driver_window-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_front_driver_window',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.WINDOW: 'window'>,
    'original_icon': None,
    'original_name': 'Front driver window',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_fd_window',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_fd_window',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_front_driver_window-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'window',
      'friendly_name': 'Test Front driver window',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_front_driver_window',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_front_passenger_door-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_front_passenger_door',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.DOOR: 'door'>,
    'original_icon': None,
    'original_name': 'Front passenger door',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_pf',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_pf',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_front_passenger_door-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'door',
      'friendly_name': 'Test Front passenger door',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_front_passenger_door',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_front_passenger_window-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_front_passenger_window',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.WINDOW: 'window'>,
    'original_icon': None,
    'original_name': 'Front passenger window',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_fp_window',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_fp_window',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_front_passenger_window-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'window',
      'friendly_name': 'Test Front passenger window',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_front_passenger_window',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_preconditioning-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_preconditioning',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Preconditioning',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_is_preconditioning',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_is_preconditioning',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_preconditioning-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Preconditioning',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_preconditioning',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_preconditioning_enabled-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_preconditioning_enabled',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Preconditioning enabled',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_preconditioning_enabled',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_preconditioning_enabled',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_preconditioning_enabled-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Preconditioning enabled',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_preconditioning_enabled',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_rear_driver_door-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_rear_driver_door',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.DOOR: 'door'>,
    'original_icon': None,
    'original_name': 'Rear driver door',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_dr',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_dr',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_rear_driver_door-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'door',
      'friendly_name': 'Test Rear driver door',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_rear_driver_door',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_rear_driver_window-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_rear_driver_window',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.WINDOW: 'window'>,
    'original_icon': None,
    'original_name': 'Rear driver window',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_rd_window',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_rd_window',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_rear_driver_window-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'window',
      'friendly_name': 'Test Rear driver window',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_rear_driver_window',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_rear_passenger_door-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_rear_passenger_door',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.DOOR: 'door'>,
    'original_icon': None,
    'original_name': 'Rear passenger door',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_pr',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_pr',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_rear_passenger_door-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'door',
      'friendly_name': 'Test Rear passenger door',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_rear_passenger_door',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_rear_passenger_window-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_rear_passenger_window',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.WINDOW: 'window'>,
    'original_icon': None,
    'original_name': 'Rear passenger window',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_rp_window',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_rp_window',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_rear_passenger_window-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'window',
      'friendly_name': 'Test Rear passenger window',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_rear_passenger_window',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_scheduled_charging_pending-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_scheduled_charging_pending',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Scheduled charging pending',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_scheduled_charging_pending',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_scheduled_charging_pending',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_scheduled_charging_pending-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Scheduled charging pending',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_scheduled_charging_pending',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_status-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': None,
    'entity_id': 'binary_sensor.test_status',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.CONNECTIVITY: 'connectivity'>,
    'original_icon': None,
    'original_name': 'Status',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'state',
    'unique_id': 'LRW3F7EK4NC700000-state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_status-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'connectivity',
      'friendly_name': 'Test Status',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_status',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_tire_pressure_warning_front_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_tire_pressure_warning_front_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.PROBLEM: 'problem'>,
    'original_icon': None,
    'original_name': 'Tire pressure warning front left',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_soft_warning_fl',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_tpms_soft_warning_fl',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_tire_pressure_warning_front_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'problem',
      'friendly_name': 'Test Tire pressure warning front left',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_tire_pressure_warning_front_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_tire_pressure_warning_front_right-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_tire_pressure_warning_front_right',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.PROBLEM: 'problem'>,
    'original_icon': None,
    'original_name': 'Tire pressure warning front right',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_soft_warning_fr',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_tpms_soft_warning_fr',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_tire_pressure_warning_front_right-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'problem',
      'friendly_name': 'Test Tire pressure warning front right',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_tire_pressure_warning_front_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_tire_pressure_warning_rear_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_tire_pressure_warning_rear_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.PROBLEM: 'problem'>,
    'original_icon': None,
    'original_name': 'Tire pressure warning rear left',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_soft_warning_rl',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_tpms_soft_warning_rl',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_tire_pressure_warning_rear_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'problem',
      'friendly_name': 'Test Tire pressure warning rear left',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_tire_pressure_warning_rear_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_tire_pressure_warning_rear_right-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_tire_pressure_warning_rear_right',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.PROBLEM: 'problem'>,
    'original_icon': None,
    'original_name': 'Tire pressure warning rear right',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_soft_warning_rr',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_tpms_soft_warning_rr',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_tire_pressure_warning_rear_right-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'problem',
      'friendly_name': 'Test Tire pressure warning rear right',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_tire_pressure_warning_rear_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_trip_charging-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'binary_sensor.test_trip_charging',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Trip charging',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_trip_charging',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_trip_charging',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_trip_charging-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Trip charging',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_trip_charging',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_user_present-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'binary_sensor',
    'entity_category': None,
    'entity_id': 'binary_sensor.test_user_present',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <BinarySensorDeviceClass.PRESENCE: 'presence'>,
    'original_icon': None,
    'original_name': 'User present',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_is_user_present',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_is_user_present',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[binary_sensor.test_user_present-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'presence',
      'friendly_name': 'Test User present',
    }),
    'context': <ANY>,
    'entity_id': 'binary_sensor.test_user_present',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[button.test_flash_lights-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'button',
    'entity_category': None,
    'entity_id': 'button.test_flash_lights',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Flash lights',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'flash_lights',
    'unique_id': 'LRW3F7EK4NC700000-flash_lights',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[button.test_flash_lights-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Flash lights',
    }),
    'context': <ANY>,
    'entity_id': 'button.test_flash_lights',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[button.test_homelink-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'button',
    'entity_category': None,
    'entity_id': 'button.test_homelink',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Homelink',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'homelink',
    'unique_id': 'LRW3F7EK4NC700000-homelink',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[button.test_homelink-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Homelink',
    }),
    'context': <ANY>,
    'entity_id': 'button.test_homelink',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[button.test_honk_horn-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'button',
    'entity_category': None,
    'entity_id': 'button.test_honk_horn',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Honk horn',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'honk',
    'unique_id': 'LRW3F7EK4NC700000-honk',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[button.test_honk_horn-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Honk horn',
    }),
    'context': <ANY>,
    'entity_id': 'button.test_honk_horn',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[button.test_keyless_driving-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'button',
    'entity_category': None,
    'entity_id': 'button.test_keyless_driving',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Keyless driving',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'enable_keyless_driving',
    'unique_id': 'LRW3F7EK4NC700000-enable_keyless_driving',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[button.test_keyless_driving-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Keyless driving',
    }),
    'context': <ANY>,
    'entity_id': 'button.test_keyless_driving',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[button.test_play_fart-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'button',
    'entity_category': None,
    'entity_id': 'button.test_play_fart',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Play fart',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'boombox',
    'unique_id': 'LRW3F7EK4NC700000-boombox',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[button.test_play_fart-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Play fart',
    }),
    'context': <ANY>,
    'entity_id': 'button.test_play_fart',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[button.test_wake-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'button',
    'entity_category': None,
    'entity_id': 'button.test_wake',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Wake',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wake',
    'unique_id': 'LRW3F7EK4NC700000-wake',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[button.test_wake-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Wake',
    }),
    'context': <ANY>,
    'entity_id': 'button.test_wake',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[climate.test_cabin_overheat_protection-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'hvac_modes': list([
        <HVACMode.OFF: 'off'>,
        <HVACMode.COOL: 'cool'>,
        <HVACMode.FAN_ONLY: 'fan_only'>,
      ]),
      'max_temp': 40,
      'min_temp': 30,
      'target_temp_step': 5,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'climate',
    'entity_category': None,
    'entity_id': 'climate.test_cabin_overheat_protection',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Cabin overheat protection',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': <ClimateEntityFeature: 385>,
    'translation_key': 'climate_state_cabin_overheat_protection',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_cabin_overheat_protection',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[climate.test_cabin_overheat_protection-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'current_temperature': 30,
      'friendly_name': 'Test Cabin overheat protection',
      'hvac_modes': list([
        <HVACMode.OFF: 'off'>,
        <HVACMode.COOL: 'cool'>,
        <HVACMode.FAN_ONLY: 'fan_only'>,
      ]),
      'max_temp': 40,
      'min_temp': 30,
      'supported_features': <ClimateEntityFeature: 385>,
      'target_temp_step': 5,
      'temperature': 40,
    }),
    'context': <ANY>,
    'entity_id': 'climate.test_cabin_overheat_protection',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'cool',
  })
# ---
# name: test_sensors_streaming[climate.test_climate-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'hvac_modes': list([
        <HVACMode.HEAT_COOL: 'heat_cool'>,
        <HVACMode.OFF: 'off'>,
      ]),
      'max_temp': 28.0,
      'min_temp': 15.0,
      'preset_modes': list([
        'off',
        'keep',
        'dog',
        'camp',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'climate',
    'entity_category': None,
    'entity_id': 'climate.test_climate',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Climate',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': <ClimateEntityFeature: 401>,
    'translation_key': <TeslemetryClimateSide.DRIVER: 'driver_temp'>,
    'unique_id': 'LRW3F7EK4NC700000-driver_temp',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[climate.test_climate-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'current_temperature': 30.0,
      'friendly_name': 'Test Climate',
      'hvac_modes': list([
        <HVACMode.HEAT_COOL: 'heat_cool'>,
        <HVACMode.OFF: 'off'>,
      ]),
      'max_temp': 28.0,
      'min_temp': 15.0,
      'preset_mode': 'keep',
      'preset_modes': list([
        'off',
        'keep',
        'dog',
        'camp',
      ]),
      'supported_features': <ClimateEntityFeature: 401>,
      'temperature': 22.0,
    }),
    'context': <ANY>,
    'entity_id': 'climate.test_climate',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'heat_cool',
  })
# ---
# name: test_sensors_streaming[cover.test_charge_port_door-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'cover',
    'entity_category': None,
    'entity_id': 'cover.test_charge_port_door',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <CoverDeviceClass.DOOR: 'door'>,
    'original_icon': None,
    'original_name': 'Charge port door',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': <CoverEntityFeature: 3>,
    'translation_key': 'charge_state_charge_port_door_open',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_charge_port_door_open',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[cover.test_charge_port_door-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'door',
      'friendly_name': 'Test Charge port door',
      'supported_features': <CoverEntityFeature: 3>,
    }),
    'context': <ANY>,
    'entity_id': 'cover.test_charge_port_door',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'open',
  })
# ---
# name: test_sensors_streaming[cover.test_frunk-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'cover',
    'entity_category': None,
    'entity_id': 'cover.test_frunk',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <CoverDeviceClass.DOOR: 'door'>,
    'original_icon': None,
    'original_name': 'Frunk',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': <CoverEntityFeature: 1>,
    'translation_key': 'vehicle_state_ft',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_ft',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[cover.test_frunk-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'door',
      'friendly_name': 'Test Frunk',
      'supported_features': <CoverEntityFeature: 1>,
    }),
    'context': <ANY>,
    'entity_id': 'cover.test_frunk',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'closed',
  })
# ---
# name: test_sensors_streaming[cover.test_sunroof-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'cover',
    'entity_category': None,
    'entity_id': 'cover.test_sunroof',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <CoverDeviceClass.WINDOW: 'window'>,
    'original_icon': None,
    'original_name': 'Sunroof',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': <CoverEntityFeature: 11>,
    'translation_key': 'vehicle_state_sun_roof_state',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_sun_roof_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[cover.test_sunroof-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'window',
      'friendly_name': 'Test Sunroof',
      'supported_features': <CoverEntityFeature: 11>,
    }),
    'context': <ANY>,
    'entity_id': 'cover.test_sunroof',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'open',
  })
# ---
# name: test_sensors_streaming[cover.test_trunk-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'cover',
    'entity_category': None,
    'entity_id': 'cover.test_trunk',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <CoverDeviceClass.DOOR: 'door'>,
    'original_icon': None,
    'original_name': 'Trunk',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': <CoverEntityFeature: 3>,
    'translation_key': 'vehicle_state_rt',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_rt',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[cover.test_trunk-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'door',
      'friendly_name': 'Test Trunk',
      'supported_features': <CoverEntityFeature: 3>,
    }),
    'context': <ANY>,
    'entity_id': 'cover.test_trunk',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'closed',
  })
# ---
# name: test_sensors_streaming[cover.test_windows-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'cover',
    'entity_category': None,
    'entity_id': 'cover.test_windows',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <CoverDeviceClass.WINDOW: 'window'>,
    'original_icon': None,
    'original_name': 'Windows',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': <CoverEntityFeature: 3>,
    'translation_key': 'windows',
    'unique_id': 'LRW3F7EK4NC700000-windows',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[cover.test_windows-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'window',
      'friendly_name': 'Test Windows',
      'supported_features': <CoverEntityFeature: 3>,
    }),
    'context': <ANY>,
    'entity_id': 'cover.test_windows',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'closed',
  })
# ---
# name: test_sensors_streaming[device_tracker.test_location-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'device_tracker',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'device_tracker.test_location',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Location',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'location',
    'unique_id': 'LRW3F7EK4NC700000-location',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[device_tracker.test_location-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Location',
      'gps_accuracy': 0,
      'latitude': -30.222626,
      'longitude': -97.6236871,
      'source_type': <SourceType.GPS: 'gps'>,
    }),
    'context': <ANY>,
    'entity_id': 'device_tracker.test_location',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'not_home',
  })
# ---
# name: test_sensors_streaming[device_tracker.test_route-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'device_tracker',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'device_tracker.test_route',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Route',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'route',
    'unique_id': 'LRW3F7EK4NC700000-route',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[device_tracker.test_route-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Route',
      'gps_accuracy': 0,
      'latitude': 30.2226265,
      'longitude': -97.6236871,
      'source_type': <SourceType.GPS: 'gps'>,
    }),
    'context': <ANY>,
    'entity_id': 'device_tracker.test_route',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'home',
  })
# ---
# name: test_sensors_streaming[lock.test_charge_cable_lock-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'lock',
    'entity_category': None,
    'entity_id': 'lock.test_charge_cable_lock',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Charge cable lock',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charge_port_latch',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_charge_port_latch',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[lock.test_charge_cable_lock-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Charge cable lock',
      'supported_features': <LockEntityFeature: 0>,
    }),
    'context': <ANY>,
    'entity_id': 'lock.test_charge_cable_lock',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'locked',
  })
# ---
# name: test_sensors_streaming[lock.test_lock-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'lock',
    'entity_category': None,
    'entity_id': 'lock.test_lock',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Lock',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_locked',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_locked',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[lock.test_lock-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Lock',
      'supported_features': <LockEntityFeature: 0>,
    }),
    'context': <ANY>,
    'entity_id': 'lock.test_lock',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unlocked',
  })
# ---
# name: test_sensors_streaming[media_player.test_media_player-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'media_player',
    'entity_category': None,
    'entity_id': 'media_player.test_media_player',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <MediaPlayerDeviceClass.SPEAKER: 'speaker'>,
    'original_icon': None,
    'original_name': 'Media player',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': <MediaPlayerEntityFeature: 16437>,
    'translation_key': 'media',
    'unique_id': 'LRW3F7EK4NC700000-media',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[media_player.test_media_player-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'speaker',
      'friendly_name': 'Test Media player',
      'media_album_name': 'Elon Musk',
      'media_artist': 'Walter Isaacson',
      'media_duration': 651.0,
      'media_playlist': 'Elon Musk',
      'media_position': 1.0,
      'media_title': 'Chapter 51: Cybertruck: Tesla, 2018–2019',
      'source': 'Audible',
      'supported_features': <MediaPlayerEntityFeature: 16437>,
      'volume_level': 0.16129355359011466,
    }),
    'context': <ANY>,
    'entity_id': 'media_player.test_media_player',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'playing',
  })
# ---
# name: test_sensors_streaming[number.energy_site_backup_reserve-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'max': 100,
      'min': 0,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'number',
    'entity_category': None,
    'entity_id': 'number.energy_site_backup_reserve',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <NumberDeviceClass.BATTERY: 'battery'>,
    'original_icon': 'mdi:battery-alert',
    'original_name': 'Backup reserve',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'backup_reserve_percent',
    'unique_id': '123456-backup_reserve_percent',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors_streaming[number.energy_site_backup_reserve-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Energy Site Backup reserve',
      'icon': 'mdi:battery-alert',
      'max': 100,
      'min': 0,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'number.energy_site_backup_reserve',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors_streaming[number.energy_site_off_grid_reserve-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'max': 100,
      'min': 0,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'number',
    'entity_category': None,
    'entity_id': 'number.energy_site_off_grid_reserve',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <NumberDeviceClass.BATTERY: 'battery'>,
    'original_icon': 'mdi:battery-unknown',
    'original_name': 'Off grid reserve',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'off_grid_vehicle_charging_reserve_percent',
    'unique_id': '123456-off_grid_vehicle_charging_reserve_percent',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors_streaming[number.energy_site_off_grid_reserve-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Energy Site Off grid reserve',
      'icon': 'mdi:battery-unknown',
      'max': 100,
      'min': 0,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'number.energy_site_off_grid_reserve',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[number.test_charge_current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'max': 16,
      'min': 0,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'number',
    'entity_category': None,
    'entity_id': 'number.test_charge_current',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <NumberDeviceClass.CURRENT: 'current'>,
    'original_icon': None,
    'original_name': 'Charge current',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charge_current_request',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_charge_current_request',
    'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
  })
# ---
# name: test_sensors_streaming[number.test_charge_current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'current',
      'friendly_name': 'Test Charge current',
      'max': 16,
      'min': 0,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
      'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
    }),
    'context': <ANY>,
    'entity_id': 'number.test_charge_current',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '16',
  })
# ---
# name: test_sensors_streaming[number.test_charge_limit-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'max': 100,
      'min': 50,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'number',
    'entity_category': None,
    'entity_id': 'number.test_charge_limit',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <NumberDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Charge limit',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charge_limit_soc',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_charge_limit_soc',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors_streaming[number.test_charge_limit-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Test Charge limit',
      'max': 100,
      'min': 50,
      'mode': <NumberMode.AUTO: 'auto'>,
      'step': 1,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'number.test_charge_limit',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '80',
  })
# ---
# name: test_sensors_streaming[select.energy_site_allow_export-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        <EnergyExportMode.NEVER: 'never'>,
        <EnergyExportMode.BATTERY_OK: 'battery_ok'>,
        <EnergyExportMode.PV_ONLY: 'pv_only'>,
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'select',
    'entity_category': None,
    'entity_id': 'select.energy_site_allow_export',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Allow export',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'components_customer_preferred_export_rule',
    'unique_id': '123456-components_customer_preferred_export_rule',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[select.energy_site_allow_export-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Energy Site Allow export',
      'options': list([
        <EnergyExportMode.NEVER: 'never'>,
        <EnergyExportMode.BATTERY_OK: 'battery_ok'>,
        <EnergyExportMode.PV_ONLY: 'pv_only'>,
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'select.energy_site_allow_export',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'pv_only',
  })
# ---
# name: test_sensors_streaming[select.energy_site_operation_mode-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        <EnergyOperationMode.AUTONOMOUS: 'autonomous'>,
        <EnergyOperationMode.BACKUP: 'backup'>,
        <EnergyOperationMode.SELF_CONSUMPTION: 'self_consumption'>,
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'select',
    'entity_category': None,
    'entity_id': 'select.energy_site_operation_mode',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Operation mode',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'default_real_mode',
    'unique_id': '123456-default_real_mode',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[select.energy_site_operation_mode-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Energy Site Operation mode',
      'options': list([
        <EnergyOperationMode.AUTONOMOUS: 'autonomous'>,
        <EnergyOperationMode.BACKUP: 'backup'>,
        <EnergyOperationMode.SELF_CONSUMPTION: 'self_consumption'>,
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'select.energy_site_operation_mode',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'self_consumption',
  })
# ---
# name: test_sensors_streaming[select.test_seat_heater_front_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'off',
        'low',
        'medium',
        'high',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'select',
    'entity_category': None,
    'entity_id': 'select.test_seat_heater_front_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Seat heater front left',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_seat_heater_left',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_seat_heater_left',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[select.test_seat_heater_front_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Seat heater front left',
      'options': list([
        'off',
        'low',
        'medium',
        'high',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'select.test_seat_heater_front_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[select.test_seat_heater_front_right-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'off',
        'low',
        'medium',
        'high',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'select',
    'entity_category': None,
    'entity_id': 'select.test_seat_heater_front_right',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Seat heater front right',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_seat_heater_right',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_seat_heater_right',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[select.test_seat_heater_front_right-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Seat heater front right',
      'options': list([
        'off',
        'low',
        'medium',
        'high',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'select.test_seat_heater_front_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[select.test_seat_heater_rear_center-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'off',
        'low',
        'medium',
        'high',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'select',
    'entity_category': None,
    'entity_id': 'select.test_seat_heater_rear_center',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Seat heater rear center',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_seat_heater_rear_center',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_seat_heater_rear_center',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[select.test_seat_heater_rear_center-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Seat heater rear center',
      'options': list([
        'off',
        'low',
        'medium',
        'high',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'select.test_seat_heater_rear_center',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[select.test_seat_heater_rear_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'off',
        'low',
        'medium',
        'high',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'select',
    'entity_category': None,
    'entity_id': 'select.test_seat_heater_rear_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Seat heater rear left',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_seat_heater_rear_left',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_seat_heater_rear_left',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[select.test_seat_heater_rear_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Seat heater rear left',
      'options': list([
        'off',
        'low',
        'medium',
        'high',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'select.test_seat_heater_rear_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[select.test_seat_heater_rear_right-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'off',
        'low',
        'medium',
        'high',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'select',
    'entity_category': None,
    'entity_id': 'select.test_seat_heater_rear_right',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Seat heater rear right',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_seat_heater_rear_right',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_seat_heater_rear_right',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[select.test_seat_heater_rear_right-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Seat heater rear right',
      'options': list([
        'off',
        'low',
        'medium',
        'high',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'select.test_seat_heater_rear_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[select.test_seat_heater_third_row_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'off',
        'low',
        'medium',
        'high',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'select',
    'entity_category': None,
    'entity_id': 'select.test_seat_heater_third_row_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Seat heater third row left',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_seat_heater_third_row_left',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_seat_heater_third_row_left',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[select.test_seat_heater_third_row_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Seat heater third row left',
      'options': list([
        'off',
        'low',
        'medium',
        'high',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'select.test_seat_heater_third_row_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_sensors_streaming[select.test_seat_heater_third_row_right-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'off',
        'low',
        'medium',
        'high',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'select',
    'entity_category': None,
    'entity_id': 'select.test_seat_heater_third_row_right',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Seat heater third row right',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_seat_heater_third_row_right',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_seat_heater_third_row_right',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[select.test_seat_heater_third_row_right-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Seat heater third row right',
      'options': list([
        'off',
        'low',
        'medium',
        'high',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'select.test_seat_heater_third_row_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_sensors_streaming[select.test_steering_wheel_heater-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'off',
        'low',
        'high',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'select',
    'entity_category': None,
    'entity_id': 'select.test_steering_wheel_heater',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Steering wheel heater',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_steering_wheel_heat_level',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_steering_wheel_heat_level',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[select.test_steering_wheel_heater-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Steering wheel heater',
      'options': list([
        'off',
        'low',
        'high',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'select.test_steering_wheel_heater',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_battery_charged-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_battery_charged',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Battery charged',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'total_battery_charge',
    'unique_id': '123456-total_battery_charge',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_battery_charged-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Battery charged',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_charged',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.684',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_battery_discharged-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_battery_discharged',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Battery discharged',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'total_battery_discharge',
    'unique_id': '123456-total_battery_discharge',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_battery_discharged-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Battery discharged',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_discharged',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.036',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_battery_exported-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_battery_exported',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Battery exported',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'battery_energy_exported',
    'unique_id': '123456-battery_energy_exported',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_battery_exported-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Battery exported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_exported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.036',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_battery_imported_from_generator-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_battery_imported_from_generator',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Battery imported from generator',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'battery_energy_imported_from_generator',
    'unique_id': '123456-battery_energy_imported_from_generator',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_battery_imported_from_generator-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Battery imported from generator',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_imported_from_generator',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_battery_imported_from_grid-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_battery_imported_from_grid',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Battery imported from grid',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'battery_energy_imported_from_grid',
    'unique_id': '123456-battery_energy_imported_from_grid',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_battery_imported_from_grid-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Battery imported from grid',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_imported_from_grid',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_battery_imported_from_solar-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_battery_imported_from_solar',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Battery imported from solar',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'battery_energy_imported_from_solar',
    'unique_id': '123456-battery_energy_imported_from_solar',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_battery_imported_from_solar-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Battery imported from solar',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_imported_from_solar',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.684',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_battery_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_battery_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Battery power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'battery_power',
    'unique_id': '123456-battery_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_battery_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Battery power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '5.06',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_consumer_imported_from_battery-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_consumer_imported_from_battery',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Consumer imported from battery',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'consumer_energy_imported_from_battery',
    'unique_id': '123456-consumer_energy_imported_from_battery',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_consumer_imported_from_battery-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Consumer imported from battery',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_consumer_imported_from_battery',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.036',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_consumer_imported_from_generator-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_consumer_imported_from_generator',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Consumer imported from generator',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'consumer_energy_imported_from_generator',
    'unique_id': '123456-consumer_energy_imported_from_generator',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_consumer_imported_from_generator-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Consumer imported from generator',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_consumer_imported_from_generator',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_consumer_imported_from_grid-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_consumer_imported_from_grid',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Consumer imported from grid',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'consumer_energy_imported_from_grid',
    'unique_id': '123456-consumer_energy_imported_from_grid',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_consumer_imported_from_grid-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Consumer imported from grid',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_consumer_imported_from_grid',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_consumer_imported_from_solar-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_consumer_imported_from_solar',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Consumer imported from solar',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'consumer_energy_imported_from_solar',
    'unique_id': '123456-consumer_energy_imported_from_solar',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_consumer_imported_from_solar-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Consumer imported from solar',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_consumer_imported_from_solar',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.038',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_energy_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.energy_site_energy_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY_STORAGE: 'energy_storage'>,
    'original_icon': None,
    'original_name': 'Energy left',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'energy_left',
    'unique_id': '123456-energy_left',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_energy_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'Energy Site Energy left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_energy_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '38.8964736842105',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_generator_exported-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_generator_exported',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Generator exported',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'generator_energy_exported',
    'unique_id': '123456-generator_energy_exported',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_generator_exported-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Generator exported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_generator_exported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_generator_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_generator_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Generator power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'generator_power',
    'unique_id': '123456-generator_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_generator_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Generator power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_generator_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_grid_exported-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_exported',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Grid exported',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'total_grid_energy_exported',
    'unique_id': '123456-total_grid_energy_exported',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_grid_exported-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid exported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_exported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.002',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_grid_exported_from_battery-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_exported_from_battery',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Grid exported from battery',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_energy_exported_from_battery',
    'unique_id': '123456-grid_energy_exported_from_battery',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_grid_exported_from_battery-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid exported from battery',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_exported_from_battery',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_grid_exported_from_generator-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_exported_from_generator',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Grid exported from generator',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_energy_exported_from_generator',
    'unique_id': '123456-grid_energy_exported_from_generator',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_grid_exported_from_generator-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid exported from generator',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_exported_from_generator',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_grid_exported_from_solar-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_exported_from_solar',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Grid exported from solar',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_energy_exported_from_solar',
    'unique_id': '123456-grid_energy_exported_from_solar',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_grid_exported_from_solar-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid exported from solar',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_exported_from_solar',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.002',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_grid_imported-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_imported',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Grid imported',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_energy_imported',
    'unique_id': '123456-grid_energy_imported',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_grid_imported-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid imported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_imported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_grid_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Grid power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_power',
    'unique_id': '123456-grid_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_grid_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Grid power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_grid_services_exported-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_services_exported',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Grid services exported',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_services_energy_exported',
    'unique_id': '123456-grid_services_energy_exported',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_grid_services_exported-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid services exported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_services_exported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_grid_services_imported-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_services_imported',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Grid services imported',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_services_energy_imported',
    'unique_id': '123456-grid_services_energy_imported',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_grid_services_imported-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Grid services imported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_services_imported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_grid_services_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_services_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Grid services power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_services_power',
    'unique_id': '123456-grid_services_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_grid_services_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Grid services power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_services_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_home_usage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_home_usage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Home usage',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'total_home_usage',
    'unique_id': '123456-total_home_usage',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_home_usage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Home usage',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_home_usage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.074',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_island_status-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'on_grid',
        'off_grid',
        'off_grid_intentional',
        'off_grid_unintentional',
        'island_status_unknown',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_island_status',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Island status',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'island_status',
    'unique_id': '123456-island_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_island_status-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Energy Site Island status',
      'options': list([
        'on_grid',
        'off_grid',
        'off_grid_intentional',
        'off_grid_unintentional',
        'island_status_unknown',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_island_status',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on_grid',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_load_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_load_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Load power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'load_power',
    'unique_id': '123456-load_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_load_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Load power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_load_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '6.245',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_percentage_charged-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_percentage_charged',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Percentage charged',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'percentage_charged',
    'unique_id': '123456-percentage_charged',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_percentage_charged-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Energy Site Percentage charged',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_percentage_charged',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '95.5053740373966',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_solar_exported-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_solar_exported',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Solar exported',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'solar_energy_exported',
    'unique_id': '123456-solar_energy_exported',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_solar_exported-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Solar exported',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_solar_exported',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.724',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_solar_generated-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_solar_generated',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Solar generated',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'total_solar_generation',
    'unique_id': '123456-total_solar_generation',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_solar_generated-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Energy Site Solar generated',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_solar_generated',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.724',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_solar_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_solar_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Solar power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'solar_power',
    'unique_id': '123456-solar_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_solar_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Solar power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_solar_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1.185',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_total_pack_energy-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.energy_site_total_pack_energy',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY_STORAGE: 'energy_storage'>,
    'original_icon': None,
    'original_name': 'Total pack energy',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'total_pack_energy',
    'unique_id': '123456-total_pack_energy',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_total_pack_energy-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'Energy Site Total pack energy',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_total_pack_energy',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '40.727',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_version-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_version',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'version',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'version',
    'unique_id': '123456-version',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_version-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Energy Site version',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_version',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '23.44.0 eb113390',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_vpp_backup_reserve-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.energy_site_vpp_backup_reserve',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'VPP backup reserve',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vpp_backup_reserve_percent',
    'unique_id': '123456-vpp_backup_reserve_percent',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors_streaming[sensor.energy_site_vpp_backup_reserve-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Energy Site VPP backup reserve',
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_vpp_backup_reserve',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors_streaming[sensor.test_battery_level-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_battery_level',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Battery level',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_battery_level',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_battery_level',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors_streaming[sensor.test_battery_level-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Test Battery level',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_battery_level',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '90',
  })
# ---
# name: test_sensors_streaming[sensor.test_battery_range-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_battery_range',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Battery range',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_battery_range',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_battery_range',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_battery_range-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Battery range',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_battery_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '429.48563328',
  })
# ---
# name: test_sensors_streaming[sensor.test_charge_cable-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_charge_cable',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Charge cable',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_conn_charge_cable',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_conn_charge_cable',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[sensor.test_charge_cable-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Charge cable',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charge_cable',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.test_charge_energy_added-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_charge_energy_added',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Charge energy added',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charge_energy_added',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_charge_energy_added',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_charge_energy_added-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Test Charge energy added',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charge_energy_added',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '10',
  })
# ---
# name: test_sensors_streaming[sensor.test_charge_rate-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_charge_rate',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.SPEED: 'speed'>,
    'original_icon': None,
    'original_name': 'Charge rate',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charge_rate',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_charge_rate',
    'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_charge_rate-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'speed',
      'friendly_name': 'Test Charge rate',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charge_rate',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors_streaming[sensor.test_charger_current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_charger_current',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.CURRENT: 'current'>,
    'original_icon': None,
    'original_name': 'Charger current',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charger_actual_current',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_charger_actual_current',
    'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_charger_current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'current',
      'friendly_name': 'Test Charger current',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charger_current',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.test_charger_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_charger_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Charger power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charger_power',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_charger_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_charger_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Test Charger power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charger_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors_streaming[sensor.test_charger_voltage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_charger_voltage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.VOLTAGE: 'voltage'>,
    'original_icon': None,
    'original_name': 'Charger voltage',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charger_voltage',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_charger_voltage',
    'unit_of_measurement': <UnitOfElectricPotential.VOLT: 'V'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_charger_voltage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'voltage',
      'friendly_name': 'Test Charger voltage',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfElectricPotential.VOLT: 'V'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charger_voltage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors_streaming[sensor.test_charging-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'starting',
        'charging',
        'stopped',
        'complete',
        'disconnected',
        'no_power',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_charging',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Charging',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charging_state',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_charging_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[sensor.test_charging-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Test Charging',
      'options': list([
        'starting',
        'charging',
        'stopped',
        'complete',
        'disconnected',
        'no_power',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charging',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'charging',
  })
# ---
# name: test_sensors_streaming[sensor.test_distance_to_arrival-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_distance_to_arrival',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Distance to arrival',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_miles_to_arrival',
    'unique_id': 'LRW3F7EK4NC700000-drive_state_active_route_miles_to_arrival',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_distance_to_arrival-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Distance to arrival',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_distance_to_arrival',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.test_driver_temperature_setting-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_driver_temperature_setting',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Driver temperature setting',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_driver_temp_setting',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_driver_temp_setting',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_driver_temperature_setting-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Driver temperature setting',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_driver_temperature_setting',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '22',
  })
# ---
# name: test_sensors_streaming[sensor.test_estimate_battery_range-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_estimate_battery_range',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Estimate battery range',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_est_battery_range',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_est_battery_range',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_estimate_battery_range-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Estimate battery range',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_estimate_battery_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.test_fast_charger_type-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_fast_charger_type',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Fast charger type',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_fast_charger_type',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_fast_charger_type',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[sensor.test_fast_charger_type-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Fast charger type',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_fast_charger_type',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.test_ideal_battery_range-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_ideal_battery_range',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Ideal battery range',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_ideal_battery_range',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_ideal_battery_range',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_ideal_battery_range-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Ideal battery range',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_ideal_battery_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.test_inside_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_inside_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Inside temperature',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_inside_temp',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_inside_temp',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_inside_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Inside temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_inside_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.test_odometer-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_odometer',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Odometer',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_odometer',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_odometer',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_odometer-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Odometer',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_odometer',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.test_outside_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_outside_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Outside temperature',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_outside_temp',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_outside_temp',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_outside_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Outside temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_outside_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.test_passenger_temperature_setting-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_passenger_temperature_setting',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Passenger temperature setting',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_passenger_temp_setting',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_passenger_temp_setting',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_passenger_temperature_setting-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Passenger temperature setting',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_passenger_temperature_setting',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '22',
  })
# ---
# name: test_sensors_streaming[sensor.test_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_power',
    'unique_id': 'LRW3F7EK4NC700000-drive_state_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Test Power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '-7',
  })
# ---
# name: test_sensors_streaming[sensor.test_shift_state-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'p',
        'd',
        'r',
        'n',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_shift_state',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': 'Shift state',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_shift_state',
    'unique_id': 'LRW3F7EK4NC700000-drive_state_shift_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[sensor.test_shift_state-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Test Shift state',
      'options': list([
        'p',
        'd',
        'r',
        'n',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_shift_state',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.test_speed-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_speed',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.SPEED: 'speed'>,
    'original_icon': None,
    'original_name': 'Speed',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_speed',
    'unique_id': 'LRW3F7EK4NC700000-drive_state_speed',
    'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_speed-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'speed',
      'friendly_name': 'Test Speed',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_speed',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.test_state_of_charge_at_arrival-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_state_of_charge_at_arrival',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'State of charge at arrival',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_energy_at_arrival',
    'unique_id': 'LRW3F7EK4NC700000-drive_state_active_route_energy_at_arrival',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors_streaming[sensor.test_state_of_charge_at_arrival-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Test State of charge at arrival',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_state_of_charge_at_arrival',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.test_time_to_arrival-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_time_to_arrival',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Time to arrival',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_minutes_to_arrival',
    'unique_id': 'LRW3F7EK4NC700000-drive_state_active_route_minutes_to_arrival',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[sensor.test_time_to_arrival-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'timestamp',
      'friendly_name': 'Test Time to arrival',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_time_to_arrival',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.test_time_to_full_charge-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_time_to_full_charge',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Time to full charge',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_minutes_to_full_charge',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_minutes_to_full_charge',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[sensor.test_time_to_full_charge-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'timestamp',
      'friendly_name': 'Test Time to full charge',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_time_to_full_charge',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.test_tire_pressure_front_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_tire_pressure_front_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Tire pressure front left',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_fl',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_tpms_pressure_fl',
    'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_tire_pressure_front_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Tire pressure front left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_front_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.test_tire_pressure_front_right-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_tire_pressure_front_right',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Tire pressure front right',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_fr',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_tpms_pressure_fr',
    'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_tire_pressure_front_right-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Tire pressure front right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_front_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.test_tire_pressure_rear_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_tire_pressure_rear_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Tire pressure rear left',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_rl',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_tpms_pressure_rl',
    'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_tire_pressure_rear_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Tire pressure rear left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_rear_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.test_tire_pressure_rear_right-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_tire_pressure_rear_right',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Tire pressure rear right',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_rr',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_tpms_pressure_rr',
    'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_tire_pressure_rear_right-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Tire pressure rear right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_rear_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.test_traffic_delay-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_traffic_delay',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Traffic delay',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_traffic_minutes_delay',
    'unique_id': 'LRW3F7EK4NC700000-drive_state_active_route_traffic_minutes_delay',
    'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
  })
# ---
# name: test_sensors_streaming[sensor.test_traffic_delay-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'Test Traffic delay',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_traffic_delay',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.test_usable_battery_level-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_usable_battery_level',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Usable battery level',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_usable_battery_level',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_usable_battery_level',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors_streaming[sensor.test_usable_battery_level-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Test Usable battery level',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_usable_battery_level',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '77',
  })
# ---
# name: test_sensors_streaming[sensor.wall_connector_fault_state_code-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_fault_state_code',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Fault state code',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_fault_state',
    'unique_id': '123456-abd-123-wall_connector_fault_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[sensor.wall_connector_fault_state_code-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Fault state code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_fault_state_code',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors_streaming[sensor.wall_connector_fault_state_code_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_fault_state_code_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Fault state code',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_fault_state',
    'unique_id': '123456-bcd-234-wall_connector_fault_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[sensor.wall_connector_fault_state_code_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Fault state code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_fault_state_code_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors_streaming[sensor.wall_connector_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.wall_connector_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_power',
    'unique_id': '123456-abd-123-wall_connector_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors_streaming[sensor.wall_connector_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Wall Connector Power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors_streaming[sensor.wall_connector_power_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.wall_connector_power_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_power',
    'unique_id': '123456-bcd-234-wall_connector_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors_streaming[sensor.wall_connector_power_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Wall Connector Power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_power_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors_streaming[sensor.wall_connector_state_code-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_state_code',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'State code',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_state',
    'unique_id': '123456-abd-123-wall_connector_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[sensor.wall_connector_state_code-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector State code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_state_code',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors_streaming[sensor.wall_connector_state_code_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_state_code_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'State code',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_state',
    'unique_id': '123456-bcd-234-wall_connector_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[sensor.wall_connector_state_code_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector State code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_state_code_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors_streaming[sensor.wall_connector_vehicle-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.wall_connector_vehicle',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Vehicle',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vin',
    'unique_id': '123456-abd-123-vin',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[sensor.wall_connector_vehicle-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Vehicle',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_vehicle',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[sensor.wall_connector_vehicle_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.wall_connector_vehicle_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Vehicle',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vin',
    'unique_id': '123456-bcd-234-vin',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[sensor.wall_connector_vehicle_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Vehicle',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_vehicle_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors_streaming[switch.energy_site_allow_charging_from_grid-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'switch',
    'entity_category': None,
    'entity_id': 'switch.energy_site_allow_charging_from_grid',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SwitchDeviceClass.SWITCH: 'switch'>,
    'original_icon': None,
    'original_name': 'Allow charging from grid',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'components_disallow_charge_from_grid_with_solar_installed',
    'unique_id': '123456-components_disallow_charge_from_grid_with_solar_installed',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[switch.energy_site_allow_charging_from_grid-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'switch',
      'friendly_name': 'Energy Site Allow charging from grid',
    }),
    'context': <ANY>,
    'entity_id': 'switch.energy_site_allow_charging_from_grid',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[switch.energy_site_storm_watch-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'switch',
    'entity_category': None,
    'entity_id': 'switch.energy_site_storm_watch',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SwitchDeviceClass.SWITCH: 'switch'>,
    'original_icon': None,
    'original_name': 'Storm watch',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'user_settings_storm_mode_enabled',
    'unique_id': '123456-user_settings_storm_mode_enabled',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[switch.energy_site_storm_watch-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'switch',
      'friendly_name': 'Energy Site Storm watch',
    }),
    'context': <ANY>,
    'entity_id': 'switch.energy_site_storm_watch',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on',
  })
# ---
# name: test_sensors_streaming[switch.test_auto_seat_climate_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'switch',
    'entity_category': None,
    'entity_id': 'switch.test_auto_seat_climate_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SwitchDeviceClass.SWITCH: 'switch'>,
    'original_icon': None,
    'original_name': 'Auto seat climate left',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_auto_seat_climate_left',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_auto_seat_climate_left',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[switch.test_auto_seat_climate_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'switch',
      'friendly_name': 'Test Auto seat climate left',
    }),
    'context': <ANY>,
    'entity_id': 'switch.test_auto_seat_climate_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on',
  })
# ---
# name: test_sensors_streaming[switch.test_auto_seat_climate_right-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'switch',
    'entity_category': None,
    'entity_id': 'switch.test_auto_seat_climate_right',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SwitchDeviceClass.SWITCH: 'switch'>,
    'original_icon': None,
    'original_name': 'Auto seat climate right',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_auto_seat_climate_right',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_auto_seat_climate_right',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[switch.test_auto_seat_climate_right-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'switch',
      'friendly_name': 'Test Auto seat climate right',
    }),
    'context': <ANY>,
    'entity_id': 'switch.test_auto_seat_climate_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on',
  })
# ---
# name: test_sensors_streaming[switch.test_auto_steering_wheel_heater-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'switch',
    'entity_category': None,
    'entity_id': 'switch.test_auto_steering_wheel_heater',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SwitchDeviceClass.SWITCH: 'switch'>,
    'original_icon': None,
    'original_name': 'Auto steering wheel heater',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_auto_steering_wheel_heat',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_auto_steering_wheel_heat',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[switch.test_auto_steering_wheel_heater-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'switch',
      'friendly_name': 'Test Auto steering wheel heater',
    }),
    'context': <ANY>,
    'entity_id': 'switch.test_auto_steering_wheel_heater',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[switch.test_charge-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'switch',
    'entity_category': None,
    'entity_id': 'switch.test_charge',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SwitchDeviceClass.SWITCH: 'switch'>,
    'original_icon': None,
    'original_name': 'Charge',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_user_charge_enable_request',
    'unique_id': 'LRW3F7EK4NC700000-charge_state_user_charge_enable_request',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[switch.test_charge-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'switch',
      'friendly_name': 'Test Charge',
    }),
    'context': <ANY>,
    'entity_id': 'switch.test_charge',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on',
  })
# ---
# name: test_sensors_streaming[switch.test_defrost-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'switch',
    'entity_category': None,
    'entity_id': 'switch.test_defrost',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SwitchDeviceClass.SWITCH: 'switch'>,
    'original_icon': None,
    'original_name': 'Defrost',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_defrost_mode',
    'unique_id': 'LRW3F7EK4NC700000-climate_state_defrost_mode',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[switch.test_defrost-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'switch',
      'friendly_name': 'Test Defrost',
    }),
    'context': <ANY>,
    'entity_id': 'switch.test_defrost',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[switch.test_sentry_mode-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'switch',
    'entity_category': None,
    'entity_id': 'switch.test_sentry_mode',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SwitchDeviceClass.SWITCH: 'switch'>,
    'original_icon': None,
    'original_name': 'Sentry mode',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_sentry_mode',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_sentry_mode',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[switch.test_sentry_mode-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'switch',
      'friendly_name': 'Test Sentry mode',
    }),
    'context': <ANY>,
    'entity_id': 'switch.test_sentry_mode',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'off',
  })
# ---
# name: test_sensors_streaming[update.test_update-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'update',
    'entity_category': <EntityCategory.CONFIG: 'config'>,
    'entity_id': 'update.test_update',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Update',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': <UpdateEntityFeature: 5>,
    'translation_key': 'vehicle_state_software_update_status',
    'unique_id': 'LRW3F7EK4NC700000-vehicle_state_software_update_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors_streaming[update.test_update-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'auto_update': False,
      'display_precision': 0,
      'entity_picture': 'https://brands.home-assistant.io/_/teslemetry/icon.png',
      'friendly_name': 'Test Update',
      'in_progress': False,
      'installed_version': '2023.44.30.8',
      'latest_version': '2024.12.0.0',
      'release_summary': None,
      'release_url': None,
      'skipped_version': None,
      'supported_features': <UpdateEntityFeature: 5>,
      'title': None,
      'update_percentage': None,
    }),
    'context': <ANY>,
    'entity_id': 'update.test_update',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on',
  })
# ---
