# serializer version: 1
# name: test_sensor_empty[captur_fuel]
  list([
    DeviceRegistryEntrySnapshot({
      'area_id': None,
      'config_entries': <ANY>,
      'configuration_url': None,
      'connections': set({
      }),
      'disabled_by': None,
      'entry_type': None,
      'hw_version': None,
      'id': <ANY>,
      'identifiers': set({
        tuple(
          'renault',
          'VF1AAAAA555777123',
        ),
      }),
      'is_new': False,
      'labels': set({
      }),
      'manufacturer': 'Renault',
      'model': 'Captur ii',
      'name': 'REG-NUMBER',
      'name_by_user': None,
      'primary_config_entry': <ANY>,
      'serial_number': None,
      'suggested_area': None,
      'sw_version': 'XJB1SU',
      'via_device_id': None,
    }),
  ])
# ---
# name: test_sensor_empty[captur_fuel].1
  list([
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_mileage',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
      'original_icon': None,
      'original_name': 'Mileage',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'mileage',
      'unique_id': 'vf1aaaaa555777123_mileage',
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_fuel_autonomy',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
      'original_icon': None,
      'original_name': 'Fuel autonomy',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'fuel_autonomy',
      'unique_id': 'vf1aaaaa555777123_fuel_autonomy',
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.TOTAL: 'total'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_fuel_quantity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.VOLUME: 'volume'>,
      'original_icon': None,
      'original_name': 'Fuel quantity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'fuel_quantity',
      'unique_id': 'vf1aaaaa555777123_fuel_quantity',
      'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_last_location_activity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
      'original_icon': None,
      'original_name': 'Last location activity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'location_last_activity',
      'unique_id': 'vf1aaaaa555777123_location_last_activity',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_remote_engine_start',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'Remote engine start',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'res_state',
      'unique_id': 'vf1aaaaa555777123_res_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_remote_engine_start_code',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'Remote engine start code',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'res_state_code',
      'unique_id': 'vf1aaaaa555777123_res_state_code',
      'unit_of_measurement': None,
    }),
  ])
# ---
# name: test_sensor_empty[captur_fuel].2
  list([
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'distance',
        'friendly_name': 'REG-NUMBER Mileage',
        'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
        'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_mileage',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'distance',
        'friendly_name': 'REG-NUMBER Fuel autonomy',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_fuel_autonomy',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'volume',
        'friendly_name': 'REG-NUMBER Fuel quantity',
        'state_class': <SensorStateClass.TOTAL: 'total'>,
        'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_fuel_quantity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'timestamp',
        'friendly_name': 'REG-NUMBER Last location activity',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_last_location_activity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER Remote engine start',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_remote_engine_start',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER Remote engine start code',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_remote_engine_start_code',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
  ])
# ---
# name: test_sensor_empty[captur_phev]
  list([
    DeviceRegistryEntrySnapshot({
      'area_id': None,
      'config_entries': <ANY>,
      'configuration_url': None,
      'connections': set({
      }),
      'disabled_by': None,
      'entry_type': None,
      'hw_version': None,
      'id': <ANY>,
      'identifiers': set({
        tuple(
          'renault',
          'VF1AAAAA555777123',
        ),
      }),
      'is_new': False,
      'labels': set({
      }),
      'manufacturer': 'Renault',
      'model': 'Captur ii',
      'name': 'REG-NUMBER',
      'name_by_user': None,
      'primary_config_entry': <ANY>,
      'serial_number': None,
      'suggested_area': None,
      'sw_version': 'XJB1SU',
      'via_device_id': None,
    }),
  ])
# ---
# name: test_sensor_empty[captur_phev].1
  list([
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
      'original_icon': None,
      'original_name': 'Battery',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': None,
      'unique_id': 'vf1aaaaa555777123_battery_level',
      'unit_of_measurement': '%',
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'options': list([
          'not_in_charge',
          'waiting_for_a_planned_charge',
          'charge_ended',
          'waiting_for_current_charge',
          'energy_flap_opened',
          'charge_in_progress',
          'charge_error',
          'unavailable',
        ]),
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_charge_state',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
      'original_icon': None,
      'original_name': 'Charge state',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'charge_state',
      'unique_id': 'vf1aaaaa555777123_charge_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_charging_remaining_time',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
      'original_icon': None,
      'original_name': 'Charging remaining time',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'charging_remaining_time',
      'unique_id': 'vf1aaaaa555777123_charging_remaining_time',
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_admissible_charging_power',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.POWER: 'power'>,
      'original_icon': None,
      'original_name': 'Admissible charging power',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'admissible_charging_power',
      'unique_id': 'vf1aaaaa555777123_charging_power',
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'options': list([
          'unplugged',
          'plugged',
          'plug_error',
          'plug_unknown',
        ]),
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_plug_state',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
      'original_icon': None,
      'original_name': 'Plug state',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'plug_state',
      'unique_id': 'vf1aaaaa555777123_plug_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery_autonomy',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
      'original_icon': None,
      'original_name': 'Battery autonomy',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_autonomy',
      'unique_id': 'vf1aaaaa555777123_battery_autonomy',
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.TOTAL: 'total'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery_available_energy',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
      'original_icon': None,
      'original_name': 'Battery available energy',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_available_energy',
      'unique_id': 'vf1aaaaa555777123_battery_available_energy',
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery_temperature',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
      'original_icon': None,
      'original_name': 'Battery temperature',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_temperature',
      'unique_id': 'vf1aaaaa555777123_battery_temperature',
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_last_battery_activity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
      'original_icon': None,
      'original_name': 'Last battery activity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_last_activity',
      'unique_id': 'vf1aaaaa555777123_battery_last_activity',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_mileage',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
      'original_icon': None,
      'original_name': 'Mileage',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'mileage',
      'unique_id': 'vf1aaaaa555777123_mileage',
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_fuel_autonomy',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
      'original_icon': None,
      'original_name': 'Fuel autonomy',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'fuel_autonomy',
      'unique_id': 'vf1aaaaa555777123_fuel_autonomy',
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.TOTAL: 'total'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_fuel_quantity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.VOLUME: 'volume'>,
      'original_icon': None,
      'original_name': 'Fuel quantity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'fuel_quantity',
      'unique_id': 'vf1aaaaa555777123_fuel_quantity',
      'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_last_location_activity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
      'original_icon': None,
      'original_name': 'Last location activity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'location_last_activity',
      'unique_id': 'vf1aaaaa555777123_location_last_activity',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_remote_engine_start',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'Remote engine start',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'res_state',
      'unique_id': 'vf1aaaaa555777123_res_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_remote_engine_start_code',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'Remote engine start code',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'res_state_code',
      'unique_id': 'vf1aaaaa555777123_res_state_code',
      'unit_of_measurement': None,
    }),
  ])
# ---
# name: test_sensor_empty[captur_phev].2
  list([
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'battery',
        'friendly_name': 'REG-NUMBER Battery',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': '%',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'enum',
        'friendly_name': 'REG-NUMBER Charge state',
        'options': list([
          'not_in_charge',
          'waiting_for_a_planned_charge',
          'charge_ended',
          'waiting_for_current_charge',
          'energy_flap_opened',
          'charge_in_progress',
          'charge_error',
          'unavailable',
        ]),
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_charge_state',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'duration',
        'friendly_name': 'REG-NUMBER Charging remaining time',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_charging_remaining_time',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'power',
        'friendly_name': 'REG-NUMBER Admissible charging power',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_admissible_charging_power',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'enum',
        'friendly_name': 'REG-NUMBER Plug state',
        'options': list([
          'unplugged',
          'plugged',
          'plug_error',
          'plug_unknown',
        ]),
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_plug_state',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'distance',
        'friendly_name': 'REG-NUMBER Battery autonomy',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery_autonomy',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'energy',
        'friendly_name': 'REG-NUMBER Battery available energy',
        'state_class': <SensorStateClass.TOTAL: 'total'>,
        'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery_available_energy',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'temperature',
        'friendly_name': 'REG-NUMBER Battery temperature',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery_temperature',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'timestamp',
        'friendly_name': 'REG-NUMBER Last battery activity',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_last_battery_activity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'distance',
        'friendly_name': 'REG-NUMBER Mileage',
        'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
        'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_mileage',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'distance',
        'friendly_name': 'REG-NUMBER Fuel autonomy',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_fuel_autonomy',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'volume',
        'friendly_name': 'REG-NUMBER Fuel quantity',
        'state_class': <SensorStateClass.TOTAL: 'total'>,
        'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_fuel_quantity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'timestamp',
        'friendly_name': 'REG-NUMBER Last location activity',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_last_location_activity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER Remote engine start',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_remote_engine_start',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER Remote engine start code',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_remote_engine_start_code',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
  ])
# ---
# name: test_sensor_empty[zoe_40]
  list([
    DeviceRegistryEntrySnapshot({
      'area_id': None,
      'config_entries': <ANY>,
      'configuration_url': None,
      'connections': set({
      }),
      'disabled_by': None,
      'entry_type': None,
      'hw_version': None,
      'id': <ANY>,
      'identifiers': set({
        tuple(
          'renault',
          'VF1AAAAA555777999',
        ),
      }),
      'is_new': False,
      'labels': set({
      }),
      'manufacturer': 'Renault',
      'model': 'Zoe',
      'name': 'REG-NUMBER',
      'name_by_user': None,
      'primary_config_entry': <ANY>,
      'serial_number': None,
      'suggested_area': None,
      'sw_version': 'X101VE',
      'via_device_id': None,
    }),
  ])
# ---
# name: test_sensor_empty[zoe_40].1
  list([
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
      'original_icon': None,
      'original_name': 'Battery',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': None,
      'unique_id': 'vf1aaaaa555777999_battery_level',
      'unit_of_measurement': '%',
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'options': list([
          'not_in_charge',
          'waiting_for_a_planned_charge',
          'charge_ended',
          'waiting_for_current_charge',
          'energy_flap_opened',
          'charge_in_progress',
          'charge_error',
          'unavailable',
        ]),
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_charge_state',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
      'original_icon': None,
      'original_name': 'Charge state',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'charge_state',
      'unique_id': 'vf1aaaaa555777999_charge_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_charging_remaining_time',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
      'original_icon': None,
      'original_name': 'Charging remaining time',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'charging_remaining_time',
      'unique_id': 'vf1aaaaa555777999_charging_remaining_time',
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_charging_power',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.POWER: 'power'>,
      'original_icon': None,
      'original_name': 'Charging power',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'charging_power',
      'unique_id': 'vf1aaaaa555777999_charging_power',
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'options': list([
          'unplugged',
          'plugged',
          'plug_error',
          'plug_unknown',
        ]),
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_plug_state',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
      'original_icon': None,
      'original_name': 'Plug state',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'plug_state',
      'unique_id': 'vf1aaaaa555777999_plug_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery_autonomy',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
      'original_icon': None,
      'original_name': 'Battery autonomy',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_autonomy',
      'unique_id': 'vf1aaaaa555777999_battery_autonomy',
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.TOTAL: 'total'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery_available_energy',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
      'original_icon': None,
      'original_name': 'Battery available energy',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_available_energy',
      'unique_id': 'vf1aaaaa555777999_battery_available_energy',
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery_temperature',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
      'original_icon': None,
      'original_name': 'Battery temperature',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_temperature',
      'unique_id': 'vf1aaaaa555777999_battery_temperature',
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_last_battery_activity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
      'original_icon': None,
      'original_name': 'Last battery activity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_last_activity',
      'unique_id': 'vf1aaaaa555777999_battery_last_activity',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_mileage',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
      'original_icon': None,
      'original_name': 'Mileage',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'mileage',
      'unique_id': 'vf1aaaaa555777999_mileage',
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_outside_temperature',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
      'original_icon': None,
      'original_name': 'Outside temperature',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'outside_temperature',
      'unique_id': 'vf1aaaaa555777999_outside_temperature',
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_hvac_soc_threshold',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'HVAC SoC threshold',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'hvac_soc_threshold',
      'unique_id': 'vf1aaaaa555777999_hvac_soc_threshold',
      'unit_of_measurement': '%',
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_last_hvac_activity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
      'original_icon': None,
      'original_name': 'Last HVAC activity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'hvac_last_activity',
      'unique_id': 'vf1aaaaa555777999_hvac_last_activity',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_remote_engine_start',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'Remote engine start',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'res_state',
      'unique_id': 'vf1aaaaa555777999_res_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_remote_engine_start_code',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'Remote engine start code',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'res_state_code',
      'unique_id': 'vf1aaaaa555777999_res_state_code',
      'unit_of_measurement': None,
    }),
  ])
# ---
# name: test_sensor_empty[zoe_40].2
  list([
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'battery',
        'friendly_name': 'REG-NUMBER Battery',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': '%',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'enum',
        'friendly_name': 'REG-NUMBER Charge state',
        'options': list([
          'not_in_charge',
          'waiting_for_a_planned_charge',
          'charge_ended',
          'waiting_for_current_charge',
          'energy_flap_opened',
          'charge_in_progress',
          'charge_error',
          'unavailable',
        ]),
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_charge_state',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'duration',
        'friendly_name': 'REG-NUMBER Charging remaining time',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_charging_remaining_time',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'power',
        'friendly_name': 'REG-NUMBER Charging power',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_charging_power',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'enum',
        'friendly_name': 'REG-NUMBER Plug state',
        'options': list([
          'unplugged',
          'plugged',
          'plug_error',
          'plug_unknown',
        ]),
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_plug_state',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'distance',
        'friendly_name': 'REG-NUMBER Battery autonomy',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery_autonomy',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'energy',
        'friendly_name': 'REG-NUMBER Battery available energy',
        'state_class': <SensorStateClass.TOTAL: 'total'>,
        'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery_available_energy',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'temperature',
        'friendly_name': 'REG-NUMBER Battery temperature',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery_temperature',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'timestamp',
        'friendly_name': 'REG-NUMBER Last battery activity',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_last_battery_activity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'distance',
        'friendly_name': 'REG-NUMBER Mileage',
        'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
        'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_mileage',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'temperature',
        'friendly_name': 'REG-NUMBER Outside temperature',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_outside_temperature',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER HVAC SoC threshold',
        'unit_of_measurement': '%',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_hvac_soc_threshold',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'timestamp',
        'friendly_name': 'REG-NUMBER Last HVAC activity',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_last_hvac_activity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER Remote engine start',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_remote_engine_start',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER Remote engine start code',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_remote_engine_start_code',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
  ])
# ---
# name: test_sensor_empty[zoe_50]
  list([
    DeviceRegistryEntrySnapshot({
      'area_id': None,
      'config_entries': <ANY>,
      'configuration_url': None,
      'connections': set({
      }),
      'disabled_by': None,
      'entry_type': None,
      'hw_version': None,
      'id': <ANY>,
      'identifiers': set({
        tuple(
          'renault',
          'VF1AAAAA555777999',
        ),
      }),
      'is_new': False,
      'labels': set({
      }),
      'manufacturer': 'Renault',
      'model': 'Zoe',
      'name': 'REG-NUMBER',
      'name_by_user': None,
      'primary_config_entry': <ANY>,
      'serial_number': None,
      'suggested_area': None,
      'sw_version': 'X102VE',
      'via_device_id': None,
    }),
  ])
# ---
# name: test_sensor_empty[zoe_50].1
  list([
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
      'original_icon': None,
      'original_name': 'Battery',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': None,
      'unique_id': 'vf1aaaaa555777999_battery_level',
      'unit_of_measurement': '%',
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'options': list([
          'not_in_charge',
          'waiting_for_a_planned_charge',
          'charge_ended',
          'waiting_for_current_charge',
          'energy_flap_opened',
          'charge_in_progress',
          'charge_error',
          'unavailable',
        ]),
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_charge_state',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
      'original_icon': None,
      'original_name': 'Charge state',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'charge_state',
      'unique_id': 'vf1aaaaa555777999_charge_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_charging_remaining_time',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
      'original_icon': None,
      'original_name': 'Charging remaining time',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'charging_remaining_time',
      'unique_id': 'vf1aaaaa555777999_charging_remaining_time',
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_admissible_charging_power',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.POWER: 'power'>,
      'original_icon': None,
      'original_name': 'Admissible charging power',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'admissible_charging_power',
      'unique_id': 'vf1aaaaa555777999_charging_power',
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'options': list([
          'unplugged',
          'plugged',
          'plug_error',
          'plug_unknown',
        ]),
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_plug_state',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
      'original_icon': None,
      'original_name': 'Plug state',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'plug_state',
      'unique_id': 'vf1aaaaa555777999_plug_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery_autonomy',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
      'original_icon': None,
      'original_name': 'Battery autonomy',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_autonomy',
      'unique_id': 'vf1aaaaa555777999_battery_autonomy',
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.TOTAL: 'total'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery_available_energy',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
      'original_icon': None,
      'original_name': 'Battery available energy',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_available_energy',
      'unique_id': 'vf1aaaaa555777999_battery_available_energy',
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery_temperature',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
      'original_icon': None,
      'original_name': 'Battery temperature',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_temperature',
      'unique_id': 'vf1aaaaa555777999_battery_temperature',
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_last_battery_activity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
      'original_icon': None,
      'original_name': 'Last battery activity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_last_activity',
      'unique_id': 'vf1aaaaa555777999_battery_last_activity',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_mileage',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
      'original_icon': None,
      'original_name': 'Mileage',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'mileage',
      'unique_id': 'vf1aaaaa555777999_mileage',
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_outside_temperature',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
      'original_icon': None,
      'original_name': 'Outside temperature',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'outside_temperature',
      'unique_id': 'vf1aaaaa555777999_outside_temperature',
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_hvac_soc_threshold',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'HVAC SoC threshold',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'hvac_soc_threshold',
      'unique_id': 'vf1aaaaa555777999_hvac_soc_threshold',
      'unit_of_measurement': '%',
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_last_hvac_activity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
      'original_icon': None,
      'original_name': 'Last HVAC activity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'hvac_last_activity',
      'unique_id': 'vf1aaaaa555777999_hvac_last_activity',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_last_location_activity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
      'original_icon': None,
      'original_name': 'Last location activity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'location_last_activity',
      'unique_id': 'vf1aaaaa555777999_location_last_activity',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_remote_engine_start',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'Remote engine start',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'res_state',
      'unique_id': 'vf1aaaaa555777999_res_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_remote_engine_start_code',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'Remote engine start code',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'res_state_code',
      'unique_id': 'vf1aaaaa555777999_res_state_code',
      'unit_of_measurement': None,
    }),
  ])
# ---
# name: test_sensor_empty[zoe_50].2
  list([
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'battery',
        'friendly_name': 'REG-NUMBER Battery',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': '%',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'enum',
        'friendly_name': 'REG-NUMBER Charge state',
        'options': list([
          'not_in_charge',
          'waiting_for_a_planned_charge',
          'charge_ended',
          'waiting_for_current_charge',
          'energy_flap_opened',
          'charge_in_progress',
          'charge_error',
          'unavailable',
        ]),
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_charge_state',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'duration',
        'friendly_name': 'REG-NUMBER Charging remaining time',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_charging_remaining_time',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'power',
        'friendly_name': 'REG-NUMBER Admissible charging power',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_admissible_charging_power',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'enum',
        'friendly_name': 'REG-NUMBER Plug state',
        'options': list([
          'unplugged',
          'plugged',
          'plug_error',
          'plug_unknown',
        ]),
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_plug_state',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'distance',
        'friendly_name': 'REG-NUMBER Battery autonomy',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery_autonomy',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'energy',
        'friendly_name': 'REG-NUMBER Battery available energy',
        'state_class': <SensorStateClass.TOTAL: 'total'>,
        'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery_available_energy',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'temperature',
        'friendly_name': 'REG-NUMBER Battery temperature',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery_temperature',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'timestamp',
        'friendly_name': 'REG-NUMBER Last battery activity',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_last_battery_activity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'distance',
        'friendly_name': 'REG-NUMBER Mileage',
        'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
        'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_mileage',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'temperature',
        'friendly_name': 'REG-NUMBER Outside temperature',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_outside_temperature',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER HVAC SoC threshold',
        'unit_of_measurement': '%',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_hvac_soc_threshold',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'timestamp',
        'friendly_name': 'REG-NUMBER Last HVAC activity',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_last_hvac_activity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'timestamp',
        'friendly_name': 'REG-NUMBER Last location activity',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_last_location_activity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER Remote engine start',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_remote_engine_start',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER Remote engine start code',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_remote_engine_start_code',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
  ])
# ---
# name: test_sensors[captur_fuel]
  list([
    DeviceRegistryEntrySnapshot({
      'area_id': None,
      'config_entries': <ANY>,
      'configuration_url': None,
      'connections': set({
      }),
      'disabled_by': None,
      'entry_type': None,
      'hw_version': None,
      'id': <ANY>,
      'identifiers': set({
        tuple(
          'renault',
          'VF1AAAAA555777123',
        ),
      }),
      'is_new': False,
      'labels': set({
      }),
      'manufacturer': 'Renault',
      'model': 'Captur ii',
      'name': 'REG-NUMBER',
      'name_by_user': None,
      'primary_config_entry': <ANY>,
      'serial_number': None,
      'suggested_area': None,
      'sw_version': 'XJB1SU',
      'via_device_id': None,
    }),
  ])
# ---
# name: test_sensors[captur_fuel].1
  list([
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_mileage',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
      'original_icon': None,
      'original_name': 'Mileage',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'mileage',
      'unique_id': 'vf1aaaaa555777123_mileage',
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_fuel_autonomy',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
      'original_icon': None,
      'original_name': 'Fuel autonomy',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'fuel_autonomy',
      'unique_id': 'vf1aaaaa555777123_fuel_autonomy',
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.TOTAL: 'total'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_fuel_quantity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.VOLUME: 'volume'>,
      'original_icon': None,
      'original_name': 'Fuel quantity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'fuel_quantity',
      'unique_id': 'vf1aaaaa555777123_fuel_quantity',
      'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': <RegistryEntryDisabler.INTEGRATION: 'integration'>,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_last_location_activity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
      'original_icon': None,
      'original_name': 'Last location activity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'location_last_activity',
      'unique_id': 'vf1aaaaa555777123_location_last_activity',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_remote_engine_start',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'Remote engine start',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'res_state',
      'unique_id': 'vf1aaaaa555777123_res_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': <RegistryEntryDisabler.INTEGRATION: 'integration'>,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_remote_engine_start_code',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'Remote engine start code',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'res_state_code',
      'unique_id': 'vf1aaaaa555777123_res_state_code',
      'unit_of_measurement': None,
    }),
  ])
# ---
# name: test_sensors[captur_fuel].2
  list([
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'distance',
        'friendly_name': 'REG-NUMBER Mileage',
        'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
        'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_mileage',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '5567',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'distance',
        'friendly_name': 'REG-NUMBER Fuel autonomy',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_fuel_autonomy',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '35',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'volume',
        'friendly_name': 'REG-NUMBER Fuel quantity',
        'state_class': <SensorStateClass.TOTAL: 'total'>,
        'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_fuel_quantity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '3',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'timestamp',
        'friendly_name': 'REG-NUMBER Last location activity',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_last_location_activity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '2020-02-18T16:58:38+00:00',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER Remote engine start',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_remote_engine_start',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'Stopped, ready for RES',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER Remote engine start code',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_remote_engine_start_code',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '10',
    }),
  ])
# ---
# name: test_sensors[captur_phev]
  list([
    DeviceRegistryEntrySnapshot({
      'area_id': None,
      'config_entries': <ANY>,
      'configuration_url': None,
      'connections': set({
      }),
      'disabled_by': None,
      'entry_type': None,
      'hw_version': None,
      'id': <ANY>,
      'identifiers': set({
        tuple(
          'renault',
          'VF1AAAAA555777123',
        ),
      }),
      'is_new': False,
      'labels': set({
      }),
      'manufacturer': 'Renault',
      'model': 'Captur ii',
      'name': 'REG-NUMBER',
      'name_by_user': None,
      'primary_config_entry': <ANY>,
      'serial_number': None,
      'suggested_area': None,
      'sw_version': 'XJB1SU',
      'via_device_id': None,
    }),
  ])
# ---
# name: test_sensors[captur_phev].1
  list([
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
      'original_icon': None,
      'original_name': 'Battery',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': None,
      'unique_id': 'vf1aaaaa555777123_battery_level',
      'unit_of_measurement': '%',
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'options': list([
          'not_in_charge',
          'waiting_for_a_planned_charge',
          'charge_ended',
          'waiting_for_current_charge',
          'energy_flap_opened',
          'charge_in_progress',
          'charge_error',
          'unavailable',
        ]),
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_charge_state',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
      'original_icon': None,
      'original_name': 'Charge state',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'charge_state',
      'unique_id': 'vf1aaaaa555777123_charge_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_charging_remaining_time',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
      'original_icon': None,
      'original_name': 'Charging remaining time',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'charging_remaining_time',
      'unique_id': 'vf1aaaaa555777123_charging_remaining_time',
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_admissible_charging_power',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.POWER: 'power'>,
      'original_icon': None,
      'original_name': 'Admissible charging power',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'admissible_charging_power',
      'unique_id': 'vf1aaaaa555777123_charging_power',
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'options': list([
          'unplugged',
          'plugged',
          'plug_error',
          'plug_unknown',
        ]),
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_plug_state',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
      'original_icon': None,
      'original_name': 'Plug state',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'plug_state',
      'unique_id': 'vf1aaaaa555777123_plug_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery_autonomy',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
      'original_icon': None,
      'original_name': 'Battery autonomy',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_autonomy',
      'unique_id': 'vf1aaaaa555777123_battery_autonomy',
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.TOTAL: 'total'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery_available_energy',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
      'original_icon': None,
      'original_name': 'Battery available energy',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_available_energy',
      'unique_id': 'vf1aaaaa555777123_battery_available_energy',
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery_temperature',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
      'original_icon': None,
      'original_name': 'Battery temperature',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_temperature',
      'unique_id': 'vf1aaaaa555777123_battery_temperature',
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': <RegistryEntryDisabler.INTEGRATION: 'integration'>,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_last_battery_activity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
      'original_icon': None,
      'original_name': 'Last battery activity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_last_activity',
      'unique_id': 'vf1aaaaa555777123_battery_last_activity',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_mileage',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
      'original_icon': None,
      'original_name': 'Mileage',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'mileage',
      'unique_id': 'vf1aaaaa555777123_mileage',
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_fuel_autonomy',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
      'original_icon': None,
      'original_name': 'Fuel autonomy',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'fuel_autonomy',
      'unique_id': 'vf1aaaaa555777123_fuel_autonomy',
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.TOTAL: 'total'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_fuel_quantity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.VOLUME: 'volume'>,
      'original_icon': None,
      'original_name': 'Fuel quantity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'fuel_quantity',
      'unique_id': 'vf1aaaaa555777123_fuel_quantity',
      'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': <RegistryEntryDisabler.INTEGRATION: 'integration'>,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_last_location_activity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
      'original_icon': None,
      'original_name': 'Last location activity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'location_last_activity',
      'unique_id': 'vf1aaaaa555777123_location_last_activity',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_remote_engine_start',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'Remote engine start',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'res_state',
      'unique_id': 'vf1aaaaa555777123_res_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': <RegistryEntryDisabler.INTEGRATION: 'integration'>,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_remote_engine_start_code',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'Remote engine start code',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'res_state_code',
      'unique_id': 'vf1aaaaa555777123_res_state_code',
      'unit_of_measurement': None,
    }),
  ])
# ---
# name: test_sensors[captur_phev].2
  list([
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'battery',
        'friendly_name': 'REG-NUMBER Battery',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': '%',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '60',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'enum',
        'friendly_name': 'REG-NUMBER Charge state',
        'options': list([
          'not_in_charge',
          'waiting_for_a_planned_charge',
          'charge_ended',
          'waiting_for_current_charge',
          'energy_flap_opened',
          'charge_in_progress',
          'charge_error',
          'unavailable',
        ]),
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_charge_state',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'charge_in_progress',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'duration',
        'friendly_name': 'REG-NUMBER Charging remaining time',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_charging_remaining_time',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '145',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'power',
        'friendly_name': 'REG-NUMBER Admissible charging power',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_admissible_charging_power',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '27.0',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'enum',
        'friendly_name': 'REG-NUMBER Plug state',
        'options': list([
          'unplugged',
          'plugged',
          'plug_error',
          'plug_unknown',
        ]),
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_plug_state',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'plugged',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'distance',
        'friendly_name': 'REG-NUMBER Battery autonomy',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery_autonomy',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '141',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'energy',
        'friendly_name': 'REG-NUMBER Battery available energy',
        'state_class': <SensorStateClass.TOTAL: 'total'>,
        'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery_available_energy',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '31',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'temperature',
        'friendly_name': 'REG-NUMBER Battery temperature',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery_temperature',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '20',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'timestamp',
        'friendly_name': 'REG-NUMBER Last battery activity',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_last_battery_activity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '2020-01-12T21:40:16+00:00',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'distance',
        'friendly_name': 'REG-NUMBER Mileage',
        'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
        'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_mileage',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '5567',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'distance',
        'friendly_name': 'REG-NUMBER Fuel autonomy',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_fuel_autonomy',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '35',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'volume',
        'friendly_name': 'REG-NUMBER Fuel quantity',
        'state_class': <SensorStateClass.TOTAL: 'total'>,
        'unit_of_measurement': <UnitOfVolume.LITERS: 'L'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_fuel_quantity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '3',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'timestamp',
        'friendly_name': 'REG-NUMBER Last location activity',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_last_location_activity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '2020-02-18T16:58:38+00:00',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER Remote engine start',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_remote_engine_start',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'Stopped, ready for RES',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER Remote engine start code',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_remote_engine_start_code',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '10',
    }),
  ])
# ---
# name: test_sensors[zoe_40]
  list([
    DeviceRegistryEntrySnapshot({
      'area_id': None,
      'config_entries': <ANY>,
      'configuration_url': None,
      'connections': set({
      }),
      'disabled_by': None,
      'entry_type': None,
      'hw_version': None,
      'id': <ANY>,
      'identifiers': set({
        tuple(
          'renault',
          'VF1AAAAA555777999',
        ),
      }),
      'is_new': False,
      'labels': set({
      }),
      'manufacturer': 'Renault',
      'model': 'Zoe',
      'name': 'REG-NUMBER',
      'name_by_user': None,
      'primary_config_entry': <ANY>,
      'serial_number': None,
      'suggested_area': None,
      'sw_version': 'X101VE',
      'via_device_id': None,
    }),
  ])
# ---
# name: test_sensors[zoe_40].1
  list([
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
      'original_icon': None,
      'original_name': 'Battery',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': None,
      'unique_id': 'vf1aaaaa555777999_battery_level',
      'unit_of_measurement': '%',
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'options': list([
          'not_in_charge',
          'waiting_for_a_planned_charge',
          'charge_ended',
          'waiting_for_current_charge',
          'energy_flap_opened',
          'charge_in_progress',
          'charge_error',
          'unavailable',
        ]),
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_charge_state',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
      'original_icon': None,
      'original_name': 'Charge state',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'charge_state',
      'unique_id': 'vf1aaaaa555777999_charge_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_charging_remaining_time',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
      'original_icon': None,
      'original_name': 'Charging remaining time',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'charging_remaining_time',
      'unique_id': 'vf1aaaaa555777999_charging_remaining_time',
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_charging_power',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.POWER: 'power'>,
      'original_icon': None,
      'original_name': 'Charging power',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'charging_power',
      'unique_id': 'vf1aaaaa555777999_charging_power',
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'options': list([
          'unplugged',
          'plugged',
          'plug_error',
          'plug_unknown',
        ]),
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_plug_state',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
      'original_icon': None,
      'original_name': 'Plug state',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'plug_state',
      'unique_id': 'vf1aaaaa555777999_plug_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery_autonomy',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
      'original_icon': None,
      'original_name': 'Battery autonomy',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_autonomy',
      'unique_id': 'vf1aaaaa555777999_battery_autonomy',
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.TOTAL: 'total'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery_available_energy',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
      'original_icon': None,
      'original_name': 'Battery available energy',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_available_energy',
      'unique_id': 'vf1aaaaa555777999_battery_available_energy',
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery_temperature',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
      'original_icon': None,
      'original_name': 'Battery temperature',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_temperature',
      'unique_id': 'vf1aaaaa555777999_battery_temperature',
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': <RegistryEntryDisabler.INTEGRATION: 'integration'>,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_last_battery_activity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
      'original_icon': None,
      'original_name': 'Last battery activity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_last_activity',
      'unique_id': 'vf1aaaaa555777999_battery_last_activity',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_mileage',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
      'original_icon': None,
      'original_name': 'Mileage',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'mileage',
      'unique_id': 'vf1aaaaa555777999_mileage',
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_outside_temperature',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
      'original_icon': None,
      'original_name': 'Outside temperature',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'outside_temperature',
      'unique_id': 'vf1aaaaa555777999_outside_temperature',
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_hvac_soc_threshold',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'HVAC SoC threshold',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'hvac_soc_threshold',
      'unique_id': 'vf1aaaaa555777999_hvac_soc_threshold',
      'unit_of_measurement': '%',
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': <RegistryEntryDisabler.INTEGRATION: 'integration'>,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_last_hvac_activity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
      'original_icon': None,
      'original_name': 'Last HVAC activity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'hvac_last_activity',
      'unique_id': 'vf1aaaaa555777999_hvac_last_activity',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_remote_engine_start',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'Remote engine start',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'res_state',
      'unique_id': 'vf1aaaaa555777999_res_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': <RegistryEntryDisabler.INTEGRATION: 'integration'>,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_remote_engine_start_code',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'Remote engine start code',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'res_state_code',
      'unique_id': 'vf1aaaaa555777999_res_state_code',
      'unit_of_measurement': None,
    }),
  ])
# ---
# name: test_sensors[zoe_40].2
  list([
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'battery',
        'friendly_name': 'REG-NUMBER Battery',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': '%',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '60',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'enum',
        'friendly_name': 'REG-NUMBER Charge state',
        'options': list([
          'not_in_charge',
          'waiting_for_a_planned_charge',
          'charge_ended',
          'waiting_for_current_charge',
          'energy_flap_opened',
          'charge_in_progress',
          'charge_error',
          'unavailable',
        ]),
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_charge_state',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'charge_in_progress',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'duration',
        'friendly_name': 'REG-NUMBER Charging remaining time',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_charging_remaining_time',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '145',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'power',
        'friendly_name': 'REG-NUMBER Charging power',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_charging_power',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '0.027',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'enum',
        'friendly_name': 'REG-NUMBER Plug state',
        'options': list([
          'unplugged',
          'plugged',
          'plug_error',
          'plug_unknown',
        ]),
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_plug_state',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'plugged',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'distance',
        'friendly_name': 'REG-NUMBER Battery autonomy',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery_autonomy',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '141',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'energy',
        'friendly_name': 'REG-NUMBER Battery available energy',
        'state_class': <SensorStateClass.TOTAL: 'total'>,
        'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery_available_energy',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '31',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'temperature',
        'friendly_name': 'REG-NUMBER Battery temperature',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery_temperature',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '20',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'timestamp',
        'friendly_name': 'REG-NUMBER Last battery activity',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_last_battery_activity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '2020-01-12T21:40:16+00:00',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'distance',
        'friendly_name': 'REG-NUMBER Mileage',
        'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
        'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_mileage',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '49114',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'temperature',
        'friendly_name': 'REG-NUMBER Outside temperature',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_outside_temperature',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '8.0',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER HVAC SoC threshold',
        'unit_of_measurement': '%',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_hvac_soc_threshold',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'timestamp',
        'friendly_name': 'REG-NUMBER Last HVAC activity',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_last_hvac_activity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER Remote engine start',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_remote_engine_start',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER Remote engine start code',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_remote_engine_start_code',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
  ])
# ---
# name: test_sensors[zoe_50]
  list([
    DeviceRegistryEntrySnapshot({
      'area_id': None,
      'config_entries': <ANY>,
      'configuration_url': None,
      'connections': set({
      }),
      'disabled_by': None,
      'entry_type': None,
      'hw_version': None,
      'id': <ANY>,
      'identifiers': set({
        tuple(
          'renault',
          'VF1AAAAA555777999',
        ),
      }),
      'is_new': False,
      'labels': set({
      }),
      'manufacturer': 'Renault',
      'model': 'Zoe',
      'name': 'REG-NUMBER',
      'name_by_user': None,
      'primary_config_entry': <ANY>,
      'serial_number': None,
      'suggested_area': None,
      'sw_version': 'X102VE',
      'via_device_id': None,
    }),
  ])
# ---
# name: test_sensors[zoe_50].1
  list([
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
      'original_icon': None,
      'original_name': 'Battery',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': None,
      'unique_id': 'vf1aaaaa555777999_battery_level',
      'unit_of_measurement': '%',
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'options': list([
          'not_in_charge',
          'waiting_for_a_planned_charge',
          'charge_ended',
          'waiting_for_current_charge',
          'energy_flap_opened',
          'charge_in_progress',
          'charge_error',
          'unavailable',
        ]),
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_charge_state',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
      'original_icon': None,
      'original_name': 'Charge state',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'charge_state',
      'unique_id': 'vf1aaaaa555777999_charge_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_charging_remaining_time',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
      'original_icon': None,
      'original_name': 'Charging remaining time',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'charging_remaining_time',
      'unique_id': 'vf1aaaaa555777999_charging_remaining_time',
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_admissible_charging_power',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.POWER: 'power'>,
      'original_icon': None,
      'original_name': 'Admissible charging power',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'admissible_charging_power',
      'unique_id': 'vf1aaaaa555777999_charging_power',
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'options': list([
          'unplugged',
          'plugged',
          'plug_error',
          'plug_unknown',
        ]),
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_plug_state',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
      'original_icon': None,
      'original_name': 'Plug state',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'plug_state',
      'unique_id': 'vf1aaaaa555777999_plug_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery_autonomy',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
      'original_icon': None,
      'original_name': 'Battery autonomy',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_autonomy',
      'unique_id': 'vf1aaaaa555777999_battery_autonomy',
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.TOTAL: 'total'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery_available_energy',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
      'original_icon': None,
      'original_name': 'Battery available energy',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_available_energy',
      'unique_id': 'vf1aaaaa555777999_battery_available_energy',
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_battery_temperature',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
      'original_icon': None,
      'original_name': 'Battery temperature',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_temperature',
      'unique_id': 'vf1aaaaa555777999_battery_temperature',
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': <RegistryEntryDisabler.INTEGRATION: 'integration'>,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_last_battery_activity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
      'original_icon': None,
      'original_name': 'Last battery activity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'battery_last_activity',
      'unique_id': 'vf1aaaaa555777999_battery_last_activity',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_mileage',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
      'original_icon': None,
      'original_name': 'Mileage',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'mileage',
      'unique_id': 'vf1aaaaa555777999_mileage',
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': dict({
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      }),
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_outside_temperature',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
      'original_icon': None,
      'original_name': 'Outside temperature',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'outside_temperature',
      'unique_id': 'vf1aaaaa555777999_outside_temperature',
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_hvac_soc_threshold',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'HVAC SoC threshold',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'hvac_soc_threshold',
      'unique_id': 'vf1aaaaa555777999_hvac_soc_threshold',
      'unit_of_measurement': '%',
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': <RegistryEntryDisabler.INTEGRATION: 'integration'>,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_last_hvac_activity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
      'original_icon': None,
      'original_name': 'Last HVAC activity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'hvac_last_activity',
      'unique_id': 'vf1aaaaa555777999_hvac_last_activity',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': <RegistryEntryDisabler.INTEGRATION: 'integration'>,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_last_location_activity',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
      'original_icon': None,
      'original_name': 'Last location activity',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'location_last_activity',
      'unique_id': 'vf1aaaaa555777999_location_last_activity',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': None,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_remote_engine_start',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'Remote engine start',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'res_state',
      'unique_id': 'vf1aaaaa555777999_res_state',
      'unit_of_measurement': None,
    }),
    EntityRegistryEntrySnapshot({
      'aliases': set({
      }),
      'area_id': None,
      'capabilities': None,
      'config_entry_id': <ANY>,
      'device_class': None,
      'device_id': <ANY>,
      'disabled_by': <RegistryEntryDisabler.INTEGRATION: 'integration'>,
      'domain': 'sensor',
      'entity_category': None,
      'entity_id': 'sensor.reg_number_remote_engine_start_code',
      'has_entity_name': True,
      'hidden_by': None,
      'icon': None,
      'id': <ANY>,
      'labels': set({
      }),
      'name': None,
      'options': dict({
      }),
      'original_device_class': None,
      'original_icon': None,
      'original_name': 'Remote engine start code',
      'platform': 'renault',
      'previous_unique_id': None,
      'supported_features': 0,
      'translation_key': 'res_state_code',
      'unique_id': 'vf1aaaaa555777999_res_state_code',
      'unit_of_measurement': None,
    }),
  ])
# ---
# name: test_sensors[zoe_50].2
  list([
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'battery',
        'friendly_name': 'REG-NUMBER Battery',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': '%',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '50',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'enum',
        'friendly_name': 'REG-NUMBER Charge state',
        'options': list([
          'not_in_charge',
          'waiting_for_a_planned_charge',
          'charge_ended',
          'waiting_for_current_charge',
          'energy_flap_opened',
          'charge_in_progress',
          'charge_error',
          'unavailable',
        ]),
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_charge_state',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'charge_error',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'duration',
        'friendly_name': 'REG-NUMBER Charging remaining time',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_charging_remaining_time',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'power',
        'friendly_name': 'REG-NUMBER Admissible charging power',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_admissible_charging_power',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'enum',
        'friendly_name': 'REG-NUMBER Plug state',
        'options': list([
          'unplugged',
          'plugged',
          'plug_error',
          'plug_unknown',
        ]),
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_plug_state',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unplugged',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'distance',
        'friendly_name': 'REG-NUMBER Battery autonomy',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery_autonomy',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '128',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'energy',
        'friendly_name': 'REG-NUMBER Battery available energy',
        'state_class': <SensorStateClass.TOTAL: 'total'>,
        'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery_available_energy',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '0',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'temperature',
        'friendly_name': 'REG-NUMBER Battery temperature',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_battery_temperature',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'timestamp',
        'friendly_name': 'REG-NUMBER Last battery activity',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_last_battery_activity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '2020-11-17T08:06:48+00:00',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'distance',
        'friendly_name': 'REG-NUMBER Mileage',
        'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
        'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_mileage',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '49114',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'temperature',
        'friendly_name': 'REG-NUMBER Outside temperature',
        'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
        'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_outside_temperature',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'unknown',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER HVAC SoC threshold',
        'unit_of_measurement': '%',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_hvac_soc_threshold',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '30.0',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'timestamp',
        'friendly_name': 'REG-NUMBER Last HVAC activity',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_last_hvac_activity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '2020-12-03T00:00:00+00:00',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'device_class': 'timestamp',
        'friendly_name': 'REG-NUMBER Last location activity',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_last_location_activity',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '2020-02-18T16:58:38+00:00',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER Remote engine start',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_remote_engine_start',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': 'Stopped, ready for RES',
    }),
    StateSnapshot({
      'attributes': ReadOnlyDict({
        'friendly_name': 'REG-NUMBER Remote engine start code',
      }),
      'context': <ANY>,
      'entity_id': 'sensor.reg_number_remote_engine_start_code',
      'last_changed': <ANY>,
      'last_reported': <ANY>,
      'last_updated': <ANY>,
      'state': '10',
    }),
  ])
# ---
